"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic_core_dist_esm_ion-nav_2_entry_js"],{

/***/ 9632:
/*!**************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ion_nav": () => (/* binding */ Nav),
/* harmony export */   "ion_nav_link": () => (/* binding */ NavLink)
/* harmony export */ });
/* harmony import */ var _Users_damian_Sample_Code_iv_test_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-8e692445.js */ 1559);
/* harmony import */ var _ionic_global_c95cf239_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ionic-global-c95cf239.js */ 8607);
/* harmony import */ var _cubic_bezier_e78d1307_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cubic-bezier-e78d1307.js */ 1463);
/* harmony import */ var _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers-3b390e48.js */ 9259);
/* harmony import */ var _index_eab49c64_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index-eab49c64.js */ 1856);
/* harmony import */ var _framework_delegate_073a0b65_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./framework-delegate-073a0b65.js */ 5921);


/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */






const VIEW_STATE_NEW = 1;
const VIEW_STATE_ATTACHED = 2;
const VIEW_STATE_DESTROYED = 3;

class ViewController {
  constructor(component, params) {
    this.component = component;
    this.params = params;
    this.state = VIEW_STATE_NEW;
  }

  init(container) {
    var _this = this;

    return (0,_Users_damian_Sample_Code_iv_test_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this.state = VIEW_STATE_ATTACHED;

      if (!_this.element) {
        const component = _this.component;
        _this.element = yield (0,_framework_delegate_073a0b65_js__WEBPACK_IMPORTED_MODULE_6__.a)(_this.delegate, container, component, ['ion-page', 'ion-page-invisible'], _this.params);
      }
    })();
  }
  /**
   * DOM WRITE
   */


  _destroy() {
    (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');
    const element = this.element;

    if (element) {
      if (this.delegate) {
        this.delegate.removeViewFromDom(element.parentElement, element);
      } else {
        element.remove();
      }
    }

    this.nav = undefined;
    this.state = VIEW_STATE_DESTROYED;
  }

}

const matches = (view, id, params) => {
  if (!view) {
    return false;
  }

  if (view.component !== id) {
    return false;
  }

  return (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.s)(view.params, params);
};

const convertToView = (page, params) => {
  if (!page) {
    return null;
  }

  if (page instanceof ViewController) {
    return page;
  }

  return new ViewController(page, params);
};

const convertToViews = pages => {
  return pages.map(page => {
    if (page instanceof ViewController) {
      return page;
    }

    if ('component' in page) {
      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);
    }

    return convertToView(page, undefined);
  }).filter(v => v !== null);
};

const navCss = ":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}";
const Nav = class {
  constructor(hostRef) {
    (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.ionNavWillLoad = (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionNavWillLoad", 7);
    this.ionNavWillChange = (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionNavWillChange", 3);
    this.ionNavDidChange = (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionNavDidChange", 3);
    this.transInstr = [];
    this.animationEnabled = true;
    this.useRouter = false;
    this.isTransitioning = false;
    this.destroyed = false;
    this.views = [];
    /**
     * If `true`, the nav should animate the transition of components.
     */

    this.animated = true;
  }

  swipeGestureChanged() {
    if (this.gesture) {
      this.gesture.enable(this.swipeGesture === true);
    }
  }

  rootChanged() {
    if (this.root !== undefined) {
      if (!this.useRouter) {
        this.setRoot(this.root, this.rootParams);
      }
    }
  }

  componentWillLoad() {
    this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;

    if (this.swipeGesture === undefined) {
      const mode = (0,_ionic_global_c95cf239_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
      this.swipeGesture = _ionic_global_c95cf239_js__WEBPACK_IMPORTED_MODULE_2__.c.getBoolean('swipeBackEnabled', mode === 'ios');
    }

    this.ionNavWillLoad.emit();
  }

  componentDidLoad() {
    var _this2 = this;

    return (0,_Users_damian_Sample_Code_iv_test_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this2.rootChanged();

      _this2.gesture = (yield __webpack_require__.e(/*! import() */ "common").then(__webpack_require__.bind(__webpack_require__, /*! ./swipe-back-e1ef2243.js */ 4293))).createSwipeBackGesture(_this2.el, _this2.canStart.bind(_this2), _this2.onStart.bind(_this2), _this2.onMove.bind(_this2), _this2.onEnd.bind(_this2));

      _this2.swipeGestureChanged();
    })();
  }

  connectedCallback() {
    this.destroyed = false;
  }

  disconnectedCallback() {
    for (const view of this.views) {
      (0,_index_eab49c64_js__WEBPACK_IMPORTED_MODULE_5__.l)(view.element, _index_eab49c64_js__WEBPACK_IMPORTED_MODULE_5__.d);

      view._destroy();
    } // Release swipe back gesture and transition.


    if (this.gesture) {
      this.gesture.destroy();
      this.gesture = undefined;
    }

    this.transInstr.length = 0;
    this.views.length = 0;
    this.destroyed = true;
  }
  /**
   * Push a new component onto the current navigation stack. Pass any additional
   * information along as an object. This additional information is accessible
   * through NavParams.
   *
   * @param component The component to push onto the navigation stack.
   * @param componentProps Any properties of the component.
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  push(component, componentProps, opts, done) {
    return this.insert(-1, component, componentProps, opts, done);
  }
  /**
   * Inserts a component into the navigation stack at the specified index.
   * This is useful to add a component at any point in the navigation stack.
   *
   * @param insertIndex The index to insert the component at in the stack.
   * @param component The component to insert into the navigation stack.
   * @param componentProps Any properties of the component.
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  insert(insertIndex, component, componentProps, opts, done) {
    return this.insertPages(insertIndex, [{
      component,
      componentProps
    }], opts, done);
  }
  /**
   * Inserts an array of components into the navigation stack at the specified index.
   * The last component in the array will become instantiated as a view, and animate
   * in to become the active view.
   *
   * @param insertIndex The index to insert the components at in the stack.
   * @param insertComponents The components to insert into the navigation stack.
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  insertPages(insertIndex, insertComponents, opts, done) {
    return this.queueTrns({
      insertStart: insertIndex,
      insertViews: insertComponents,
      opts
    }, done);
  }
  /**
   * Pop a component off of the navigation stack. Navigates back from the current
   * component.
   *
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  pop(opts, done) {
    return this.removeIndex(-1, 1, opts, done);
  }
  /**
   * Pop to a specific index in the navigation stack.
   *
   * @param indexOrViewCtrl The index or view controller to pop to.
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  popTo(indexOrViewCtrl, opts, done) {
    const ti = {
      removeStart: -1,
      removeCount: -1,
      opts
    };

    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {
      ti.removeView = indexOrViewCtrl;
      ti.removeStart = 1;
    } else if (typeof indexOrViewCtrl === 'number') {
      ti.removeStart = indexOrViewCtrl + 1;
    }

    return this.queueTrns(ti, done);
  }
  /**
   * Navigate back to the root of the stack, no matter how far back that is.
   *
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  popToRoot(opts, done) {
    return this.removeIndex(1, -1, opts, done);
  }
  /**
   * Removes a component from the navigation stack at the specified index.
   *
   * @param startIndex The number to begin removal at.
   * @param removeCount The number of components to remove.
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  removeIndex(startIndex, removeCount = 1, opts, done) {
    return this.queueTrns({
      removeStart: startIndex,
      removeCount,
      opts
    }, done);
  }
  /**
   * Set the root for the current navigation stack to a component.
   *
   * @param component The component to set as the root of the navigation stack.
   * @param componentProps Any properties of the component.
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  setRoot(component, componentProps, opts, done) {
    return this.setPages([{
      component,
      componentProps
    }], opts, done);
  }
  /**
   * Set the views of the current navigation stack and navigate to the last view.
   * By default animations are disabled, but they can be enabled by passing options
   * to the navigation controller. Navigation parameters can also be passed to the
   * individual pages in the array.
   *
   * @param views The list of views to set as the navigation stack.
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  setPages(views, opts, done) {
    opts !== null && opts !== void 0 ? opts : opts = {}; // if animation wasn't set to true then default it to NOT animate

    if (opts.animated !== true) {
      opts.animated = false;
    }

    return this.queueTrns({
      insertStart: 0,
      insertViews: views,
      removeStart: 0,
      removeCount: -1,
      opts
    }, done);
  }
  /**
   * Called by the router to update the view.
   *
   * @param id The component tag.
   * @param params The component params.
   * @param direction A direction hint.
   * @param animation an AnimationBuilder.
   *
   * @return the status.
   * @internal
   */


  setRouteId(id, params, direction, animation) {
    const active = this.getActiveSync();

    if (matches(active, id, params)) {
      return Promise.resolve({
        changed: false,
        element: active.element
      });
    }

    let resolve;
    const promise = new Promise(r => resolve = r);
    let finish;
    const commonOpts = {
      updateURL: false,
      viewIsReady: enteringEl => {
        let mark;
        const p = new Promise(r => mark = r);
        resolve({
          changed: true,
          element: enteringEl,
          markVisible: function () {
            var _ref = (0,_Users_damian_Sample_Code_iv_test_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
              mark();
              yield finish;
            });

            return function markVisible() {
              return _ref.apply(this, arguments);
            };
          }()
        });
        return p;
      }
    };

    if (direction === 'root') {
      finish = this.setRoot(id, params, commonOpts);
    } else {
      // Look for a view matching the target in the view stack.
      const viewController = this.views.find(v => matches(v, id, params));

      if (viewController) {
        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {
          direction: 'back',
          animationBuilder: animation
        }));
      } else if (direction === 'forward') {
        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), {
          animationBuilder: animation
        }));
      } else if (direction === 'back') {
        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {
          direction: 'back',
          animated: true,
          animationBuilder: animation
        }));
      }
    }

    return promise;
  }
  /**
   * Called by <ion-router> to retrieve the current component.
   *
   * @internal
   */


  getRouteId() {
    var _this3 = this;

    return (0,_Users_damian_Sample_Code_iv_test_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const active = _this3.getActiveSync();

      if (active) {
        return {
          id: active.element.tagName,
          params: active.params,
          element: active.element
        };
      }

      return undefined;
    })();
  }
  /**
   * Get the active view.
   */


  getActive() {
    var _this4 = this;

    return (0,_Users_damian_Sample_Code_iv_test_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this4.getActiveSync();
    })();
  }
  /**
   * Get the view at the specified index.
   *
   * @param index The index of the view.
   */


  getByIndex(index) {
    var _this5 = this;

    return (0,_Users_damian_Sample_Code_iv_test_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this5.views[index];
    })();
  }
  /**
   * Returns `true` if the current view can go back.
   *
   * @param view The view to check.
   */


  canGoBack(view) {
    var _this6 = this;

    return (0,_Users_damian_Sample_Code_iv_test_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this6.canGoBackSync(view);
    })();
  }
  /**
   * Get the previous view.
   *
   * @param view The view to get.
   */


  getPrevious(view) {
    var _this7 = this;

    return (0,_Users_damian_Sample_Code_iv_test_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this7.getPreviousSync(view);
    })();
  }

  getLength() {
    return this.views.length;
  }

  getActiveSync() {
    return this.views[this.views.length - 1];
  }

  canGoBackSync(view = this.getActiveSync()) {
    return !!(view && this.getPreviousSync(view));
  }

  getPreviousSync(view = this.getActiveSync()) {
    if (!view) {
      return undefined;
    }

    const views = this.views;
    const index = views.indexOf(view);
    return index > 0 ? views[index - 1] : undefined;
  }
  /**
   * Adds a navigation stack change to the queue and schedules it to run.
   *
   * @returns Whether the transition succeeds.
   */


  queueTrns(ti, done) {
    var _this8 = this;

    return (0,_Users_damian_Sample_Code_iv_test_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var _a, _b;

      if (_this8.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy)) {
        return false;
      }

      const promise = new Promise((resolve, reject) => {
        ti.resolve = resolve;
        ti.reject = reject;
      });
      ti.done = done;
      /**
       * If using router, check to see if navigation hooks
       * will allow us to perform this transition. This
       * is required in order for hooks to work with
       * the ion-back-button or swipe to go back.
       */

      if (ti.opts && ti.opts.updateURL !== false && _this8.useRouter) {
        const router = document.querySelector('ion-router');

        if (router) {
          const canTransition = yield router.canTransition();

          if (canTransition === false) {
            return false;
          }

          if (typeof canTransition === 'string') {
            router.push(canTransition, ti.opts.direction || 'back');
            return false;
          }
        }
      } // Normalize empty


      if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {
        ti.insertViews = undefined;
      } // Enqueue transition instruction


      _this8.transInstr.push(ti); // if there isn't a transition already happening
      // then this will kick off this transition


      _this8.nextTrns();

      return promise;
    })();
  }

  success(result, ti) {
    if (this.destroyed) {
      this.fireError('nav controller was destroyed', ti);
      return;
    }

    if (ti.done) {
      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);
    }

    ti.resolve(result.hasCompleted);

    if (ti.opts.updateURL !== false && this.useRouter) {
      const router = document.querySelector('ion-router');

      if (router) {
        const direction = result.direction === 'back' ? 'back' : 'forward';
        router.navChanged(direction);
      }
    }
  }

  failed(rejectReason, ti) {
    if (this.destroyed) {
      this.fireError('nav controller was destroyed', ti);
      return;
    }

    this.transInstr.length = 0;
    this.fireError(rejectReason, ti);
  }

  fireError(rejectReason, ti) {
    if (ti.done) {
      ti.done(false, false, rejectReason);
    }

    if (ti.reject && !this.destroyed) {
      ti.reject(rejectReason);
    } else {
      ti.resolve(false);
    }
  }
  /**
   * Consumes the next transition in the queue.
   *
   * @returns whether the transition is executed.
   */


  nextTrns() {
    // this is the framework's bread 'n butta function
    // only one transition is allowed at any given time
    if (this.isTransitioning) {
      return false;
    } // there is no transition happening right now, executes the next instructions.


    const ti = this.transInstr.shift();

    if (!ti) {
      return false;
    }

    this.runTransition(ti);
    return true;
  }
  /** Executes all the transition instruction from the queue. */


  runTransition(ti) {
    var _this9 = this;

    return (0,_Users_damian_Sample_Code_iv_test_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      try {
        // set that this nav is actively transitioning
        _this9.ionNavWillChange.emit();

        _this9.isTransitioning = true;

        _this9.prepareTI(ti);

        const leavingView = _this9.getActiveSync();

        const enteringView = _this9.getEnteringView(ti, leavingView);

        if (!leavingView && !enteringView) {
          throw new Error('no views in the stack to be removed');
        }

        if (enteringView && enteringView.state === VIEW_STATE_NEW) {
          yield enteringView.init(_this9.el);
        }

        _this9.postViewInit(enteringView, leavingView, ti); // Needs transition?


        const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;

        if (requiresTransition && ti.opts && leavingView) {
          const isBackDirection = ti.opts.direction === 'back';
          /**
           * If heading back, use the entering page's animation
           * unless otherwise specified by the developer.
           */

          if (isBackDirection) {
            ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);
          }

          leavingView.animationBuilder = ti.opts.animationBuilder;
        }

        let result;

        if (requiresTransition) {
          result = yield _this9.transition(enteringView, leavingView, ti);
        } else {
          // transition is not required, so we are already done!
          // they're inserting/removing the views somewhere in the middle or
          // beginning, so visually nothing needs to animate/transition
          // resolve immediately because there's no animation that's happening
          result = {
            hasCompleted: true,
            requiresTransition: false
          };
        }

        _this9.success(result, ti);

        _this9.ionNavDidChange.emit();
      } catch (rejectReason) {
        _this9.failed(rejectReason, ti);
      }

      _this9.isTransitioning = false;

      _this9.nextTrns();
    })();
  }

  prepareTI(ti) {
    var _a, _b;

    var _c;

    const viewsLength = this.views.length;
    (_a = ti.opts) !== null && _a !== void 0 ? _a : ti.opts = {};
    (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : _c.delegate = this.delegate;

    if (ti.removeView !== undefined) {
      (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(ti.removeStart !== undefined, 'removeView needs removeStart');
      (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(ti.removeCount !== undefined, 'removeView needs removeCount');
      const index = this.views.indexOf(ti.removeView);

      if (index < 0) {
        throw new Error('removeView was not found');
      }

      ti.removeStart += index;
    }

    if (ti.removeStart !== undefined) {
      if (ti.removeStart < 0) {
        ti.removeStart = viewsLength - 1;
      }

      if (ti.removeCount < 0) {
        ti.removeCount = viewsLength - ti.removeStart;
      }

      ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;
    }

    if (ti.insertViews) {
      // allow -1 to be passed in to auto push it on the end
      // and clean up the index if it's larger then the size of the stack
      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {
        ti.insertStart = viewsLength;
      }

      ti.enteringRequiresTransition = ti.insertStart === viewsLength;
    }

    const insertViews = ti.insertViews;

    if (!insertViews) {
      return;
    }

    (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(insertViews.length > 0, 'length can not be zero');
    const viewControllers = convertToViews(insertViews);

    if (viewControllers.length === 0) {
      throw new Error('invalid views to insert');
    } // Check all the inserted view are correct


    for (const view of viewControllers) {
      view.delegate = ti.opts.delegate;
      const nav = view.nav;

      if (nav && nav !== this) {
        throw new Error('inserted view was already inserted');
      }

      if (view.state === VIEW_STATE_DESTROYED) {
        throw new Error('inserted view was already destroyed');
      }
    }

    ti.insertViews = viewControllers;
  }
  /**
   * Returns the view that will be entered considering the transition instructions.
   *
   * @param ti The instructions.
   * @param leavingView The view being left or undefined if none.
   *
   * @returns The view that will be entered, undefined if none.
   */


  getEnteringView(ti, leavingView) {
    // The last inserted view will be entered when view are inserted.
    const insertViews = ti.insertViews;

    if (insertViews !== undefined) {
      return insertViews[insertViews.length - 1];
    } // When views are deleted, we will enter the last view that is not removed and not the view being left.


    const removeStart = ti.removeStart;

    if (removeStart !== undefined) {
      const views = this.views;
      const removeEnd = removeStart + ti.removeCount;

      for (let i = views.length - 1; i >= 0; i--) {
        const view = views[i];

        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {
          return view;
        }
      }
    }

    return undefined;
  }
  /**
   * Adds and Removes the views from the navigation stack.
   *
   * @param enteringView The view being entered.
   * @param leavingView The view being left.
   * @param ti The instructions.
   */


  postViewInit(enteringView, leavingView, ti) {
    var _a, _b, _c;

    (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(leavingView || enteringView, 'Both leavingView and enteringView are null');
    (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(ti.resolve, 'resolve must be valid');
    (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(ti.reject, 'reject must be valid'); // Compute the views to remove.

    const opts = ti.opts;
    const {
      insertViews,
      removeStart,
      removeCount
    } = ti;
    /** Records the view to destroy */

    let destroyQueue; // there are views to remove

    if (removeStart !== undefined && removeCount !== undefined) {
      (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(removeStart >= 0, 'removeStart can not be negative');
      (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(removeCount >= 0, 'removeCount can not be negative');
      destroyQueue = [];

      for (let i = removeStart; i < removeStart + removeCount; i++) {
        const view = this.views[i];

        if (view !== undefined && view !== enteringView && view !== leavingView) {
          destroyQueue.push(view);
        }
      } // default the direction to "back"


      (_a = opts.direction) !== null && _a !== void 0 ? _a : opts.direction = 'back';
    }

    const finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);
    (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(finalNumViews >= 0, 'final balance can not be negative');

    if (finalNumViews === 0) {
      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);
      throw new Error('navigation stack needs at least one root page');
    } // At this point the transition can not be rejected, any throw should be an error
    // Insert the new views in the stack.


    if (insertViews) {
      // add the views to the
      let insertIndex = ti.insertStart;

      for (const view of insertViews) {
        this.insertViewAt(view, insertIndex);
        insertIndex++;
      }

      if (ti.enteringRequiresTransition) {
        // default to forward if not already set
        (_c = opts.direction) !== null && _c !== void 0 ? _c : opts.direction = 'forward';
      }
    } // if the views to be removed are in the beginning or middle
    // and there is not a view that needs to visually transition out
    // then just destroy them and don't transition anything
    // batch all of lifecycles together
    // let's make sure, callbacks are zoned


    if (destroyQueue && destroyQueue.length > 0) {
      for (const view of destroyQueue) {
        (0,_index_eab49c64_js__WEBPACK_IMPORTED_MODULE_5__.l)(view.element, _index_eab49c64_js__WEBPACK_IMPORTED_MODULE_5__.b);
        (0,_index_eab49c64_js__WEBPACK_IMPORTED_MODULE_5__.l)(view.element, _index_eab49c64_js__WEBPACK_IMPORTED_MODULE_5__.c);
        (0,_index_eab49c64_js__WEBPACK_IMPORTED_MODULE_5__.l)(view.element, _index_eab49c64_js__WEBPACK_IMPORTED_MODULE_5__.d);
      } // once all lifecycle events has been delivered, we can safely detroy the views


      for (const view of destroyQueue) {
        this.destroyView(view);
      }
    }
  }

  transition(enteringView, leavingView, ti) {
    var _this10 = this;

    return (0,_Users_damian_Sample_Code_iv_test_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // we should animate (duration > 0) if the pushed page is not the first one (startup)
      // or if it is a portal (modal, actionsheet, etc.)
      const opts = ti.opts;
      const progressCallback = opts.progressAnimation ? ani => _this10.sbAni = ani : undefined;
      const mode = (0,_ionic_global_c95cf239_js__WEBPACK_IMPORTED_MODULE_2__.b)(_this10);
      const enteringEl = enteringView.element;
      const leavingEl = leavingView && leavingView.element;
      const animationOpts = Object.assign(Object.assign({
        mode,
        showGoBack: _this10.canGoBackSync(enteringView),
        baseEl: _this10.el,
        progressCallback,
        animated: _this10.animated && _ionic_global_c95cf239_js__WEBPACK_IMPORTED_MODULE_2__.c.getBoolean('animated', true),
        enteringEl,
        leavingEl
      }, opts), {
        animationBuilder: opts.animationBuilder || _this10.animation || _ionic_global_c95cf239_js__WEBPACK_IMPORTED_MODULE_2__.c.get('navAnimation')
      });
      const {
        hasCompleted
      } = yield (0,_index_eab49c64_js__WEBPACK_IMPORTED_MODULE_5__.t)(animationOpts);
      return _this10.transitionFinish(hasCompleted, enteringView, leavingView, opts);
    })();
  }

  transitionFinish(hasCompleted, enteringView, leavingView, opts) {
    /**
     * If the transition did not complete, the leavingView will still be the active
     * view on the stack. Otherwise unmount all the views after the enteringView.
     */
    const activeView = hasCompleted ? enteringView : leavingView;

    if (activeView) {
      this.unmountInactiveViews(activeView);
    }

    return {
      hasCompleted,
      requiresTransition: true,
      enteringView,
      leavingView,
      direction: opts.direction
    };
  }
  /**
   * Inserts a view at the specified index.
   *
   * When the view already is in the stack it will be moved to the new position.
   *
   * @param view The view to insert.
   * @param index The index where to insert the view.
   */


  insertViewAt(view, index) {
    const views = this.views;
    const existingIndex = views.indexOf(view);

    if (existingIndex > -1) {
      (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(view.nav === this, 'view is not part of the nav'); // The view already in the stack, removes it.

      views.splice(existingIndex, 1); // and add it back at the requested index.

      views.splice(index, 0, view);
    } else {
      (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(!view.nav, 'nav is used'); // this is a new view to add to the stack
      // create the new entering view

      view.nav = this;
      views.splice(index, 0, view);
    }
  }
  /**
   * Removes a view from the stack.
   *
   * @param view The view to remove.
   */


  removeView(view) {
    (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');
    const views = this.views;
    const index = views.indexOf(view);
    (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(index > -1, 'view must be part of the stack');

    if (index >= 0) {
      views.splice(index, 1);
    }
  }

  destroyView(view) {
    view._destroy();

    this.removeView(view);
  }
  /**
   * Unmounts all inactive views after the specified active view.
   *
   * DOM WRITE
   *
   * @param activeView The view that is actively visible in the stack. Used to calculate which views to unmount.
   */


  unmountInactiveViews(activeView) {
    // ok, cleanup time!! Destroy all of the views that are
    // INACTIVE and come after the active view
    // only do this if the views exist, though
    if (this.destroyed) {
      return;
    }

    const views = this.views;
    const activeViewIndex = views.indexOf(activeView);

    for (let i = views.length - 1; i >= 0; i--) {
      const view = views[i];
      /**
       * When inserting multiple views via insertPages
       * the last page will be transitioned to, but the
       * others will not be. As a result, a DOM element
       * will only be created for the last page inserted.
       * As a result, it is possible to have views in the
       * stack that do not have `view.element` yet.
       */

      const element = view.element;

      if (element) {
        if (i > activeViewIndex) {
          // this view comes after the active view
          // let's unload it
          (0,_index_eab49c64_js__WEBPACK_IMPORTED_MODULE_5__.l)(element, _index_eab49c64_js__WEBPACK_IMPORTED_MODULE_5__.d);
          this.destroyView(view);
        } else if (i < activeViewIndex) {
          // this view comes before the active view
          // and it is not a portal then ensure it is hidden
          (0,_index_eab49c64_js__WEBPACK_IMPORTED_MODULE_5__.s)(element, true);
        }
      }
    }
  }

  canStart() {
    return !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.animationEnabled && this.canGoBackSync();
  }

  onStart() {
    this.pop({
      direction: 'back',
      progressAnimation: true
    });
  }

  onMove(stepValue) {
    if (this.sbAni) {
      this.sbAni.progressStep(stepValue);
    }
  }

  onEnd(shouldComplete, stepValue, dur) {
    if (this.sbAni) {
      this.animationEnabled = false;
      this.sbAni.onFinish(() => {
        this.animationEnabled = true;
      }, {
        oneTimeCallback: true
      }); // Account for rounding errors in JS

      let newStepValue = shouldComplete ? -0.001 : 0.001;
      /**
       * Animation will be reversed here, so need to
       * reverse the easing curve as well
       *
       * Additionally, we need to account for the time relative
       * to the new easing curve, as `stepValue` is going to be given
       * in terms of a linear curve.
       */

      if (!shouldComplete) {
        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');
        newStepValue += (0,_cubic_bezier_e78d1307_js__WEBPACK_IMPORTED_MODULE_3__.g)([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];
      } else {
        newStepValue += (0,_cubic_bezier_e78d1307_js__WEBPACK_IMPORTED_MODULE_3__.g)([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];
      }

      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);
    }
  }

  render() {
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null);
  }

  get el() {
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
  }

  static get watchers() {
    return {
      "swipeGesture": ["swipeGestureChanged"],
      "root": ["rootChanged"]
    };
  }

};
Nav.style = navCss;

const navLink = (el, routerDirection, component, componentProps, routerAnimation) => {
  const nav = el.closest('ion-nav');

  if (nav) {
    if (routerDirection === 'forward') {
      if (component !== undefined) {
        return nav.push(component, componentProps, {
          skipIfBusy: true,
          animationBuilder: routerAnimation
        });
      }
    } else if (routerDirection === 'root') {
      if (component !== undefined) {
        return nav.setRoot(component, componentProps, {
          skipIfBusy: true,
          animationBuilder: routerAnimation
        });
      }
    } else if (routerDirection === 'back') {
      return nav.pop({
        skipIfBusy: true,
        animationBuilder: routerAnimation
      });
    }
  }

  return Promise.resolve(false);
};

const NavLink = class {
  constructor(hostRef) {
    (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    /**
     * The transition direction when navigating to another page.
     */

    this.routerDirection = 'forward';

    this.onClick = () => {
      return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);
    };
  }

  render() {
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      onClick: this.onClick
    });
  }

  get el() {
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
  }

};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLW5hdl8yX2VudHJ5X2pzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsTUFBTThCLGNBQWMsR0FBRyxDQUF2QjtBQUNBLE1BQU1DLG1CQUFtQixHQUFHLENBQTVCO0FBQ0EsTUFBTUMsb0JBQW9CLEdBQUcsQ0FBN0I7O0FBQ0EsTUFBTUMsY0FBTixDQUFxQjtFQUNuQkMsV0FBVyxDQUFDQyxTQUFELEVBQVlDLE1BQVosRUFBb0I7SUFDN0IsS0FBS0QsU0FBTCxHQUFpQkEsU0FBakI7SUFDQSxLQUFLQyxNQUFMLEdBQWNBLE1BQWQ7SUFDQSxLQUFLQyxLQUFMLEdBQWFQLGNBQWI7RUFDRDs7RUFDS1EsSUFBSSxDQUFDQyxTQUFELEVBQVk7SUFBQTs7SUFBQTtNQUNwQixLQUFJLENBQUNGLEtBQUwsR0FBYU4sbUJBQWI7O01BQ0EsSUFBSSxDQUFDLEtBQUksQ0FBQ1MsT0FBVixFQUFtQjtRQUNqQixNQUFNTCxTQUFTLEdBQUcsS0FBSSxDQUFDQSxTQUF2QjtRQUNBLEtBQUksQ0FBQ0ssT0FBTCxTQUFxQlgsa0VBQWUsQ0FBQyxLQUFJLENBQUNZLFFBQU4sRUFBZ0JGLFNBQWhCLEVBQTJCSixTQUEzQixFQUFzQyxDQUFDLFVBQUQsRUFBYSxvQkFBYixDQUF0QyxFQUEwRSxLQUFJLENBQUNDLE1BQS9FLENBQXBDO01BQ0Q7SUFMbUI7RUFNckI7RUFDRDtBQUNGO0FBQ0E7OztFQUNFTSxRQUFRLEdBQUc7SUFDVDFCLHVEQUFNLENBQUMsS0FBS3FCLEtBQUwsS0FBZUwsb0JBQWhCLEVBQXNDLDZCQUF0QyxDQUFOO0lBQ0EsTUFBTVEsT0FBTyxHQUFHLEtBQUtBLE9BQXJCOztJQUNBLElBQUlBLE9BQUosRUFBYTtNQUNYLElBQUksS0FBS0MsUUFBVCxFQUFtQjtRQUNqQixLQUFLQSxRQUFMLENB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NEosZUFBTCxHQUF1QixTQUF2Qjs7SUFDQSxLQUFLRyxPQUFMLEdBQWUsTUFBTTtNQUNuQixPQUFPSixPQUFPLENBQUMsS0FBS3JJLEVBQU4sRUFBVSxLQUFLc0ksZUFBZixFQUFnQyxLQUFLdEwsU0FBckMsRUFBZ0QsS0FBS3FCLGNBQXJELEVBQXFFLEtBQUtrSyxlQUExRSxDQUFkO0lBQ0QsQ0FGRDtFQUdEOztFQUNETCxNQUFNLEdBQUc7SUFDUCxPQUFPak4scURBQUMsQ0FBQ0ksaURBQUQsRUFBTztNQUFFb04sT0FBTyxFQUFFLEtBQUtBO0lBQWhCLENBQVAsQ0FBUjtFQUNEOztFQUNLLElBQUZ6SSxFQUFFLEdBQUc7SUFBRSxPQUFPN0UscURBQVUsQ0FBQyxJQUFELENBQWpCO0VBQTBCOztBQWRqQixDQUF0QiIsInNvdXJjZXMiOlsiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20vaW9uLW5hdl8yLmVudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogKEMpIElvbmljIGh0dHA6Ly9pb25pY2ZyYW1ld29yay5jb20gLSBNSVQgTGljZW5zZVxuICovXG5pbXBvcnQgeyByIGFzIHJlZ2lzdGVySW5zdGFuY2UsIGUgYXMgY3JlYXRlRXZlbnQsIGgsIGkgYXMgZ2V0RWxlbWVudCwgSCBhcyBIb3N0IH0gZnJvbSAnLi9pbmRleC04ZTY5MjQ0NS5qcyc7XG5pbXBvcnQgeyBiIGFzIGdldElvbk1vZGUsIGMgYXMgY29uZmlnIH0gZnJvbSAnLi9pb25pYy1nbG9iYWwtYzk1Y2YyMzkuanMnO1xuaW1wb3J0IHsgZyBhcyBnZXRUaW1lR2l2ZW5Qcm9ncmVzc2lvbiB9IGZyb20gJy4vY3ViaWMtYmV6aWVyLWU3OGQxMzA3LmpzJztcbmltcG9ydCB7IG4gYXMgYXNzZXJ0LCBzIGFzIHNoYWxsb3dFcXVhbFN0cmluZ01hcCB9IGZyb20gJy4vaGVscGVycy0zYjM5MGU0OC5qcyc7XG5pbXBvcnQgeyBsIGFzIGxpZmVjeWNsZSwgdCBhcyB0cmFuc2l0aW9uLCBzIGFzIHNldFBhZ2VIaWRkZW4sIGQgYXMgTElGRUNZQ0xFX1dJTExfVU5MT0FELCBiIGFzIExJRkVDWUNMRV9XSUxMX0xFQVZFLCBjIGFzIExJRkVDWUNMRV9ESURfTEVBVkUgfSBmcm9tICcuL2luZGV4LWVhYjQ5YzY0LmpzJztcbmltcG9ydCB7IGEgYXMgYXR0YWNoQ29tcG9uZW50IH0gZnJvbSAnLi9mcmFtZXdvcmstZGVsZWdhdGUtMDczYTBiNjUuanMnO1xuXG5jb25zdCBWSUVXX1NUQVRFX05FVyA9IDE7XG5jb25zdCBWSUVXX1NUQVRFX0FUVEFDSEVEID0gMjtcbmNvbnN0IFZJRVdfU1RBVEVfREVTVFJPWUVEID0gMztcbmNsYXNzIFZpZXdDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoY29tcG9uZW50LCBwYXJhbXMpIHtcbiAgICB0aGlzLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcbiAgICB0aGlzLnN0YXRlID0gVklFV19TVEFURV9ORVc7XG4gIH1cbiAgYXN5bmMgaW5pdChjb250YWluZXIpIHtcbiAgICB0aGlzLnN0YXRlID0gVklFV19TVEFURV9BVFRBQ0hFRDtcbiAgICBpZiAoIXRoaXMuZWxlbWVudCkge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5jb21wb25lbnQ7XG4gICAgICB0aGlzLmVsZW1lbnQgPSBhd2FpdCBhdHRhY2hDb21wb25lbnQodGhpcy5kZWxlZ2F0ZSwgY29udGFpbmVyLCBjb21wb25lbnQsIFsnaW9uLXBhZ2UnLCAnaW9uLXBhZ2UtaW52aXNpYmxlJ10sIHRoaXMucGFyYW1zKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERPTSBXUklURVxuICAgKi9cbiAgX2Rlc3Ryb3koKSB7XG4gICAgYXNzZXJ0KHRoaXMuc3RhdGUgIT09IFZJRVdfU1RBVEVfREVTVFJPWUVELCAndmlldyBzdGF0ZSBtdXN0IGJlIEFUVEFDSEVEJyk7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgaWYgKHRoaXMuZGVsZWdhdGUpIHtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZS5yZW1vdmVWaWV3RnJvbURvbShlbGVtZW50LnBhcmVudEVsZW1lbnQsIGVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubmF2ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc3RhdGUgPSBWSUVXX1NUQVRFX0RFU1RST1lFRDtcbiAgfVxufVxuY29uc3QgbWF0Y2hlcyA9ICh2aWV3LCBpZCwgcGFyYW1zKSA9PiB7XG4gIGlmICghdmlldykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodmlldy5jb21wb25lbnQgIT09IGlkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBzaGFsbG93RXF1YWxTdHJpbmdNYXAodmlldy5wYXJhbXMsIHBhcmFtcyk7XG59O1xuY29uc3QgY29udmVydFRvVmlldyA9IChwYWdlLCBwYXJhbXMpID0+IHtcbiAgaWYgKCFwYWdlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKHBhZ2UgaW5zdGFuY2VvZiBWaWV3Q29udHJvbGxlcikge1xuICAgIHJldHVybiBwYWdlO1xuICB9XG4gIHJldHVybiBuZXcgVmlld0NvbnRyb2xsZXIocGFnZSwgcGFyYW1zKTtcbn07XG5jb25zdCBjb252ZXJ0VG9WaWV3cyA9IChwYWdlcykgPT4ge1xuICByZXR1cm4gcGFnZXNcbiAgICAubWFwKChwYWdlKSA9PiB7XG4gICAgaWYgKHBhZ2UgaW5zdGFuY2VvZiBWaWV3Q29udHJvbGxlcikge1xuICAgICAgcmV0dXJuIHBhZ2U7XG4gICAgfVxuICAgIGlmICgnY29tcG9uZW50JyBpbiBwYWdlKSB7XG4gICAgICByZXR1cm4gY29udmVydFRvVmlldyhwYWdlLmNvbXBvbmVudCwgcGFnZS5jb21wb25lbnRQcm9wcyA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHBhZ2UuY29tcG9uZW50UHJvcHMpO1xuICAgIH1cbiAgICByZXR1cm4gY29udmVydFRvVmlldyhwYWdlLCB1bmRlZmluZWQpO1xuICB9KVxuICAgIC5maWx0ZXIoKHYpID0+IHYgIT09IG51bGwpO1xufTtcblxuY29uc3QgbmF2Q3NzID0gXCI6aG9zdHtsZWZ0OjA7cmlnaHQ6MDt0b3A6MDtib3R0b206MDtwb3NpdGlvbjphYnNvbHV0ZTtjb250YWluOmxheW91dCBzaXplIHN0eWxlO292ZXJmbG93OmhpZGRlbjt6LWluZGV4OjB9XCI7XG5cbmNvbnN0IE5hdiA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5pb25OYXZXaWxsTG9hZCA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uTmF2V2lsbExvYWRcIiwgNyk7XG4gICAgdGhpcy5pb25OYXZXaWxsQ2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25OYXZXaWxsQ2hhbmdlXCIsIDMpO1xuICAgIHRoaXMuaW9uTmF2RGlkQ2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25OYXZEaWRDaGFuZ2VcIiwgMyk7XG4gICAgdGhpcy50cmFuc0luc3RyID0gW107XG4gICAgdGhpcy5hbmltYXRpb25FbmFibGVkID0gdHJ1ZTtcbiAgICB0aGlzLnVzZVJvdXRlciA9IGZhbHNlO1xuICAgIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnZpZXdzID0gW107XG4gICAgLyoqXG4gICAgICogSWYgYHRydWVgLCB0aGUgbmF2IHNob3VsZCBhbmltYXRlIHRoZSB0cmFuc2l0aW9uIG9mIGNvbXBvbmVudHMuXG4gICAgICovXG4gICAgdGhpcy5hbmltYXRlZCA9IHRydWU7XG4gIH1cbiAgc3dpcGVHZXN0dXJlQ2hhbmdlZCgpIHtcbiAgICBpZiAodGhpcy5nZXN0dXJlKSB7XG4gICAgICB0aGlzLmdlc3R1cmUuZW5hYmxlKHRoaXMuc3dpcGVHZXN0dXJlID09PSB0cnVlKTtcbiAgICB9XG4gIH1cbiAgcm9vdENoYW5nZWQoKSB7XG4gICAgaWYgKHRoaXMucm9vdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIXRoaXMudXNlUm91dGVyKSB7XG4gICAgICAgIHRoaXMuc2V0Um9vdCh0aGlzLnJvb3QsIHRoaXMucm9vdFBhcmFtcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIHRoaXMudXNlUm91dGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW9uLXJvdXRlcicpICE9PSBudWxsICYmIHRoaXMuZWwuY2xvc2VzdCgnW25vLXJvdXRlcl0nKSA9PT0gbnVsbDtcbiAgICBpZiAodGhpcy5zd2lwZUdlc3R1cmUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgICB0aGlzLnN3aXBlR2VzdHVyZSA9IGNvbmZpZy5nZXRCb29sZWFuKCdzd2lwZUJhY2tFbmFibGVkJywgbW9kZSA9PT0gJ2lvcycpO1xuICAgIH1cbiAgICB0aGlzLmlvbk5hdldpbGxMb2FkLmVtaXQoKTtcbiAgfVxuICBhc3luYyBjb21wb25lbnREaWRMb2FkKCkge1xuICAgIHRoaXMucm9vdENoYW5nZWQoKTtcbiAgICB0aGlzLmdlc3R1cmUgPSAoYXdhaXQgaW1wb3J0KCcuL3N3aXBlLWJhY2stZTFlZjIyNDMuanMnKSkuY3JlYXRlU3dpcGVCYWNrR2VzdHVyZSh0aGlzLmVsLCB0aGlzLmNhblN0YXJ0LmJpbmQodGhpcyksIHRoaXMub25TdGFydC5iaW5kKHRoaXMpLCB0aGlzLm9uTW92ZS5iaW5kKHRoaXMpLCB0aGlzLm9uRW5kLmJpbmQodGhpcykpO1xuICAgIHRoaXMuc3dpcGVHZXN0dXJlQ2hhbmdlZCgpO1xuICB9XG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gIH1cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgZm9yIChjb25zdCB2aWV3IG9mIHRoaXMudmlld3MpIHtcbiAgICAgIGxpZmVjeWNsZSh2aWV3LmVsZW1lbnQsIExJRkVDWUNMRV9XSUxMX1VOTE9BRCk7XG4gICAgICB2aWV3Ll9kZXN0cm95KCk7XG4gICAgfVxuICAgIC8vIFJlbGVhc2Ugc3dpcGUgYmFjayBnZXN0dXJlIGFuZCB0cmFuc2l0aW9uLlxuICAgIGlmICh0aGlzLmdlc3R1cmUpIHtcbiAgICAgIHRoaXMuZ2VzdHVyZS5kZXN0cm95KCk7XG4gICAgICB0aGlzLmdlc3R1cmUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRoaXMudHJhbnNJbnN0ci5sZW5ndGggPSAwO1xuICAgIHRoaXMudmlld3MubGVuZ3RoID0gMDtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIFB1c2ggYSBuZXcgY29tcG9uZW50IG9udG8gdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBzdGFjay4gUGFzcyBhbnkgYWRkaXRpb25hbFxuICAgKiBpbmZvcm1hdGlvbiBhbG9uZyBhcyBhbiBvYmplY3QuIFRoaXMgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBpcyBhY2Nlc3NpYmxlXG4gICAqIHRocm91Z2ggTmF2UGFyYW1zLlxuICAgKlxuICAgKiBAcGFyYW0gY29tcG9uZW50IFRoZSBjb21wb25lbnQgdG8gcHVzaCBvbnRvIHRoZSBuYXZpZ2F0aW9uIHN0YWNrLlxuICAgKiBAcGFyYW0gY29tcG9uZW50UHJvcHMgQW55IHByb3BlcnRpZXMgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogQHBhcmFtIG9wdHMgVGhlIG5hdmlnYXRpb24gb3B0aW9ucy5cbiAgICogQHBhcmFtIGRvbmUgVGhlIHRyYW5zaXRpb24gY29tcGxldGUgZnVuY3Rpb24uXG4gICAqL1xuICBwdXNoKGNvbXBvbmVudCwgY29tcG9uZW50UHJvcHMsIG9wdHMsIGRvbmUpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnQoLTEsIGNvbXBvbmVudCwgY29tcG9uZW50UHJvcHMsIG9wdHMsIGRvbmUpO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnRzIGEgY29tcG9uZW50IGludG8gdGhlIG5hdmlnYXRpb24gc3RhY2sgYXQgdGhlIHNwZWNpZmllZCBpbmRleC5cbiAgICogVGhpcyBpcyB1c2VmdWwgdG8gYWRkIGEgY29tcG9uZW50IGF0IGFueSBwb2ludCBpbiB0aGUgbmF2aWdhdGlvbiBzdGFjay5cbiAgICpcbiAgICogQHBhcmFtIGluc2VydEluZGV4IFRoZSBpbmRleCB0byBpbnNlcnQgdGhlIGNvbXBvbmVudCBhdCBpbiB0aGUgc3RhY2suXG4gICAqIEBwYXJhbSBjb21wb25lbnQgVGhlIGNvbXBvbmVudCB0byBpbnNlcnQgaW50byB0aGUgbmF2aWdhdGlvbiBzdGFjay5cbiAgICogQHBhcmFtIGNvbXBvbmVudFByb3BzIEFueSBwcm9wZXJ0aWVzIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEBwYXJhbSBvcHRzIFRoZSBuYXZpZ2F0aW9uIG9wdGlvbnMuXG4gICAqIEBwYXJhbSBkb25lIFRoZSB0cmFuc2l0aW9uIGNvbXBsZXRlIGZ1bmN0aW9uLlxuICAgKi9cbiAgaW5zZXJ0KGluc2VydEluZGV4LCBjb21wb25lbnQsIGNvbXBvbmVudFByb3BzLCBvcHRzLCBkb25lKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0UGFnZXMoaW5zZXJ0SW5kZXgsIFt7IGNvbXBvbmVudCwgY29tcG9uZW50UHJvcHMgfV0sIG9wdHMsIGRvbmUpO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnRzIGFuIGFycmF5IG9mIGNvbXBvbmVudHMgaW50byB0aGUgbmF2aWdhdGlvbiBzdGFjayBhdCB0aGUgc3BlY2lmaWVkIGluZGV4LlxuICAgKiBUaGUgbGFzdCBjb21wb25lbnQgaW4gdGhlIGFycmF5IHdpbGwgYmVjb21lIGluc3RhbnRpYXRlZCBhcyBhIHZpZXcsIGFuZCBhbmltYXRlXG4gICAqIGluIHRvIGJlY29tZSB0aGUgYWN0aXZlIHZpZXcuXG4gICAqXG4gICAqIEBwYXJhbSBpbnNlcnRJbmRleCBUaGUgaW5kZXggdG8gaW5zZXJ0IHRoZSBjb21wb25lbnRzIGF0IGluIHRoZSBzdGFjay5cbiAgICogQHBhcmFtIGluc2VydENvbXBvbmVudHMgVGhlIGNvbXBvbmVudHMgdG8gaW5zZXJ0IGludG8gdGhlIG5hdmlnYXRpb24gc3RhY2suXG4gICAqIEBwYXJhbSBvcHRzIFRoZSBuYXZpZ2F0aW9uIG9wdGlvbnMuXG4gICAqIEBwYXJhbSBkb25lIFRoZSB0cmFuc2l0aW9uIGNvbXBsZXRlIGZ1bmN0aW9uLlxuICAgKi9cbiAgaW5zZXJ0UGFnZXMoaW5zZXJ0SW5kZXgsIGluc2VydENvbXBvbmVudHMsIG9wdHMsIGRvbmUpIHtcbiAgICByZXR1cm4gdGhpcy5xdWV1ZVRybnMoe1xuICAgICAgaW5zZXJ0U3RhcnQ6IGluc2VydEluZGV4LFxuICAgICAgaW5zZXJ0Vmlld3M6IGluc2VydENvbXBvbmVudHMsXG4gICAgICBvcHRzLFxuICAgIH0sIGRvbmUpO1xuICB9XG4gIC8qKlxuICAgKiBQb3AgYSBjb21wb25lbnQgb2ZmIG9mIHRoZSBuYXZpZ2F0aW9uIHN0YWNrLiBOYXZpZ2F0ZXMgYmFjayBmcm9tIHRoZSBjdXJyZW50XG4gICAqIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIG9wdHMgVGhlIG5hdmlnYXRpb24gb3B0aW9ucy5cbiAgICogQHBhcmFtIGRvbmUgVGhlIHRyYW5zaXRpb24gY29tcGxldGUgZnVuY3Rpb24uXG4gICAqL1xuICBwb3Aob3B0cywgZG9uZSkge1xuICAgIHJldHVybiB0aGlzLnJlbW92ZUluZGV4KC0xLCAxLCBvcHRzLCBkb25lKTtcbiAgfVxuICAvKipcbiAgICogUG9wIHRvIGEgc3BlY2lmaWMgaW5kZXggaW4gdGhlIG5hdmlnYXRpb24gc3RhY2suXG4gICAqXG4gICAqIEBwYXJhbSBpbmRleE9yVmlld0N0cmwgVGhlIGluZGV4IG9yIHZpZXcgY29udHJvbGxlciB0byBwb3AgdG8uXG4gICAqIEBwYXJhbSBvcHRzIFRoZSBuYXZpZ2F0aW9uIG9wdGlvbnMuXG4gICAqIEBwYXJhbSBkb25lIFRoZSB0cmFuc2l0aW9uIGNvbXBsZXRlIGZ1bmN0aW9uLlxuICAgKi9cbiAgcG9wVG8oaW5kZXhPclZpZXdDdHJsLCBvcHRzLCBkb25lKSB7XG4gICAgY29uc3QgdGkgPSB7XG4gICAgICByZW1vdmVTdGFydDogLTEsXG4gICAgICByZW1vdmVDb3VudDogLTEsXG4gICAgICBvcHRzLFxuICAgIH07XG4gICAgaWYgKHR5cGVvZiBpbmRleE9yVmlld0N0cmwgPT09ICdvYmplY3QnICYmIGluZGV4T3JWaWV3Q3RybC5jb21wb25lbnQpIHtcbiAgICAgIHRpLnJlbW92ZVZpZXcgPSBpbmRleE9yVmlld0N0cmw7XG4gICAgICB0aS5yZW1vdmVTdGFydCA9IDE7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBpbmRleE9yVmlld0N0cmwgPT09ICdudW1iZXInKSB7XG4gICAgICB0aS5yZW1vdmVTdGFydCA9IGluZGV4T3JWaWV3Q3RybCArIDE7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnF1ZXVlVHJucyh0aSwgZG9uZSk7XG4gIH1cbiAgLyoqXG4gICAqIE5hdmlnYXRlIGJhY2sgdG8gdGhlIHJvb3Qgb2YgdGhlIHN0YWNrLCBubyBtYXR0ZXIgaG93IGZhciBiYWNrIHRoYXQgaXMuXG4gICAqXG4gICAqIEBwYXJhbSBvcHRzIFRoZSBuYXZpZ2F0aW9uIG9wdGlvbnMuXG4gICAqIEBwYXJhbSBkb25lIFRoZSB0cmFuc2l0aW9uIGNvbXBsZXRlIGZ1bmN0aW9uLlxuICAgKi9cbiAgcG9wVG9Sb290KG9wdHMsIGRvbmUpIHtcbiAgICByZXR1cm4gdGhpcy5yZW1vdmVJbmRleCgxLCAtMSwgb3B0cywgZG9uZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBjb21wb25lbnQgZnJvbSB0aGUgbmF2aWdhdGlvbiBzdGFjayBhdCB0aGUgc3BlY2lmaWVkIGluZGV4LlxuICAgKlxuICAgKiBAcGFyYW0gc3RhcnRJbmRleCBUaGUgbnVtYmVyIHRvIGJlZ2luIHJlbW92YWwgYXQuXG4gICAqIEBwYXJhbSByZW1vdmVDb3VudCBUaGUgbnVtYmVyIG9mIGNvbXBvbmVudHMgdG8gcmVtb3ZlLlxuICAgKiBAcGFyYW0gb3B0cyBUaGUgbmF2aWdhdGlvbiBvcHRpb25zLlxuICAgKiBAcGFyYW0gZG9uZSBUaGUgdHJhbnNpdGlvbiBjb21wbGV0ZSBmdW5jdGlvbi5cbiAgICovXG4gIHJlbW92ZUluZGV4KHN0YXJ0SW5kZXgsIHJlbW92ZUNvdW50ID0gMSwgb3B0cywgZG9uZSkge1xuICAgIHJldHVybiB0aGlzLnF1ZXVlVHJucyh7XG4gICAgICByZW1vdmVTdGFydDogc3RhcnRJbmRleCxcbiAgICAgIHJlbW92ZUNvdW50LFxuICAgICAgb3B0cyxcbiAgICB9LCBkb25lKTtcbiAgfVxuICAvKipcbiAgICogU2V0IHRoZSByb290IGZvciB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIHN0YWNrIHRvIGEgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0gY29tcG9uZW50IFRoZSBjb21wb25lbnQgdG8gc2V0IGFzIHRoZSByb290IG9mIHRoZSBuYXZpZ2F0aW9uIHN0YWNrLlxuICAgKiBAcGFyYW0gY29tcG9uZW50UHJvcHMgQW55IHByb3BlcnRpZXMgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogQHBhcmFtIG9wdHMgVGhlIG5hdmlnYXRpb24gb3B0aW9ucy5cbiAgICogQHBhcmFtIGRvbmUgVGhlIHRyYW5zaXRpb24gY29tcGxldGUgZnVuY3Rpb24uXG4gICAqL1xuICBzZXRSb290KGNvbXBvbmVudCwgY29tcG9uZW50UHJvcHMsIG9wdHMsIGRvbmUpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRQYWdlcyhbeyBjb21wb25lbnQsIGNvbXBvbmVudFByb3BzIH1dLCBvcHRzLCBkb25lKTtcbiAgfVxuICAvKipcbiAgICogU2V0IHRoZSB2aWV3cyBvZiB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIHN0YWNrIGFuZCBuYXZpZ2F0ZSB0byB0aGUgbGFzdCB2aWV3LlxuICAgKiBCeSBkZWZhdWx0IGFuaW1hdGlvbnMgYXJlIGRpc2FibGVkLCBidXQgdGhleSBjYW4gYmUgZW5hYmxlZCBieSBwYXNzaW5nIG9wdGlvbnNcbiAgICogdG8gdGhlIG5hdmlnYXRpb24gY29udHJvbGxlci4gTmF2aWdhdGlvbiBwYXJhbWV0ZXJzIGNhbiBhbHNvIGJlIHBhc3NlZCB0byB0aGVcbiAgICogaW5kaXZpZHVhbCBwYWdlcyBpbiB0aGUgYXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB2aWV3cyBUaGUgbGlzdCBvZiB2aWV3cyB0byBzZXQgYXMgdGhlIG5hdmlnYXRpb24gc3RhY2suXG4gICAqIEBwYXJhbSBvcHRzIFRoZSBuYXZpZ2F0aW9uIG9wdGlvbnMuXG4gICAqIEBwYXJhbSBkb25lIFRoZSB0cmFuc2l0aW9uIGNvbXBsZXRlIGZ1bmN0aW9uLlxuICAgKi9cbiAgc2V0UGFnZXModmlld3MsIG9wdHMsIGRvbmUpIHtcbiAgICBvcHRzICE9PSBudWxsICYmIG9wdHMgIT09IHZvaWQgMCA/IG9wdHMgOiAob3B0cyA9IHt9KTtcbiAgICAvLyBpZiBhbmltYXRpb24gd2Fzbid0IHNldCB0byB0cnVlIHRoZW4gZGVmYXVsdCBpdCB0byBOT1QgYW5pbWF0ZVxuICAgIGlmIChvcHRzLmFuaW1hdGVkICE9PSB0cnVlKSB7XG4gICAgICBvcHRzLmFuaW1hdGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnF1ZXVlVHJucyh7XG4gICAgICBpbnNlcnRTdGFydDogMCxcbiAgICAgIGluc2VydFZpZXdzOiB2aWV3cyxcbiAgICAgIHJlbW92ZVN0YXJ0OiAwLFxuICAgICAgcmVtb3ZlQ291bnQ6IC0xLFxuICAgICAgb3B0cyxcbiAgICB9LCBkb25lKTtcbiAgfVxuICAvKipcbiAgICogQ2FsbGVkIGJ5IHRoZSByb3V0ZXIgdG8gdXBkYXRlIHRoZSB2aWV3LlxuICAgKlxuICAgKiBAcGFyYW0gaWQgVGhlIGNvbXBvbmVudCB0YWcuXG4gICAqIEBwYXJhbSBwYXJhbXMgVGhlIGNvbXBvbmVudCBwYXJhbXMuXG4gICAqIEBwYXJhbSBkaXJlY3Rpb24gQSBkaXJlY3Rpb24gaGludC5cbiAgICogQHBhcmFtIGFuaW1hdGlvbiBhbiBBbmltYXRpb25CdWlsZGVyLlxuICAgKlxuICAgKiBAcmV0dXJuIHRoZSBzdGF0dXMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgc2V0Um91dGVJZChpZCwgcGFyYW1zLCBkaXJlY3Rpb24sIGFuaW1hdGlvbikge1xuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuZ2V0QWN0aXZlU3luYygpO1xuICAgIGlmIChtYXRjaGVzKGFjdGl2ZSwgaWQsIHBhcmFtcykpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICBjaGFuZ2VkOiBmYWxzZSxcbiAgICAgICAgZWxlbWVudDogYWN0aXZlLmVsZW1lbnQsXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IHJlc29sdmU7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyKSA9PiAocmVzb2x2ZSA9IHIpKTtcbiAgICBsZXQgZmluaXNoO1xuICAgIGNvbnN0IGNvbW1vbk9wdHMgPSB7XG4gICAgICB1cGRhdGVVUkw6IGZhbHNlLFxuICAgICAgdmlld0lzUmVhZHk6IChlbnRlcmluZ0VsKSA9PiB7XG4gICAgICAgIGxldCBtYXJrO1xuICAgICAgICBjb25zdCBwID0gbmV3IFByb21pc2UoKHIpID0+IChtYXJrID0gcikpO1xuICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICBjaGFuZ2VkOiB0cnVlLFxuICAgICAgICAgIGVsZW1lbnQ6IGVudGVyaW5nRWwsXG4gICAgICAgICAgbWFya1Zpc2libGU6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIG1hcmsoKTtcbiAgICAgICAgICAgIGF3YWl0IGZpbmlzaDtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHA7XG4gICAgICB9LFxuICAgIH07XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3Jvb3QnKSB7XG4gICAgICBmaW5pc2ggPSB0aGlzLnNldFJvb3QoaWQsIHBhcmFtcywgY29tbW9uT3B0cyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gTG9vayBmb3IgYSB2aWV3IG1hdGNoaW5nIHRoZSB0YXJnZXQgaW4gdGhlIHZpZXcgc3RhY2suXG4gICAgICBjb25zdCB2aWV3Q29udHJvbGxlciA9IHRoaXMudmlld3MuZmluZCgodikgPT4gbWF0Y2hlcyh2LCBpZCwgcGFyYW1zKSk7XG4gICAgICBpZiAodmlld0NvbnRyb2xsZXIpIHtcbiAgICAgICAgZmluaXNoID0gdGhpcy5wb3BUbyh2aWV3Q29udHJvbGxlciwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjb21tb25PcHRzKSwgeyBkaXJlY3Rpb246ICdiYWNrJywgYW5pbWF0aW9uQnVpbGRlcjogYW5pbWF0aW9uIH0pKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgICAgIGZpbmlzaCA9IHRoaXMucHVzaChpZCwgcGFyYW1zLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vbk9wdHMpLCB7IGFuaW1hdGlvbkJ1aWxkZXI6IGFuaW1hdGlvbiB9KSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdiYWNrJykge1xuICAgICAgICBmaW5pc2ggPSB0aGlzLnNldFJvb3QoaWQsIHBhcmFtcywgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjb21tb25PcHRzKSwgeyBkaXJlY3Rpb246ICdiYWNrJywgYW5pbWF0ZWQ6IHRydWUsIGFuaW1hdGlvbkJ1aWxkZXI6IGFuaW1hdGlvbiB9KSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsZWQgYnkgPGlvbi1yb3V0ZXI+IHRvIHJldHJpZXZlIHRoZSBjdXJyZW50IGNvbXBvbmVudC5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBhc3luYyBnZXRSb3V0ZUlkKCkge1xuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuZ2V0QWN0aXZlU3luYygpO1xuICAgIGlmIChhY3RpdmUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBhY3RpdmUuZWxlbWVudC50YWdOYW1lLFxuICAgICAgICBwYXJhbXM6IGFjdGl2ZS5wYXJhbXMsXG4gICAgICAgIGVsZW1lbnQ6IGFjdGl2ZS5lbGVtZW50LFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBhY3RpdmUgdmlldy5cbiAgICovXG4gIGFzeW5jIGdldEFjdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBY3RpdmVTeW5jKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgdmlldyBhdCB0aGUgc3BlY2lmaWVkIGluZGV4LlxuICAgKlxuICAgKiBAcGFyYW0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSB2aWV3LlxuICAgKi9cbiAgYXN5bmMgZ2V0QnlJbmRleChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLnZpZXdzW2luZGV4XTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGN1cnJlbnQgdmlldyBjYW4gZ28gYmFjay5cbiAgICpcbiAgICogQHBhcmFtIHZpZXcgVGhlIHZpZXcgdG8gY2hlY2suXG4gICAqL1xuICBhc3luYyBjYW5Hb0JhY2sodmlldykge1xuICAgIHJldHVybiB0aGlzLmNhbkdvQmFja1N5bmModmlldyk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgcHJldmlvdXMgdmlldy5cbiAgICpcbiAgICogQHBhcmFtIHZpZXcgVGhlIHZpZXcgdG8gZ2V0LlxuICAgKi9cbiAgYXN5bmMgZ2V0UHJldmlvdXModmlldykge1xuICAgIHJldHVybiB0aGlzLmdldFByZXZpb3VzU3luYyh2aWV3KTtcbiAgfVxuICBnZXRMZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMudmlld3MubGVuZ3RoO1xuICB9XG4gIGdldEFjdGl2ZVN5bmMoKSB7XG4gICAgcmV0dXJuIHRoaXMudmlld3NbdGhpcy52aWV3cy5sZW5ndGggLSAxXTtcbiAgfVxuICBjYW5Hb0JhY2tTeW5jKHZpZXcgPSB0aGlzLmdldEFjdGl2ZVN5bmMoKSkge1xuICAgIHJldHVybiAhISh2aWV3ICYmIHRoaXMuZ2V0UHJldmlvdXNTeW5jKHZpZXcpKTtcbiAgfVxuICBnZXRQcmV2aW91c1N5bmModmlldyA9IHRoaXMuZ2V0QWN0aXZlU3luYygpKSB7XG4gICAgaWYgKCF2aWV3KSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCB2aWV3cyA9IHRoaXMudmlld3M7XG4gICAgY29uc3QgaW5kZXggPSB2aWV3cy5pbmRleE9mKHZpZXcpO1xuICAgIHJldHVybiBpbmRleCA+IDAgPyB2aWV3c1tpbmRleCAtIDFdIDogdW5kZWZpbmVkO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgbmF2aWdhdGlvbiBzdGFjayBjaGFuZ2UgdG8gdGhlIHF1ZXVlIGFuZCBzY2hlZHVsZXMgaXQgdG8gcnVuLlxuICAgKlxuICAgKiBAcmV0dXJucyBXaGV0aGVyIHRoZSB0cmFuc2l0aW9uIHN1Y2NlZWRzLlxuICAgKi9cbiAgYXN5bmMgcXVldWVUcm5zKHRpLCBkb25lKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBpZiAodGhpcy5pc1RyYW5zaXRpb25pbmcgJiYgKChfYSA9IHRpLm9wdHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5za2lwSWZCdXN5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGkucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB0aS5yZWplY3QgPSByZWplY3Q7XG4gICAgfSk7XG4gICAgdGkuZG9uZSA9IGRvbmU7XG4gICAgLyoqXG4gICAgICogSWYgdXNpbmcgcm91dGVyLCBjaGVjayB0byBzZWUgaWYgbmF2aWdhdGlvbiBob29rc1xuICAgICAqIHdpbGwgYWxsb3cgdXMgdG8gcGVyZm9ybSB0aGlzIHRyYW5zaXRpb24uIFRoaXNcbiAgICAgKiBpcyByZXF1aXJlZCBpbiBvcmRlciBmb3IgaG9va3MgdG8gd29yayB3aXRoXG4gICAgICogdGhlIGlvbi1iYWNrLWJ1dHRvbiBvciBzd2lwZSB0byBnbyBiYWNrLlxuICAgICAqL1xuICAgIGlmICh0aS5vcHRzICYmIHRpLm9wdHMudXBkYXRlVVJMICE9PSBmYWxzZSAmJiB0aGlzLnVzZVJvdXRlcikge1xuICAgICAgY29uc3Qgcm91dGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW9uLXJvdXRlcicpO1xuICAgICAgaWYgKHJvdXRlcikge1xuICAgICAgICBjb25zdCBjYW5UcmFuc2l0aW9uID0gYXdhaXQgcm91dGVyLmNhblRyYW5zaXRpb24oKTtcbiAgICAgICAgaWYgKGNhblRyYW5zaXRpb24gPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY2FuVHJhbnNpdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByb3V0ZXIucHVzaChjYW5UcmFuc2l0aW9uLCB0aS5vcHRzLmRpcmVjdGlvbiB8fCAnYmFjaycpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBOb3JtYWxpemUgZW1wdHlcbiAgICBpZiAoKChfYiA9IHRpLmluc2VydFZpZXdzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubGVuZ3RoKSA9PT0gMCkge1xuICAgICAgdGkuaW5zZXJ0Vmlld3MgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIEVucXVldWUgdHJhbnNpdGlvbiBpbnN0cnVjdGlvblxuICAgIHRoaXMudHJhbnNJbnN0ci5wdXNoKHRpKTtcbiAgICAvLyBpZiB0aGVyZSBpc24ndCBhIHRyYW5zaXRpb24gYWxyZWFkeSBoYXBwZW5pbmdcbiAgICAvLyB0aGVuIHRoaXMgd2lsbCBraWNrIG9mZiB0aGlzIHRyYW5zaXRpb25cbiAgICB0aGlzLm5leHRUcm5zKCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbiAgc3VjY2VzcyhyZXN1bHQsIHRpKSB7XG4gICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICB0aGlzLmZpcmVFcnJvcignbmF2IGNvbnRyb2xsZXIgd2FzIGRlc3Ryb3llZCcsIHRpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRpLmRvbmUpIHtcbiAgICAgIHRpLmRvbmUocmVzdWx0Lmhhc0NvbXBsZXRlZCwgcmVzdWx0LnJlcXVpcmVzVHJhbnNpdGlvbiwgcmVzdWx0LmVudGVyaW5nVmlldywgcmVzdWx0LmxlYXZpbmdWaWV3LCByZXN1bHQuZGlyZWN0aW9uKTtcbiAgICB9XG4gICAgdGkucmVzb2x2ZShyZXN1bHQuaGFzQ29tcGxldGVkKTtcbiAgICBpZiAodGkub3B0cy51cGRhdGVVUkwgIT09IGZhbHNlICYmIHRoaXMudXNlUm91dGVyKSB7XG4gICAgICBjb25zdCByb3V0ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpb24tcm91dGVyJyk7XG4gICAgICBpZiAocm91dGVyKSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IHJlc3VsdC5kaXJlY3Rpb24gPT09ICdiYWNrJyA/ICdiYWNrJyA6ICdmb3J3YXJkJztcbiAgICAgICAgcm91dGVyLm5hdkNoYW5nZWQoZGlyZWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZmFpbGVkKHJlamVjdFJlYXNvbiwgdGkpIHtcbiAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgIHRoaXMuZmlyZUVycm9yKCduYXYgY29udHJvbGxlciB3YXMgZGVzdHJveWVkJywgdGkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnRyYW5zSW5zdHIubGVuZ3RoID0gMDtcbiAgICB0aGlzLmZpcmVFcnJvcihyZWplY3RSZWFzb24sIHRpKTtcbiAgfVxuICBmaXJlRXJyb3IocmVqZWN0UmVhc29uLCB0aSkge1xuICAgIGlmICh0aS5kb25lKSB7XG4gICAgICB0aS5kb25lKGZhbHNlLCBmYWxzZSwgcmVqZWN0UmVhc29uKTtcbiAgICB9XG4gICAgaWYgKHRpLnJlamVjdCAmJiAhdGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgIHRpLnJlamVjdChyZWplY3RSZWFzb24pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRpLnJlc29sdmUoZmFsc2UpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29uc3VtZXMgdGhlIG5leHQgdHJhbnNpdGlvbiBpbiB0aGUgcXVldWUuXG4gICAqXG4gICAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIHRyYW5zaXRpb24gaXMgZXhlY3V0ZWQuXG4gICAqL1xuICBuZXh0VHJucygpIHtcbiAgICAvLyB0aGlzIGlzIHRoZSBmcmFtZXdvcmsncyBicmVhZCAnbiBidXR0YSBmdW5jdGlvblxuICAgIC8vIG9ubHkgb25lIHRyYW5zaXRpb24gaXMgYWxsb3dlZCBhdCBhbnkgZ2l2ZW4gdGltZVxuICAgIGlmICh0aGlzLmlzVHJhbnNpdGlvbmluZykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyB0aGVyZSBpcyBubyB0cmFuc2l0aW9uIGhhcHBlbmluZyByaWdodCBub3csIGV4ZWN1dGVzIHRoZSBuZXh0IGluc3RydWN0aW9ucy5cbiAgICBjb25zdCB0aSA9IHRoaXMudHJhbnNJbnN0ci5zaGlmdCgpO1xuICAgIGlmICghdGkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5ydW5UcmFuc2l0aW9uKHRpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKiogRXhlY3V0ZXMgYWxsIHRoZSB0cmFuc2l0aW9uIGluc3RydWN0aW9uIGZyb20gdGhlIHF1ZXVlLiAqL1xuICBhc3luYyBydW5UcmFuc2l0aW9uKHRpKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIHNldCB0aGF0IHRoaXMgbmF2IGlzIGFjdGl2ZWx5IHRyYW5zaXRpb25pbmdcbiAgICAgIHRoaXMuaW9uTmF2V2lsbENoYW5nZS5lbWl0KCk7XG4gICAgICB0aGlzLmlzVHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgICB0aGlzLnByZXBhcmVUSSh0aSk7XG4gICAgICBjb25zdCBsZWF2aW5nVmlldyA9IHRoaXMuZ2V0QWN0aXZlU3luYygpO1xuICAgICAgY29uc3QgZW50ZXJpbmdWaWV3ID0gdGhpcy5nZXRFbnRlcmluZ1ZpZXcodGksIGxlYXZpbmdWaWV3KTtcbiAgICAgIGlmICghbGVhdmluZ1ZpZXcgJiYgIWVudGVyaW5nVmlldykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIHZpZXdzIGluIHRoZSBzdGFjayB0byBiZSByZW1vdmVkJyk7XG4gICAgICB9XG4gICAgICBpZiAoZW50ZXJpbmdWaWV3ICYmIGVudGVyaW5nVmlldy5zdGF0ZSA9PT0gVklFV19TVEFURV9ORVcpIHtcbiAgICAgICAgYXdhaXQgZW50ZXJpbmdWaWV3LmluaXQodGhpcy5lbCk7XG4gICAgICB9XG4gICAgICB0aGlzLnBvc3RWaWV3SW5pdChlbnRlcmluZ1ZpZXcsIGxlYXZpbmdWaWV3LCB0aSk7XG4gICAgICAvLyBOZWVkcyB0cmFuc2l0aW9uP1xuICAgICAgY29uc3QgcmVxdWlyZXNUcmFuc2l0aW9uID0gKHRpLmVudGVyaW5nUmVxdWlyZXNUcmFuc2l0aW9uIHx8IHRpLmxlYXZpbmdSZXF1aXJlc1RyYW5zaXRpb24pICYmIGVudGVyaW5nVmlldyAhPT0gbGVhdmluZ1ZpZXc7XG4gICAgICBpZiAocmVxdWlyZXNUcmFuc2l0aW9uICYmIHRpLm9wdHMgJiYgbGVhdmluZ1ZpZXcpIHtcbiAgICAgICAgY29uc3QgaXNCYWNrRGlyZWN0aW9uID0gdGkub3B0cy5kaXJlY3Rpb24gPT09ICdiYWNrJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGhlYWRpbmcgYmFjaywgdXNlIHRoZSBlbnRlcmluZyBwYWdlJ3MgYW5pbWF0aW9uXG4gICAgICAgICAqIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkIGJ5IHRoZSBkZXZlbG9wZXIuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoaXNCYWNrRGlyZWN0aW9uKSB7XG4gICAgICAgICAgdGkub3B0cy5hbmltYXRpb25CdWlsZGVyID0gdGkub3B0cy5hbmltYXRpb25CdWlsZGVyIHx8IChlbnRlcmluZ1ZpZXcgPT09IG51bGwgfHwgZW50ZXJpbmdWaWV3ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlbnRlcmluZ1ZpZXcuYW5pbWF0aW9uQnVpbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgbGVhdmluZ1ZpZXcuYW5pbWF0aW9uQnVpbGRlciA9IHRpLm9wdHMuYW5pbWF0aW9uQnVpbGRlcjtcbiAgICAgIH1cbiAgICAgIGxldCByZXN1bHQ7XG4gICAgICBpZiAocmVxdWlyZXNUcmFuc2l0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IHRoaXMudHJhbnNpdGlvbihlbnRlcmluZ1ZpZXcsIGxlYXZpbmdWaWV3LCB0aSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gdHJhbnNpdGlvbiBpcyBub3QgcmVxdWlyZWQsIHNvIHdlIGFyZSBhbHJlYWR5IGRvbmUhXG4gICAgICAgIC8vIHRoZXkncmUgaW5zZXJ0aW5nL3JlbW92aW5nIHRoZSB2aWV3cyBzb21ld2hlcmUgaW4gdGhlIG1pZGRsZSBvclxuICAgICAgICAvLyBiZWdpbm5pbmcsIHNvIHZpc3VhbGx5IG5vdGhpbmcgbmVlZHMgdG8gYW5pbWF0ZS90cmFuc2l0aW9uXG4gICAgICAgIC8vIHJlc29sdmUgaW1tZWRpYXRlbHkgYmVjYXVzZSB0aGVyZSdzIG5vIGFuaW1hdGlvbiB0aGF0J3MgaGFwcGVuaW5nXG4gICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICBoYXNDb21wbGV0ZWQ6IHRydWUsXG4gICAgICAgICAgcmVxdWlyZXNUcmFuc2l0aW9uOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3VjY2VzcyhyZXN1bHQsIHRpKTtcbiAgICAgIHRoaXMuaW9uTmF2RGlkQ2hhbmdlLmVtaXQoKTtcbiAgICB9XG4gICAgY2F0Y2ggKHJlamVjdFJlYXNvbikge1xuICAgICAgdGhpcy5mYWlsZWQocmVqZWN0UmVhc29uLCB0aSk7XG4gICAgfVxuICAgIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgdGhpcy5uZXh0VHJucygpO1xuICB9XG4gIHByZXBhcmVUSSh0aSkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgdmFyIF9jO1xuICAgIGNvbnN0IHZpZXdzTGVuZ3RoID0gdGhpcy52aWV3cy5sZW5ndGg7XG4gICAgKF9hID0gdGkub3B0cykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKHRpLm9wdHMgPSB7fSk7XG4gICAgKF9iID0gKF9jID0gdGkub3B0cykuZGVsZWdhdGUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IChfYy5kZWxlZ2F0ZSA9IHRoaXMuZGVsZWdhdGUpO1xuICAgIGlmICh0aS5yZW1vdmVWaWV3ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGFzc2VydCh0aS5yZW1vdmVTdGFydCAhPT0gdW5kZWZpbmVkLCAncmVtb3ZlVmlldyBuZWVkcyByZW1vdmVTdGFydCcpO1xuICAgICAgYXNzZXJ0KHRpLnJlbW92ZUNvdW50ICE9PSB1bmRlZmluZWQsICdyZW1vdmVWaWV3IG5lZWRzIHJlbW92ZUNvdW50Jyk7XG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMudmlld3MuaW5kZXhPZih0aS5yZW1vdmVWaWV3KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZW1vdmVWaWV3IHdhcyBub3QgZm91bmQnKTtcbiAgICAgIH1cbiAgICAgIHRpLnJlbW92ZVN0YXJ0ICs9IGluZGV4O1xuICAgIH1cbiAgICBpZiAodGkucmVtb3ZlU3RhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHRpLnJlbW92ZVN0YXJ0IDwgMCkge1xuICAgICAgICB0aS5yZW1vdmVTdGFydCA9IHZpZXdzTGVuZ3RoIC0gMTtcbiAgICAgIH1cbiAgICAgIGlmICh0aS5yZW1vdmVDb3VudCA8IDApIHtcbiAgICAgICAgdGkucmVtb3ZlQ291bnQgPSB2aWV3c0xlbmd0aCAtIHRpLnJlbW92ZVN0YXJ0O1xuICAgICAgfVxuICAgICAgdGkubGVhdmluZ1JlcXVpcmVzVHJhbnNpdGlvbiA9IHRpLnJlbW92ZUNvdW50ID4gMCAmJiB0aS5yZW1vdmVTdGFydCArIHRpLnJlbW92ZUNvdW50ID09PSB2aWV3c0xlbmd0aDtcbiAgICB9XG4gICAgaWYgKHRpLmluc2VydFZpZXdzKSB7XG4gICAgICAvLyBhbGxvdyAtMSB0byBiZSBwYXNzZWQgaW4gdG8gYXV0byBwdXNoIGl0IG9uIHRoZSBlbmRcbiAgICAgIC8vIGFuZCBjbGVhbiB1cCB0aGUgaW5kZXggaWYgaXQncyBsYXJnZXIgdGhlbiB0aGUgc2l6ZSBvZiB0aGUgc3RhY2tcbiAgICAgIGlmICh0aS5pbnNlcnRTdGFydCA8IDAgfHwgdGkuaW5zZXJ0U3RhcnQgPiB2aWV3c0xlbmd0aCkge1xuICAgICAgICB0aS5pbnNlcnRTdGFydCA9IHZpZXdzTGVuZ3RoO1xuICAgICAgfVxuICAgICAgdGkuZW50ZXJpbmdSZXF1aXJlc1RyYW5zaXRpb24gPSB0aS5pbnNlcnRTdGFydCA9PT0gdmlld3NMZW5ndGg7XG4gICAgfVxuICAgIGNvbnN0IGluc2VydFZpZXdzID0gdGkuaW5zZXJ0Vmlld3M7XG4gICAgaWYgKCFpbnNlcnRWaWV3cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhc3NlcnQoaW5zZXJ0Vmlld3MubGVuZ3RoID4gMCwgJ2xlbmd0aCBjYW4gbm90IGJlIHplcm8nKTtcbiAgICBjb25zdCB2aWV3Q29udHJvbGxlcnMgPSBjb252ZXJ0VG9WaWV3cyhpbnNlcnRWaWV3cyk7XG4gICAgaWYgKHZpZXdDb250cm9sbGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB2aWV3cyB0byBpbnNlcnQnKTtcbiAgICB9XG4gICAgLy8gQ2hlY2sgYWxsIHRoZSBpbnNlcnRlZCB2aWV3IGFyZSBjb3JyZWN0XG4gICAgZm9yIChjb25zdCB2aWV3IG9mIHZpZXdDb250cm9sbGVycykge1xuICAgICAgdmlldy5kZWxlZ2F0ZSA9IHRpLm9wdHMuZGVsZWdhdGU7XG4gICAgICBjb25zdCBuYXYgPSB2aWV3Lm5hdjtcbiAgICAgIGlmIChuYXYgJiYgbmF2ICE9PSB0aGlzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW5zZXJ0ZWQgdmlldyB3YXMgYWxyZWFkeSBpbnNlcnRlZCcpO1xuICAgICAgfVxuICAgICAgaWYgKHZpZXcuc3RhdGUgPT09IFZJRVdfU1RBVEVfREVTVFJPWUVEKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW5zZXJ0ZWQgdmlldyB3YXMgYWxyZWFkeSBkZXN0cm95ZWQnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGkuaW5zZXJ0Vmlld3MgPSB2aWV3Q29udHJvbGxlcnM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHZpZXcgdGhhdCB3aWxsIGJlIGVudGVyZWQgY29uc2lkZXJpbmcgdGhlIHRyYW5zaXRpb24gaW5zdHJ1Y3Rpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gdGkgVGhlIGluc3RydWN0aW9ucy5cbiAgICogQHBhcmFtIGxlYXZpbmdWaWV3IFRoZSB2aWV3IGJlaW5nIGxlZnQgb3IgdW5kZWZpbmVkIGlmIG5vbmUuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSB2aWV3IHRoYXQgd2lsbCBiZSBlbnRlcmVkLCB1bmRlZmluZWQgaWYgbm9uZS5cbiAgICovXG4gIGdldEVudGVyaW5nVmlldyh0aSwgbGVhdmluZ1ZpZXcpIHtcbiAgICAvLyBUaGUgbGFzdCBpbnNlcnRlZCB2aWV3IHdpbGwgYmUgZW50ZXJlZCB3aGVuIHZpZXcgYXJlIGluc2VydGVkLlxuICAgIGNvbnN0IGluc2VydFZpZXdzID0gdGkuaW5zZXJ0Vmlld3M7XG4gICAgaWYgKGluc2VydFZpZXdzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBpbnNlcnRWaWV3c1tpbnNlcnRWaWV3cy5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgLy8gV2hlbiB2aWV3cyBhcmUgZGVsZXRlZCwgd2Ugd2lsbCBlbnRlciB0aGUgbGFzdCB2aWV3IHRoYXQgaXMgbm90IHJlbW92ZWQgYW5kIG5vdCB0aGUgdmlldyBiZWluZyBsZWZ0LlxuICAgIGNvbnN0IHJlbW92ZVN0YXJ0ID0gdGkucmVtb3ZlU3RhcnQ7XG4gICAgaWYgKHJlbW92ZVN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHZpZXdzID0gdGhpcy52aWV3cztcbiAgICAgIGNvbnN0IHJlbW92ZUVuZCA9IHJlbW92ZVN0YXJ0ICsgdGkucmVtb3ZlQ291bnQ7XG4gICAgICBmb3IgKGxldCBpID0gdmlld3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgdmlldyA9IHZpZXdzW2ldO1xuICAgICAgICBpZiAoKGkgPCByZW1vdmVTdGFydCB8fCBpID49IHJlbW92ZUVuZCkgJiYgdmlldyAhPT0gbGVhdmluZ1ZpZXcpIHtcbiAgICAgICAgICByZXR1cm4gdmlldztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGFuZCBSZW1vdmVzIHRoZSB2aWV3cyBmcm9tIHRoZSBuYXZpZ2F0aW9uIHN0YWNrLlxuICAgKlxuICAgKiBAcGFyYW0gZW50ZXJpbmdWaWV3IFRoZSB2aWV3IGJlaW5nIGVudGVyZWQuXG4gICAqIEBwYXJhbSBsZWF2aW5nVmlldyBUaGUgdmlldyBiZWluZyBsZWZ0LlxuICAgKiBAcGFyYW0gdGkgVGhlIGluc3RydWN0aW9ucy5cbiAgICovXG4gIHBvc3RWaWV3SW5pdChlbnRlcmluZ1ZpZXcsIGxlYXZpbmdWaWV3LCB0aSkge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIGFzc2VydChsZWF2aW5nVmlldyB8fCBlbnRlcmluZ1ZpZXcsICdCb3RoIGxlYXZpbmdWaWV3IGFuZCBlbnRlcmluZ1ZpZXcgYXJlIG51bGwnKTtcbiAgICBhc3NlcnQodGkucmVzb2x2ZSwgJ3Jlc29sdmUgbXVzdCBiZSB2YWxpZCcpO1xuICAgIGFzc2VydCh0aS5yZWplY3QsICdyZWplY3QgbXVzdCBiZSB2YWxpZCcpO1xuICAgIC8vIENvbXB1dGUgdGhlIHZpZXdzIHRvIHJlbW92ZS5cbiAgICBjb25zdCBvcHRzID0gdGkub3B0cztcbiAgICBjb25zdCB7IGluc2VydFZpZXdzLCByZW1vdmVTdGFydCwgcmVtb3ZlQ291bnQgfSA9IHRpO1xuICAgIC8qKiBSZWNvcmRzIHRoZSB2aWV3IHRvIGRlc3Ryb3kgKi9cbiAgICBsZXQgZGVzdHJveVF1ZXVlO1xuICAgIC8vIHRoZXJlIGFyZSB2aWV3cyB0byByZW1vdmVcbiAgICBpZiAocmVtb3ZlU3RhcnQgIT09IHVuZGVmaW5lZCAmJiByZW1vdmVDb3VudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBhc3NlcnQocmVtb3ZlU3RhcnQgPj0gMCwgJ3JlbW92ZVN0YXJ0IGNhbiBub3QgYmUgbmVnYXRpdmUnKTtcbiAgICAgIGFzc2VydChyZW1vdmVDb3VudCA+PSAwLCAncmVtb3ZlQ291bnQgY2FuIG5vdCBiZSBuZWdhdGl2ZScpO1xuICAgICAgZGVzdHJveVF1ZXVlID0gW107XG4gICAgICBmb3IgKGxldCBpID0gcmVtb3ZlU3RhcnQ7IGkgPCByZW1vdmVTdGFydCArIHJlbW92ZUNvdW50OyBpKyspIHtcbiAgICAgICAgY29uc3QgdmlldyA9IHRoaXMudmlld3NbaV07XG4gICAgICAgIGlmICh2aWV3ICE9PSB1bmRlZmluZWQgJiYgdmlldyAhPT0gZW50ZXJpbmdWaWV3ICYmIHZpZXcgIT09IGxlYXZpbmdWaWV3KSB7XG4gICAgICAgICAgZGVzdHJveVF1ZXVlLnB1c2godmlldyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGRlZmF1bHQgdGhlIGRpcmVjdGlvbiB0byBcImJhY2tcIlxuICAgICAgKF9hID0gb3B0cy5kaXJlY3Rpb24pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChvcHRzLmRpcmVjdGlvbiA9ICdiYWNrJyk7XG4gICAgfVxuICAgIGNvbnN0IGZpbmFsTnVtVmlld3MgPSB0aGlzLnZpZXdzLmxlbmd0aCArICgoX2IgPSBpbnNlcnRWaWV3cyA9PT0gbnVsbCB8fCBpbnNlcnRWaWV3cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5zZXJ0Vmlld3MubGVuZ3RoKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwKSAtIChyZW1vdmVDb3VudCAhPT0gbnVsbCAmJiByZW1vdmVDb3VudCAhPT0gdm9pZCAwID8gcmVtb3ZlQ291bnQgOiAwKTtcbiAgICBhc3NlcnQoZmluYWxOdW1WaWV3cyA+PSAwLCAnZmluYWwgYmFsYW5jZSBjYW4gbm90IGJlIG5lZ2F0aXZlJyk7XG4gICAgaWYgKGZpbmFsTnVtVmlld3MgPT09IDApIHtcbiAgICAgIGNvbnNvbGUud2FybihgWW91IGNhbid0IHJlbW92ZSBhbGwgdGhlIHBhZ2VzIGluIHRoZSBuYXZpZ2F0aW9uIHN0YWNrLiBuYXYucG9wKCkgaXMgcHJvYmFibHkgY2FsbGVkIHRvbyBtYW55IHRpbWVzLmAsIHRoaXMsIHRoaXMuZWwpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCduYXZpZ2F0aW9uIHN0YWNrIG5lZWRzIGF0IGxlYXN0IG9uZSByb290IHBhZ2UnKTtcbiAgICB9XG4gICAgLy8gQXQgdGhpcyBwb2ludCB0aGUgdHJhbnNpdGlvbiBjYW4gbm90IGJlIHJlamVjdGVkLCBhbnkgdGhyb3cgc2hvdWxkIGJlIGFuIGVycm9yXG4gICAgLy8gSW5zZXJ0IHRoZSBuZXcgdmlld3MgaW4gdGhlIHN0YWNrLlxuICAgIGlmIChpbnNlcnRWaWV3cykge1xuICAgICAgLy8gYWRkIHRoZSB2aWV3cyB0byB0aGVcbiAgICAgIGxldCBpbnNlcnRJbmRleCA9IHRpLmluc2VydFN0YXJ0O1xuICAgICAgZm9yIChjb25zdCB2aWV3IG9mIGluc2VydFZpZXdzKSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0Vmlld0F0KHZpZXcsIGluc2VydEluZGV4KTtcbiAgICAgICAgaW5zZXJ0SW5kZXgrKztcbiAgICAgIH1cbiAgICAgIGlmICh0aS5lbnRlcmluZ1JlcXVpcmVzVHJhbnNpdGlvbikge1xuICAgICAgICAvLyBkZWZhdWx0IHRvIGZvcndhcmQgaWYgbm90IGFscmVhZHkgc2V0XG4gICAgICAgIChfYyA9IG9wdHMuZGlyZWN0aW9uKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAob3B0cy5kaXJlY3Rpb24gPSAnZm9yd2FyZCcpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBpZiB0aGUgdmlld3MgdG8gYmUgcmVtb3ZlZCBhcmUgaW4gdGhlIGJlZ2lubmluZyBvciBtaWRkbGVcbiAgICAvLyBhbmQgdGhlcmUgaXMgbm90IGEgdmlldyB0aGF0IG5lZWRzIHRvIHZpc3VhbGx5IHRyYW5zaXRpb24gb3V0XG4gICAgLy8gdGhlbiBqdXN0IGRlc3Ryb3kgdGhlbSBhbmQgZG9uJ3QgdHJhbnNpdGlvbiBhbnl0aGluZ1xuICAgIC8vIGJhdGNoIGFsbCBvZiBsaWZlY3ljbGVzIHRvZ2V0aGVyXG4gICAgLy8gbGV0J3MgbWFrZSBzdXJlLCBjYWxsYmFja3MgYXJlIHpvbmVkXG4gICAgaWYgKGRlc3Ryb3lRdWV1ZSAmJiBkZXN0cm95UXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChjb25zdCB2aWV3IG9mIGRlc3Ryb3lRdWV1ZSkge1xuICAgICAgICBsaWZlY3ljbGUodmlldy5lbGVtZW50LCBMSUZFQ1lDTEVfV0lMTF9MRUFWRSk7XG4gICAgICAgIGxpZmVjeWNsZSh2aWV3LmVsZW1lbnQsIExJRkVDWUNMRV9ESURfTEVBVkUpO1xuICAgICAgICBsaWZlY3ljbGUodmlldy5lbGVtZW50LCBMSUZFQ1lDTEVfV0lMTF9VTkxPQUQpO1xuICAgICAgfVxuICAgICAgLy8gb25jZSBhbGwgbGlmZWN5Y2xlIGV2ZW50cyBoYXMgYmVlbiBkZWxpdmVyZWQsIHdlIGNhbiBzYWZlbHkgZGV0cm95IHRoZSB2aWV3c1xuICAgICAgZm9yIChjb25zdCB2aWV3IG9mIGRlc3Ryb3lRdWV1ZSkge1xuICAgICAgICB0aGlzLmRlc3Ryb3lWaWV3KHZpZXcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBhc3luYyB0cmFuc2l0aW9uKGVudGVyaW5nVmlldywgbGVhdmluZ1ZpZXcsIHRpKSB7XG4gICAgLy8gd2Ugc2hvdWxkIGFuaW1hdGUgKGR1cmF0aW9uID4gMCkgaWYgdGhlIHB1c2hlZCBwYWdlIGlzIG5vdCB0aGUgZmlyc3Qgb25lIChzdGFydHVwKVxuICAgIC8vIG9yIGlmIGl0IGlzIGEgcG9ydGFsIChtb2RhbCwgYWN0aW9uc2hlZXQsIGV0Yy4pXG4gICAgY29uc3Qgb3B0cyA9IHRpLm9wdHM7XG4gICAgY29uc3QgcHJvZ3Jlc3NDYWxsYmFjayA9IG9wdHMucHJvZ3Jlc3NBbmltYXRpb24gPyAoYW5pKSA9PiAodGhpcy5zYkFuaSA9IGFuaSkgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgY29uc3QgZW50ZXJpbmdFbCA9IGVudGVyaW5nVmlldy5lbGVtZW50O1xuICAgIGNvbnN0IGxlYXZpbmdFbCA9IGxlYXZpbmdWaWV3ICYmIGxlYXZpbmdWaWV3LmVsZW1lbnQ7XG4gICAgY29uc3QgYW5pbWF0aW9uT3B0cyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1vZGUsIHNob3dHb0JhY2s6IHRoaXMuY2FuR29CYWNrU3luYyhlbnRlcmluZ1ZpZXcpLCBiYXNlRWw6IHRoaXMuZWwsIHByb2dyZXNzQ2FsbGJhY2ssIGFuaW1hdGVkOiB0aGlzLmFuaW1hdGVkICYmIGNvbmZpZy5nZXRCb29sZWFuKCdhbmltYXRlZCcsIHRydWUpLCBlbnRlcmluZ0VsLFxuICAgICAgbGVhdmluZ0VsIH0sIG9wdHMpLCB7IGFuaW1hdGlvbkJ1aWxkZXI6IG9wdHMuYW5pbWF0aW9uQnVpbGRlciB8fCB0aGlzLmFuaW1hdGlvbiB8fCBjb25maWcuZ2V0KCduYXZBbmltYXRpb24nKSB9KTtcbiAgICBjb25zdCB7IGhhc0NvbXBsZXRlZCB9ID0gYXdhaXQgdHJhbnNpdGlvbihhbmltYXRpb25PcHRzKTtcbiAgICByZXR1cm4gdGhpcy50cmFuc2l0aW9uRmluaXNoKGhhc0NvbXBsZXRlZCwgZW50ZXJpbmdWaWV3LCBsZWF2aW5nVmlldywgb3B0cyk7XG4gIH1cbiAgdHJhbnNpdGlvbkZpbmlzaChoYXNDb21wbGV0ZWQsIGVudGVyaW5nVmlldywgbGVhdmluZ1ZpZXcsIG9wdHMpIHtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdHJhbnNpdGlvbiBkaWQgbm90IGNvbXBsZXRlLCB0aGUgbGVhdmluZ1ZpZXcgd2lsbCBzdGlsbCBiZSB0aGUgYWN0aXZlXG4gICAgICogdmlldyBvbiB0aGUgc3RhY2suIE90aGVyd2lzZSB1bm1vdW50IGFsbCB0aGUgdmlld3MgYWZ0ZXIgdGhlIGVudGVyaW5nVmlldy5cbiAgICAgKi9cbiAgICBjb25zdCBhY3RpdmVWaWV3ID0gaGFzQ29tcGxldGVkID8gZW50ZXJpbmdWaWV3IDogbGVhdmluZ1ZpZXc7XG4gICAgaWYgKGFjdGl2ZVZpZXcpIHtcbiAgICAgIHRoaXMudW5tb3VudEluYWN0aXZlVmlld3MoYWN0aXZlVmlldyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBoYXNDb21wbGV0ZWQsXG4gICAgICByZXF1aXJlc1RyYW5zaXRpb246IHRydWUsXG4gICAgICBlbnRlcmluZ1ZpZXcsXG4gICAgICBsZWF2aW5nVmlldyxcbiAgICAgIGRpcmVjdGlvbjogb3B0cy5kaXJlY3Rpb24sXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0cyBhIHZpZXcgYXQgdGhlIHNwZWNpZmllZCBpbmRleC5cbiAgICpcbiAgICogV2hlbiB0aGUgdmlldyBhbHJlYWR5IGlzIGluIHRoZSBzdGFjayBpdCB3aWxsIGJlIG1vdmVkIHRvIHRoZSBuZXcgcG9zaXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB2aWV3IFRoZSB2aWV3IHRvIGluc2VydC5cbiAgICogQHBhcmFtIGluZGV4IFRoZSBpbmRleCB3aGVyZSB0byBpbnNlcnQgdGhlIHZpZXcuXG4gICAqL1xuICBpbnNlcnRWaWV3QXQodmlldywgaW5kZXgpIHtcbiAgICBjb25zdCB2aWV3cyA9IHRoaXMudmlld3M7XG4gICAgY29uc3QgZXhpc3RpbmdJbmRleCA9IHZpZXdzLmluZGV4T2Yodmlldyk7XG4gICAgaWYgKGV4aXN0aW5nSW5kZXggPiAtMSkge1xuICAgICAgYXNzZXJ0KHZpZXcubmF2ID09PSB0aGlzLCAndmlldyBpcyBub3QgcGFydCBvZiB0aGUgbmF2Jyk7XG4gICAgICAvLyBUaGUgdmlldyBhbHJlYWR5IGluIHRoZSBzdGFjaywgcmVtb3ZlcyBpdC5cbiAgICAgIHZpZXdzLnNwbGljZShleGlzdGluZ0luZGV4LCAxKTtcbiAgICAgIC8vIGFuZCBhZGQgaXQgYmFjayBhdCB0aGUgcmVxdWVzdGVkIGluZGV4LlxuICAgICAgdmlld3Muc3BsaWNlKGluZGV4LCAwLCB2aWV3KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBhc3NlcnQoIXZpZXcubmF2LCAnbmF2IGlzIHVzZWQnKTtcbiAgICAgIC8vIHRoaXMgaXMgYSBuZXcgdmlldyB0byBhZGQgdG8gdGhlIHN0YWNrXG4gICAgICAvLyBjcmVhdGUgdGhlIG5ldyBlbnRlcmluZyB2aWV3XG4gICAgICB2aWV3Lm5hdiA9IHRoaXM7XG4gICAgICB2aWV3cy5zcGxpY2UoaW5kZXgsIDAsIHZpZXcpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVtb3ZlcyBhIHZpZXcgZnJvbSB0aGUgc3RhY2suXG4gICAqXG4gICAqIEBwYXJhbSB2aWV3IFRoZSB2aWV3IHRvIHJlbW92ZS5cbiAgICovXG4gIHJlbW92ZVZpZXcodmlldykge1xuICAgIGFzc2VydCh2aWV3LnN0YXRlID09PSBWSUVXX1NUQVRFX0FUVEFDSEVEIHx8IHZpZXcuc3RhdGUgPT09IFZJRVdfU1RBVEVfREVTVFJPWUVELCAndmlldyBzdGF0ZSBzaG91bGQgYmUgbG9hZGVkIG9yIGRlc3Ryb3llZCcpO1xuICAgIGNvbnN0IHZpZXdzID0gdGhpcy52aWV3cztcbiAgICBjb25zdCBpbmRleCA9IHZpZXdzLmluZGV4T2Yodmlldyk7XG4gICAgYXNzZXJ0KGluZGV4ID4gLTEsICd2aWV3IG11c3QgYmUgcGFydCBvZiB0aGUgc3RhY2snKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdmlld3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cbiAgZGVzdHJveVZpZXcodmlldykge1xuICAgIHZpZXcuX2Rlc3Ryb3koKTtcbiAgICB0aGlzLnJlbW92ZVZpZXcodmlldyk7XG4gIH1cbiAgLyoqXG4gICAqIFVubW91bnRzIGFsbCBpbmFjdGl2ZSB2aWV3cyBhZnRlciB0aGUgc3BlY2lmaWVkIGFjdGl2ZSB2aWV3LlxuICAgKlxuICAgKiBET00gV1JJVEVcbiAgICpcbiAgICogQHBhcmFtIGFjdGl2ZVZpZXcgVGhlIHZpZXcgdGhhdCBpcyBhY3RpdmVseSB2aXNpYmxlIGluIHRoZSBzdGFjay4gVXNlZCB0byBjYWxjdWxhdGUgd2hpY2ggdmlld3MgdG8gdW5tb3VudC5cbiAgICovXG4gIHVubW91bnRJbmFjdGl2ZVZpZXdzKGFjdGl2ZVZpZXcpIHtcbiAgICAvLyBvaywgY2xlYW51cCB0aW1lISEgRGVzdHJveSBhbGwgb2YgdGhlIHZpZXdzIHRoYXQgYXJlXG4gICAgLy8gSU5BQ1RJVkUgYW5kIGNvbWUgYWZ0ZXIgdGhlIGFjdGl2ZSB2aWV3XG4gICAgLy8gb25seSBkbyB0aGlzIGlmIHRoZSB2aWV3cyBleGlzdCwgdGhvdWdoXG4gICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHZpZXdzID0gdGhpcy52aWV3cztcbiAgICBjb25zdCBhY3RpdmVWaWV3SW5kZXggPSB2aWV3cy5pbmRleE9mKGFjdGl2ZVZpZXcpO1xuICAgIGZvciAobGV0IGkgPSB2aWV3cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3QgdmlldyA9IHZpZXdzW2ldO1xuICAgICAgLyoqXG4gICAgICAgKiBXaGVuIGluc2VydGluZyBtdWx0aXBsZSB2aWV3cyB2aWEgaW5zZXJ0UGFnZXNcbiAgICAgICAqIHRoZSBsYXN0IHBhZ2Ugd2lsbCBiZSB0cmFuc2l0aW9uZWQgdG8sIGJ1dCB0aGVcbiAgICAgICAqIG90aGVycyB3aWxsIG5vdCBiZS4gQXMgYSByZXN1bHQsIGEgRE9NIGVsZW1lbnRcbiAgICAgICAqIHdpbGwgb25seSBiZSBjcmVhdGVkIGZvciB0aGUgbGFzdCBwYWdlIGluc2VydGVkLlxuICAgICAgICogQXMgYSByZXN1bHQsIGl0IGlzIHBvc3NpYmxlIHRvIGhhdmUgdmlld3MgaW4gdGhlXG4gICAgICAgKiBzdGFjayB0aGF0IGRvIG5vdCBoYXZlIGB2aWV3LmVsZW1lbnRgIHlldC5cbiAgICAgICAqL1xuICAgICAgY29uc3QgZWxlbWVudCA9IHZpZXcuZWxlbWVudDtcbiAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIGlmIChpID4gYWN0aXZlVmlld0luZGV4KSB7XG4gICAgICAgICAgLy8gdGhpcyB2aWV3IGNvbWVzIGFmdGVyIHRoZSBhY3RpdmUgdmlld1xuICAgICAgICAgIC8vIGxldCdzIHVubG9hZCBpdFxuICAgICAgICAgIGxpZmVjeWNsZShlbGVtZW50LCBMSUZFQ1lDTEVfV0lMTF9VTkxPQUQpO1xuICAgICAgICAgIHRoaXMuZGVzdHJveVZpZXcodmlldyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaSA8IGFjdGl2ZVZpZXdJbmRleCkge1xuICAgICAgICAgIC8vIHRoaXMgdmlldyBjb21lcyBiZWZvcmUgdGhlIGFjdGl2ZSB2aWV3XG4gICAgICAgICAgLy8gYW5kIGl0IGlzIG5vdCBhIHBvcnRhbCB0aGVuIGVuc3VyZSBpdCBpcyBoaWRkZW5cbiAgICAgICAgICBzZXRQYWdlSGlkZGVuKGVsZW1lbnQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhblN0YXJ0KCkge1xuICAgIHJldHVybiAoISF0aGlzLnN3aXBlR2VzdHVyZSAmJlxuICAgICAgIXRoaXMuaXNUcmFuc2l0aW9uaW5nICYmXG4gICAgICB0aGlzLnRyYW5zSW5zdHIubGVuZ3RoID09PSAwICYmXG4gICAgICB0aGlzLmFuaW1hdGlvbkVuYWJsZWQgJiZcbiAgICAgIHRoaXMuY2FuR29CYWNrU3luYygpKTtcbiAgfVxuICBvblN0YXJ0KCkge1xuICAgIHRoaXMucG9wKHsgZGlyZWN0aW9uOiAnYmFjaycsIHByb2dyZXNzQW5pbWF0aW9uOiB0cnVlIH0pO1xuICB9XG4gIG9uTW92ZShzdGVwVmFsdWUpIHtcbiAgICBpZiAodGhpcy5zYkFuaSkge1xuICAgICAgdGhpcy5zYkFuaS5wcm9ncmVzc1N0ZXAoc3RlcFZhbHVlKTtcbiAgICB9XG4gIH1cbiAgb25FbmQoc2hvdWxkQ29tcGxldGUsIHN0ZXBWYWx1ZSwgZHVyKSB7XG4gICAgaWYgKHRoaXMuc2JBbmkpIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5zYkFuaS5vbkZpbmlzaCgoKSA9PiB7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uRW5hYmxlZCA9IHRydWU7XG4gICAgICB9LCB7IG9uZVRpbWVDYWxsYmFjazogdHJ1ZSB9KTtcbiAgICAgIC8vIEFjY291bnQgZm9yIHJvdW5kaW5nIGVycm9ycyBpbiBKU1xuICAgICAgbGV0IG5ld1N0ZXBWYWx1ZSA9IHNob3VsZENvbXBsZXRlID8gLTAuMDAxIDogMC4wMDE7XG4gICAgICAvKipcbiAgICAgICAqIEFuaW1hdGlvbiB3aWxsIGJlIHJldmVyc2VkIGhlcmUsIHNvIG5lZWQgdG9cbiAgICAgICAqIHJldmVyc2UgdGhlIGVhc2luZyBjdXJ2ZSBhcyB3ZWxsXG4gICAgICAgKlxuICAgICAgICogQWRkaXRpb25hbGx5LCB3ZSBuZWVkIHRvIGFjY291bnQgZm9yIHRoZSB0aW1lIHJlbGF0aXZlXG4gICAgICAgKiB0byB0aGUgbmV3IGVhc2luZyBjdXJ2ZSwgYXMgYHN0ZXBWYWx1ZWAgaXMgZ29pbmcgdG8gYmUgZ2l2ZW5cbiAgICAgICAqIGluIHRlcm1zIG9mIGEgbGluZWFyIGN1cnZlLlxuICAgICAgICovXG4gICAgICBpZiAoIXNob3VsZENvbXBsZXRlKSB7XG4gICAgICAgIHRoaXMuc2JBbmkuZWFzaW5nKCdjdWJpYy1iZXppZXIoMSwgMCwgMC42OCwgMC4yOCknKTtcbiAgICAgICAgbmV3U3RlcFZhbHVlICs9IGdldFRpbWVHaXZlblByb2dyZXNzaW9uKFswLCAwXSwgWzEsIDBdLCBbMC42OCwgMC4yOF0sIFsxLCAxXSwgc3RlcFZhbHVlKVswXTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBuZXdTdGVwVmFsdWUgKz0gZ2V0VGltZUdpdmVuUHJvZ3Jlc3Npb24oWzAsIDBdLCBbMC4zMiwgMC43Ml0sIFswLCAxXSwgWzEsIDFdLCBzdGVwVmFsdWUpWzBdO1xuICAgICAgfVxuICAgICAgdGhpcy5zYkFuaS5wcm9ncmVzc0VuZChzaG91bGRDb21wbGV0ZSA/IDEgOiAwLCBuZXdTdGVwVmFsdWUsIGR1cik7XG4gICAgfVxuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaChcInNsb3RcIiwgbnVsbCk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxuICBzdGF0aWMgZ2V0IHdhdGNoZXJzKCkgeyByZXR1cm4ge1xuICAgIFwic3dpcGVHZXN0dXJlXCI6IFtcInN3aXBlR2VzdHVyZUNoYW5nZWRcIl0sXG4gICAgXCJyb290XCI6IFtcInJvb3RDaGFuZ2VkXCJdXG4gIH07IH1cbn07XG5OYXYuc3R5bGUgPSBuYXZDc3M7XG5cbmNvbnN0IG5hdkxpbmsgPSAoZWwsIHJvdXRlckRpcmVjdGlvbiwgY29tcG9uZW50LCBjb21wb25lbnRQcm9wcywgcm91dGVyQW5pbWF0aW9uKSA9PiB7XG4gIGNvbnN0IG5hdiA9IGVsLmNsb3Nlc3QoJ2lvbi1uYXYnKTtcbiAgaWYgKG5hdikge1xuICAgIGlmIChyb3V0ZXJEaXJlY3Rpb24gPT09ICdmb3J3YXJkJykge1xuICAgICAgaWYgKGNvbXBvbmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuYXYucHVzaChjb21wb25lbnQsIGNvbXBvbmVudFByb3BzLCB7IHNraXBJZkJ1c3k6IHRydWUsIGFuaW1hdGlvbkJ1aWxkZXI6IHJvdXRlckFuaW1hdGlvbiB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAocm91dGVyRGlyZWN0aW9uID09PSAncm9vdCcpIHtcbiAgICAgIGlmIChjb21wb25lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbmF2LnNldFJvb3QoY29tcG9uZW50LCBjb21wb25lbnRQcm9wcywgeyBza2lwSWZCdXN5OiB0cnVlLCBhbmltYXRpb25CdWlsZGVyOiByb3V0ZXJBbmltYXRpb24gfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHJvdXRlckRpcmVjdGlvbiA9PT0gJ2JhY2snKSB7XG4gICAgICByZXR1cm4gbmF2LnBvcCh7IHNraXBJZkJ1c3k6IHRydWUsIGFuaW1hdGlvbkJ1aWxkZXI6IHJvdXRlckFuaW1hdGlvbiB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG59O1xuXG5jb25zdCBOYXZMaW5rID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICAvKipcbiAgICAgKiBUaGUgdHJhbnNpdGlvbiBkaXJlY3Rpb24gd2hlbiBuYXZpZ2F0aW5nIHRvIGFub3RoZXIgcGFnZS5cbiAgICAgKi9cbiAgICB0aGlzLnJvdXRlckRpcmVjdGlvbiA9ICdmb3J3YXJkJztcbiAgICB0aGlzLm9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gbmF2TGluayh0aGlzLmVsLCB0aGlzLnJvdXRlckRpcmVjdGlvbiwgdGhpcy5jb21wb25lbnQsIHRoaXMuY29tcG9uZW50UHJvcHMsIHRoaXMucm91dGVyQW5pbWF0aW9uKTtcbiAgICB9O1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaChIb3N0LCB7IG9uQ2xpY2s6IHRoaXMub25DbGljayB9KTtcbiAgfVxuICBnZXQgZWwoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG59O1xuXG5leHBvcnQgeyBOYXYgYXMgaW9uX25hdiwgTmF2TGluayBhcyBpb25fbmF2X2xpbmsgfTtcbiJdLCJuYW1lcyI6WyJyIiwicmVnaXN0ZXJJbnN0YW5jZSIsImUiLCJjcmVhdGVFdmVudCIsImgiLCJpIiwiZ2V0RWxlbWVudCIsIkgiLCJIb3N0IiwiYiIsImdldElvbk1vZGUiLCJjIiwiY29uZmlnIiwiZyIsImdldFRpbWVHaXZlblByb2dyZXNzaW9uIiwibiIsImFzc2VydCIsInMiLCJzaGFsbG93RXF1YWxTdHJpbmdNYXAiLCJsIiwibGlmZWN5Y2xlIiwidCIsInRyYW5zaXRpb24iLCJzZXRQYWdlSGlkZGVuIiwiZCIsIkxJRkVDWUNMRV9XSUxMX1VOTE9BRCIsIkxJRkVDWUNMRV9XSUxMX0xFQVZFIiwiTElGRUNZQ0xFX0RJRF9MRUFWRSIsImEiLCJhdHRhY2hDb21wb25lbnQiLCJWSUVXX1NUQVRFX05FVyIsIlZJRVdfU1RBVEVfQVRUQUNIRUQiLCJWSUVXX1NUQVRFX0RFU1RST1lFRCIsIlZpZXdDb250cm9sbGVyIiwiY29uc3RydWN0b3IiLCJjb21wb25lbnQiLCJwYXJhbXMiLCJzdGF0ZSIsImluaXQiLCJjb250YWluZXIiLCJlbGVtZW50IiwiZGVsZWdhdGUiLCJfZGVzdHJveSIsInJlbW92ZVZpZXdGcm9tRG9tIiwicGFyZW50RWxlbWVudCIsInJlbW92ZSIsIm5hdiIsInVuZGVmaW5lZCIsIm1hdGNoZXMiLCJ2aWV3IiwiaWQiLCJjb252ZXJ0VG9WaWV3IiwicGFnZSIsImNvbnZlcnRUb1ZpZXdzIiwicGFnZXMiLCJtYXAiLCJjb21wb25lbnRQcm9wcyIsImZpbHRlciIsInYiLCJuYXZDc3MiLCJOYXYiLCJob3N0UmVmIiwiaW9uTmF2V2lsbExvYWQiLCJpb25OYXZXaWxsQ2hhbmdlIiwiaW9uTmF2RGlkQ2hhbmdlIiwidHJhbnNJbnN0ciIsImFuaW1hdGlvbkVuYWJsZWQiLCJ1c2VSb3V0ZXIiLCJpc1RyYW5zaXRpb25pbmciLCJkZXN0cm95ZWQiLCJ2aWV3cyIsImFuaW1hdGVkIiwic3dpcGVHZXN0dXJlQ2hhbmdlZCIsImdlc3R1cmUiLCJlbmFibGUiLCJzd2lwZUdlc3R1cmUiLCJyb290Q2hhbmdlZCIsInJvb3QiLCJzZXRSb290Iiwicm9vdFBhcmFtcyIsImNvbXBvbmVudFdpbGxMb2FkIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZWwiLCJjbG9zZXN0IiwibW9kZSIsImdldEJvb2xlYW4iLCJlbWl0IiwiY29tcG9uZW50RGlkTG9hZCIsImNyZWF0ZVN3aXBlQmFja0dlc3R1cmUiLCJjYW5TdGFydCIsImJpbmQiLCJvblN0YXJ0Iiwib25Nb3ZlIiwib25FbmQiLCJjb25uZWN0ZWRDYWxsYmFjayIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiZGVzdHJveSIsImxlbmd0aCIsInB1c2giLCJvcHRzIiwiZG9uZSIsImluc2VydCIsImluc2VydEluZGV4IiwiaW5zZXJ0UGFnZXMiLCJpbnNlcnRDb21wb25lbnRzIiwicXVldWVUcm5zIiwiaW5zZXJ0U3RhcnQiLCJpbnNlcnRWaWV3cyIsInBvcCIsInJlbW92ZUluZGV4IiwicG9wVG8iLCJpbmRleE9yVmlld0N0cmwiLCJ0aSIsInJlbW92ZVN0YXJ0IiwicmVtb3ZlQ291bnQiLCJyZW1vdmVWaWV3IiwicG9wVG9Sb290Iiwic3RhcnRJbmRleCIsInNldFBhZ2VzIiwic2V0Um91dGVJZCIsImRpcmVjdGlvbiIsImFuaW1hdGlvbiIsImFjdGl2ZSIsImdldEFjdGl2ZVN5bmMiLCJQcm9taXNlIiwicmVzb2x2ZSIsImNoYW5nZWQiLCJwcm9taXNlIiwiZmluaXNoIiwiY29tbW9uT3B0cyIsInVwZGF0ZVVSTCIsInZpZXdJc1JlYWR5IiwiZW50ZXJpbmdFbCIsIm1hcmsiLCJwIiwibWFya1Zpc2libGUiLCJ2aWV3Q29udHJvbGxlciIsImZpbmQiLCJPYmplY3QiLCJhc3NpZ24iLCJhbmltYXRpb25CdWlsZGVyIiwiZ2V0Um91dGVJZCIsInRhZ05hbWUiLCJnZXRBY3RpdmUiLCJnZXRCeUluZGV4IiwiaW5kZXgiLCJjYW5Hb0JhY2siLCJjYW5Hb0JhY2tTeW5jIiwiZ2V0UHJldmlvdXMiLCJnZXRQcmV2aW91c1N5bmMiLCJnZXRMZW5ndGgiLCJpbmRleE9mIiwiX2EiLCJfYiIsInNraXBJZkJ1c3kiLCJyZWplY3QiLCJyb3V0ZXIiLCJjYW5UcmFuc2l0aW9uIiwibmV4dFRybnMiLCJzdWNjZXNzIiwicmVzdWx0IiwiZmlyZUVycm9yIiwiaGFzQ29tcGxldGVkIiwicmVxdWlyZXNUcmFuc2l0aW9uIiwiZW50ZXJpbmdWaWV3IiwibGVhdmluZ1ZpZXciLCJuYXZDaGFuZ2VkIiwiZmFpbGVkIiwicmVqZWN0UmVhc29uIiwic2hpZnQiLCJydW5UcmFuc2l0aW9uIiwicHJlcGFyZVRJIiwiZ2V0RW50ZXJpbmdWaWV3IiwiRXJyb3IiLCJwb3N0Vmlld0luaXQiLCJlbnRlcmluZ1JlcXVpcmVzVHJhbnNpdGlvbiIsImxlYXZpbmdSZXF1aXJlc1RyYW5zaXRpb24iLCJpc0JhY2tEaXJlY3Rpb24iLCJfYyIsInZpZXdzTGVuZ3RoIiwidmlld0NvbnRyb2xsZXJzIiwicmVtb3ZlRW5kIiwiZGVzdHJveVF1ZXVlIiwiZmluYWxOdW1WaWV3cyIsImNvbnNvbGUiLCJ3YXJuIiwiaW5zZXJ0Vmlld0F0IiwiZGVzdHJveVZpZXciLCJwcm9ncmVzc0NhbGxiYWNrIiwicHJvZ3Jlc3NBbmltYXRpb24iLCJhbmkiLCJzYkFuaSIsImxlYXZpbmdFbCIsImFuaW1hdGlvbk9wdHMiLCJzaG93R29CYWNrIiwiYmFzZUVsIiwiZ2V0IiwidHJhbnNpdGlvbkZpbmlzaCIsImFjdGl2ZVZpZXciLCJ1bm1vdW50SW5hY3RpdmVWaWV3cyIsImV4aXN0aW5nSW5kZXgiLCJzcGxpY2UiLCJhY3RpdmVWaWV3SW5kZXgiLCJzdGVwVmFsdWUiLCJwcm9ncmVzc1N0ZXAiLCJzaG91bGRDb21wbGV0ZSIsImR1ciIsIm9uRmluaXNoIiwib25lVGltZUNhbGxiYWNrIiwibmV3U3RlcFZhbHVlIiwiZWFzaW5nIiwicHJvZ3Jlc3NFbmQiLCJyZW5kZXIiLCJ3YXRjaGVycyIsInN0eWxlIiwibmF2TGluayIsInJvdXRlckRpcmVjdGlvbiIsInJvdXRlckFuaW1hdGlvbiIsIk5hdkxpbmsiLCJvbkNsaWNrIiwiaW9uX25hdiIsImlvbl9uYXZfbGluayJdLCJzb3VyY2VSb290Ijoid2VicGFjazovLy8iLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMF19