import { StorageProvider } from './StorageProvider';
interface AuthCryptoData {
    challenge: string;
    verifier: string;
}
export declare class SessionHelper {
    private authDataKey;
    private expiresAtKey;
    private nonceKey;
    private tokenScopes;
    private overrideUrlKey;
    private expiresAtKeys;
    private tokenScopesKeys;
    private storage;
    constructor(clientId: string, storage: StorageProvider);
    getAuthData(): Promise<AuthCryptoData | undefined>;
    setAuthData(session: AuthCryptoData): Promise<void>;
    setOverrideUrl(url: string): Promise<void>;
    getOverrideUrl(): Promise<string | undefined>;
    clearOverrideUrl(): Promise<void>;
    clearAuthData(): Promise<void>;
    getExpiresAt(tokenName?: string): Promise<number | undefined>;
    setExpiresAt(expiresAt: number, tokenName?: string): Promise<void>;
    getTokenScopes(tokenName: string): Promise<string | undefined>;
    setTokenScopes(scopes: string, tokenName: string): Promise<void>;
    clearTokenScopes(): Promise<void>;
    clearExpiresAt(): Promise<void>;
    getNonce(): Promise<string | undefined>;
    setNonce(nonce: string): Promise<void>;
    clearNonce(): Promise<void>;
    clear(): Promise<void>;
}
export {};
