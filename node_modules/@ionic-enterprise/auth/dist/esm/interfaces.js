import { logging } from './logging';
import { UrlHelper } from './urlHelper';
import { generateChallengeAndVerifier } from './crypto-helper';
const ready = new Promise(resolve => {
    const DEVICE_READY_TIMEOUT = 5000;
    const readyTimeout = setTimeout(() => {
        console.warn(`Auth Connect: deviceready did not fire within ${DEVICE_READY_TIMEOUT}ms.`);
        resolve();
    }, DEVICE_READY_TIMEOUT);
    document.addEventListener('deviceready', () => {
        clearTimeout(readyTimeout);
        resolve();
    });
});
/**
 * @hidden
 */
export class IonicAuthConfig {
    constructor(options) {
        this.options = options;
        this.logTag = 'IonicAuthConfig';
        this.defaultDiscoveryUrl = '';
        this.overrideDiscoveryUrl = '';
        this.currentDiscoveryUrl = '';
        this.locations = undefined;
        logging.setLogLevel(options.logLevel);
        this.logger = logging;
    }
    generateChallengeAndVerifier() {
        return generateChallengeAndVerifier();
    }
    validateLocations() {
        if (this.locations === undefined) {
            this.logger.debug(this.logTag, 'locations undefined');
            return false;
        }
        // we have locations loaded are they the right ones? yep, unless we have an override
        if (this.overrideDiscoveryUrl === undefined || this.overrideDiscoveryUrl === '') {
            this.logger.debug(this.logTag, 'override discovery url empty or null');
            return true;
        }
        this.logger.debug(this.logTag, 'override discovery url: ', this.overrideDiscoveryUrl);
        // does the current equal the override?
        if (this.overrideDiscoveryUrl !== this.currentDiscoveryUrl) {
            this.logger.debug(this.logTag, 'override not eq current discovery url');
            return false;
        }
        this.logger.debug(this.logTag, 'all ok?');
        return true;
    }
    async loadLocations() {
        if (this.validateLocations()) {
            return;
        }
        this.currentDiscoveryUrl = this.overrideDiscoveryUrl;
        if (this.currentDiscoveryUrl === '') {
            this.currentDiscoveryUrl = this.options.discoveryUrl || this.defaultDiscoveryUrl;
        }
        this.logger.debug(this.logTag, 'discoveryUrl: ', this.currentDiscoveryUrl);
        if (this.options.platform === 'cordova' || this.options.platform === 'capacitor') {
            // validate?
            await ready;
            try {
                const result = await UrlHelper.get(this.currentDiscoveryUrl);
                this.logger.debug(this.logTag, 'result.data: ', result);
                this.locations = JSON.parse(result.data);
            }
            catch (err) {
                throw new Error(err.error);
            }
        }
        else {
            const resp = await fetch(this.currentDiscoveryUrl);
            this.locations = await resp.json(); // Transform the data into json
            this.logger.debug(this.logTag, 'locations resp: ', this.locations);
        }
    }
    async getIssuer() {
        await this.loadLocations();
        return this.locations['issuer'];
    }
}
//# sourceMappingURL=interfaces.js.map