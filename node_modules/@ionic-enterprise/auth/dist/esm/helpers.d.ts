export declare class helpers {
    static validSerializers: string[];
    static validHttpMethods: string[];
    static validResponseTypes: string[];
    static mergeHeaders(globalHeaders: {
        [id: string]: any;
    }, localHeaders: {
        [id: string]: any;
    }): {
        [id: string]: any;
    };
    static checkForValidStringValue(list: string[], value: any, onInvalidValueMessage: string): any;
    static checkKeyValuePairObject(obj: any, allowedChildren: any, onInvalidValueMessage: string): any;
    static checkHttpMethod(method: any): any;
    static checkResponseType(type: any): any;
    static checkSerializer(serializer: any): any;
    static checkForBlacklistedHeaderKey(key: string): string;
    static checkForInvalidHeaderValue(value: any): any;
    static checkTimeoutValue(timeout: any): any;
    static checkFollowRedirectValue(follow: any): any;
    static checkHeadersObject(headers: any): any;
    static checkParamsObject(params: any): any;
    static getMatchingHostHeaders(url: string, headersList: {
        [id: string]: any;
    }): any;
    static getMergedHeaders(url: string, requestHeaders: {
        [id: string]: any;
    }, predefinedHeaders: {
        [id: string]: any;
    }): {
        [id: string]: any;
    };
    static getAllowedDataTypes(dataSerializer: string): string[];
    static getProcessedData(data: any, dataSerializer: any): any;
    static handleMissingCallbacks(successFn: any, failFn: any): void;
    static handleMissingOptions(options: {
        [id: string]: any;
    }, globals: any): {
        method: any;
        responseType: any;
        serializer: any;
        timeout: any;
        followRedirect: any;
        headers: any;
        params: any;
        data: any;
        filePath: any;
        name: any;
    };
}
