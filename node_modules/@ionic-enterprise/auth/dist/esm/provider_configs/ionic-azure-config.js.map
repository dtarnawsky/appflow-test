{"version":3,"file":"ionic-azure-config.js","sourceRoot":"","sources":["../../../src/provider_configs/ionic-azure-config.ts"],"names":[],"mappings":"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","sourcesContent":["import { IonicAuthConfig, IonicAuthOptions } from '../interfaces';\nimport { UrlInfo } from '../UrlInfo';\nimport { OAuthPacker } from '../oauth-packer';\nimport { UrlHelper } from '../urlHelper';\n\nexport class IonicAzureConfig extends IonicAuthConfig {\n  constructor(public options: IonicAuthOptions) {\n    super(options);\n    this.defaultDiscoveryUrl =\n      'https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration';\n  }\n\n  async getAuthorizeUrl(\n    nonce: string,\n    challenge: string,\n    parameters: { [id: string]: string },\n  ): Promise<UrlInfo> {\n    await this.loadLocations();\n    const base = {\n      ...parameters,\n      clientId: this.options.clientID,\n      redirectUri: this.options.redirectUri,\n      audience: this.options.audience,\n      nonce: nonce,\n      state: nonce,\n      scope: this.options.scope,\n    };\n\n    if (this.options.platform != 'web') {\n      const options = {\n        ...base,\n        code_challenge_method: 'S256',\n        code_challenge: challenge,\n        responseType: 'code',\n      };\n      return UrlHelper.buildUrl(\n        this.locations['authorization_endpoint'],\n        OAuthPacker.packParams(options),\n      );\n    } else {\n      // web case\n      let options = {};\n      if (this.options.webAuthFlow && this.options.webAuthFlow === 'PKCE') {\n        options = {\n          ...base,\n          code_challenge_method: 'S256',\n          code_challenge: challenge,\n          responseType: 'code',\n        };\n      } else {\n        options = {\n          ...base,\n          response_type: 'id_token token',\n          response_mode: 'fragment',\n          client_secret: this.options.clientSecret,\n        };\n      }\n      return UrlHelper.buildUrl(\n        this.locations['authorization_endpoint'],\n        OAuthPacker.packParams(options),\n      );\n    }\n  }\n\n  async getLogoutUrl(): Promise<UrlInfo> {\n    await this.loadLocations();\n\n    const options = {\n      clientId: this.options.clientID,\n      returnTo: this.options.redirectUri,\n      redirectUri: this.options.redirectUri,\n      postLogoutRedirectUri: this.options.logoutUrl,\n    };\n\n    return UrlHelper.buildUrl(\n      this.locations['end_session_endpoint'],\n      OAuthPacker.packParams(options),\n    );\n  }\n\n  async getTokenUrl(): Promise<UrlInfo> {\n    await this.loadLocations();\n    return {\n      url: this.locations['token_endpoint'],\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      payload: { scope: String(this.options.scope) },\n    };\n  }\n}\n"]}