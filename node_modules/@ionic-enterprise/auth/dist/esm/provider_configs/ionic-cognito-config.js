import { IonicAuthConfig } from '../interfaces';
import { OAuthPacker } from '../oauth-packer';
import { UrlHelper } from '../urlHelper';
import { base64Encode } from '../crypto-helper';
export class IonicCognitoConfig extends IonicAuthConfig {
    constructor(options) {
        super(options);
        this.options = options;
        // validate that client_id and client_secret are set
        if (this.options.discoveryUrl == undefined) {
            throw "IonicAuthOptions.discoveryUrl must be defined for Cognito, it usually is 'https://cognito-idp.REGION.amazonaws.com/USER-POOL-ID'";
        }
    }
    async loadLocations() {
        await super.loadLocations();
        if (this.locations['logout_endpoint'] == undefined) {
            const auth_endpoint = this.locations['authorization_endpoint'] || '';
            const url = new URL(auth_endpoint);
            url.pathname = 'logout';
            this.locations['logout_endpoint'] = url.href;
        }
    }
    async getAuthorizeUrl(nonce, challenge, parameters) {
        await this.loadLocations();
        const base = Object.assign(Object.assign({}, parameters), { clientId: this.options.clientID, redirectUri: this.options.redirectUri, audience: this.options.audience, nonce: nonce, state: nonce, scope: this.options.scope });
        const PKCE = Object.assign(Object.assign({}, base), { code_challenge_method: 'S256', code_challenge: challenge, responseType: 'code' });
        if (this.options.platform !== 'web') {
            const options = Object.assign({}, PKCE);
            return UrlHelper.buildUrl(this.locations['authorization_endpoint'], OAuthPacker.packParams(options));
        }
        else {
            // web case
            let options = {};
            if (this.options.webAuthFlow && this.options.webAuthFlow === 'PKCE') {
                options = Object.assign({}, PKCE);
            }
            else {
                options = Object.assign(Object.assign({}, base), { response_type: 'token', response_mode: 'fragment' });
            }
            return UrlHelper.buildUrl(this.locations['authorization_endpoint'], OAuthPacker.packParams(options));
        }
    }
    async getLogoutUrl() {
        await this.loadLocations();
        const options = {
            clientId: this.options.clientID,
            logoutUri: this.options.logoutUrl,
        };
        return UrlHelper.buildUrl(this.locations['logout_endpoint'], OAuthPacker.packParams(options));
    }
    async getTokenUrl() {
        await this.loadLocations();
        const headers = {};
        if (this.options.clientSecret) {
            const auth_header = base64Encode(new TextEncoder().encode(`${this.options.clientID}:${this.options.clientSecret}`));
            headers['Authorization'] = `Basic ${auth_header}`;
        }
        return { url: this.locations['token_endpoint'], headers, payload: {} };
    }
}
//# sourceMappingURL=ionic-cognito-config.js.map