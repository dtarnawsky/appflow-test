{"version":3,"file":"ionic-cognito-config.js","sourceRoot":"","sources":["../../../src/provider_configs/ionic-cognito-config.ts"],"names":[],"mappings":"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","sourcesContent":["import { IonicAuthConfig, IonicAuthOptions } from '../interfaces';\nimport { UrlInfo } from '../UrlInfo';\nimport { OAuthPacker } from '../oauth-packer';\nimport { UrlHelper } from '../urlHelper';\nimport { base64Encode } from '../crypto-helper';\n\nexport class IonicCognitoConfig extends IonicAuthConfig {\n  constructor(public options: IonicAuthOptions) {\n    super(options);\n    // validate that client_id and client_secret are set\n    if (this.options.discoveryUrl == undefined) {\n      throw \"IonicAuthOptions.discoveryUrl must be defined for Cognito, it usually is 'https://cognito-idp.REGION.amazonaws.com/USER-POOL-ID'\";\n    }\n  }\n\n  async loadLocations(): Promise<void> {\n    await super.loadLocations();\n    if (this.locations['logout_endpoint'] == undefined) {\n      const auth_endpoint: string = this.locations['authorization_endpoint'] || '';\n      const url: URL = new URL(auth_endpoint);\n      url.pathname = 'logout';\n      this.locations['logout_endpoint'] = url.href;\n    }\n  }\n\n  async getAuthorizeUrl(\n    nonce: string,\n    challenge: string,\n    parameters: { [id: string]: string },\n  ): Promise<UrlInfo> {\n    await this.loadLocations();\n    const base = {\n      ...parameters,\n      clientId: this.options.clientID,\n      redirectUri: this.options.redirectUri,\n      audience: this.options.audience,\n      nonce: nonce,\n      state: nonce,\n      scope: this.options.scope,\n    };\n    const PKCE = {\n      ...base,\n      code_challenge_method: 'S256',\n      code_challenge: challenge,\n      responseType: 'code',\n    };\n    if (this.options.platform !== 'web') {\n      const options = { ...PKCE };\n      return UrlHelper.buildUrl(\n        this.locations['authorization_endpoint'],\n        OAuthPacker.packParams(options),\n      );\n    } else {\n      // web case\n      let options = {};\n      if (this.options.webAuthFlow && this.options.webAuthFlow === 'PKCE') {\n        options = { ...PKCE };\n      } else {\n        options = {\n          ...base,\n          response_type: 'token',\n          response_mode: 'fragment',\n        };\n      }\n      return UrlHelper.buildUrl(\n        this.locations['authorization_endpoint'],\n        OAuthPacker.packParams(options),\n      );\n    }\n  }\n\n  async getLogoutUrl(): Promise<UrlInfo> {\n    await this.loadLocations();\n    const options = {\n      clientId: this.options.clientID,\n      logoutUri: this.options.logoutUrl,\n    };\n    return UrlHelper.buildUrl(this.locations['logout_endpoint'], OAuthPacker.packParams(options));\n  }\n\n  async getTokenUrl(): Promise<UrlInfo> {\n    await this.loadLocations();\n\n    const headers: { [key: string]: any } = {};\n\n    if (this.options.clientSecret) {\n      const auth_header = base64Encode(\n        new TextEncoder().encode(`${this.options.clientID}:${this.options.clientSecret}`),\n      );\n      headers['Authorization'] = `Basic ${auth_header}`;\n    }\n\n    return { url: this.locations['token_endpoint'], headers, payload: {} };\n  }\n}\n"]}