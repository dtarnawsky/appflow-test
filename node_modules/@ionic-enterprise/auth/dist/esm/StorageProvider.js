/**
 * @hidden
 */
export class WebStorageProvider {
    constructor(keyPrefix = 'ionic-ac-storage:') {
        this.keyPrefix = keyPrefix;
    }
    async get(key) {
        return localStorage.getItem(this.getKey(key));
    }
    async set(key, value) {
        return localStorage.setItem(this.getKey(key), value);
    }
    async remove(key) {
        return localStorage.removeItem(this.getKey(key));
    }
    async clear() {
        var _a;
        const length = localStorage.length;
        for (let i = 0; i < length; i++) {
            if ((_a = localStorage.key(i)) === null || _a === void 0 ? void 0 : _a.startsWith(this.keyPrefix)) {
                localStorage.removeItem(localStorage.key(i));
            }
        }
    }
    getKey(key) {
        return `${this.keyPrefix}${key}`;
    }
}
/**
 * @hidden
 */
export class NativeStorageProvider {
    async get(key) {
        return new Promise((res, rej) => {
            cordova.exec(function (result) {
                res(result);
            }, function (error) {
                rej(error);
            }, 'IonicAuthConnectStorage', 'get', [key]);
        });
    }
    async set(key, value) {
        return new Promise((res, rej) => {
            cordova.exec(function (_winParam) {
                res();
            }, function (error) {
                rej(error);
            }, 'IonicAuthConnectStorage', 'set', [key, value]);
        });
    }
    async remove(key) {
        return new Promise((res, rej) => {
            cordova.exec(function () {
                res();
            }, function (error) {
                rej(error);
            }, 'IonicAuthConnectStorage', 'remove', [key]);
        });
    }
    async clear() {
        return new Promise((res, rej) => {
            cordova.exec(function () {
                res();
            }, function (error) {
                rej(error);
            }, 'IonicAuthConnectStorage', 'clear');
        });
    }
}
//# sourceMappingURL=StorageProvider.js.map