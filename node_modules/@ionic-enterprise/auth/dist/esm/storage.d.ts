import { TokenStorageProvider, IVUserInterface, IV5UserInterface } from './interfaces';
declare abstract class BaseStorage {
    protected accessTokenKey: string;
    protected refreshTokenKey: string;
    protected idTokenKey: string;
    protected authResponseKey: string;
    setClientId(clientId: string): void;
    formatKeyForToken(keyName: string, tokenName?: string): string;
}
export declare const isTokenStorageProvider: (obj: any) => obj is TokenStorageProvider;
export declare const isIV5UserInterface: (obj: any) => obj is IV5UserInterface;
export declare class AuthIdentityVault5Storage extends BaseStorage implements TokenStorageProvider {
    private vault;
    constructor(vault: IV5UserInterface);
    /**
     * get the saved access token
     */
    getAccessToken(tokenName?: string): Promise<string | undefined>;
    /**
     * save the access token
     */
    setAccessToken(accessToken: string | undefined, tokenName?: string): Promise<void>;
    /**
     * get the saved refresh token
     */
    getRefreshToken(): Promise<string | undefined>;
    /**
     * save the refresh token
     */
    setRefreshToken(refreshToken: string): Promise<void>;
    /**
     * get the id token
     */
    getIdToken(): Promise<string | undefined>;
    /**
     * save the id token
     */
    setIdToken(idToken: string): Promise<void>;
    /**
     * get the full auth result
     */
    getAuthResponse(): Promise<any>;
    /**
     * save the full auth response
     */
    setAuthResponse(response: any): Promise<void>;
    clear(): Promise<void>;
    onLock(callback: () => void): void;
}
export declare class AuthIdentityVaultStorage extends BaseStorage implements TokenStorageProvider {
    private iv;
    constructor(iv: IVUserInterface);
    private ensureVaultConfigured;
    /**
     * get the saved access token
     */
    getAccessToken(tokenName?: string): Promise<string | undefined>;
    /**
     * save the access token
     */
    setAccessToken(accessToken: string | undefined, tokenName?: string): Promise<any>;
    /**
     * get the saved refresh token
     */
    getRefreshToken(): Promise<string | undefined>;
    /**
     * save the refresh token
     */
    setRefreshToken(refreshToken: string): Promise<any>;
    /**
     * get the id token
     */
    getIdToken(): Promise<string | undefined>;
    /**
     * save the id token
     */
    setIdToken(idToken: string): Promise<any>;
    /**
     * get the full auth result
     */
    getAuthResponse(): Promise<any>;
    /**
     * save the full auth response
     */
    setAuthResponse(response: any): Promise<any>;
    clear(): Promise<void>;
}
export declare class AuthLocalStorage extends BaseStorage implements TokenStorageProvider {
    /**
     * get the saved access token
     */
    getAccessToken(tokenName?: string): Promise<string | undefined>;
    /**
     * save the access token
     */
    setAccessToken(accessToken: string, tokenName?: string): Promise<void>;
    /**
     * get the saved refresh token
     */
    getRefreshToken(): Promise<string | undefined>;
    /**
     * save the refresh token
     */
    setRefreshToken(refreshToken: string): Promise<void>;
    /**
     * get the id token
     */
    getIdToken(): Promise<string | undefined>;
    /**
     * save the id token
     */
    setIdToken(idToken: string): Promise<void>;
    /**
     * get the full auth result
     */
    getAuthResponse(): Promise<any>;
    /**
     * save the full auth response
     */
    setAuthResponse(response: any): Promise<void>;
    clear(): Promise<void>;
}
export {};
