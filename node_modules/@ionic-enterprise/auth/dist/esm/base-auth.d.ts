import { AuthResult, IHandlers, IIonicAuth, IonicAuthConfig, IonicAuthOptions, TokenStorageProvider } from './interfaces';
import { SessionHelper } from './session-helper';
import { Logger } from './logging';
export declare abstract class IonicBaseAuth<IDToken extends {} = any> implements Partial<IIonicAuth<IDToken>> {
    options: IonicAuthOptions;
    protected handlers: IHandlers;
    protected storage: TokenStorageProvider;
    protected session: SessionHelper;
    protected authResult?: AuthResult;
    protected authConfig: IonicAuthConfig;
    protected logger: Logger;
    protected logTag: string;
    protected addedLoginParameters: {
        [id: string]: string;
    };
    constructor(options: IonicAuthOptions, handlers: IHandlers);
    getRawIdToken(): Promise<string | undefined>;
    setStorageOnLockCallback(onLockCallback: () => void): void;
    protected abstract internalHandleCallback(url: string, externalCallback: boolean): Promise<AuthResult>;
    protected abstract showUrl(url: string, options?: {
        iosWebView?: 'private' | 'shared';
        hide?: boolean;
    }, urlToCloseWindow?: string): Promise<{
        event: string;
        callback: string;
    } | void>;
    abstract refreshSession(tokenName?: string): Promise<void>;
    private getStorageProvider;
    private validateIdToken;
    protected setSession(authResult: AuthResult, tokenName?: string, scopes?: string): Promise<AuthResult | undefined>;
    additionalLoginParameters(parameters: {
        [id: string]: string;
    }): void;
    setOverrideDiscoveryUrl(url: string): Promise<void>;
    clearOverrideDiscoveryUrl(): Promise<void>;
    getOverrideDiscoveryUrl(): Promise<string | undefined>;
    getAccessTokenExpiration(tokenName?: string): Promise<number | undefined>;
    login(overrideUrl?: string): Promise<void>;
    getIdToken(): Promise<any>;
    getAuthResponse(): Promise<any>;
    handleLoginCallback(url?: string): Promise<AuthResult>;
    handleLogoutCallback(): Promise<void>;
    /**
     * @deprecated Use `handleLoginCallback()` instead
     */
    handleCallback(url: string): Promise<AuthResult>;
    isAccessTokenAvailable(tokenName?: string): Promise<boolean>;
    isAccessTokenExpired(tokenName?: string): Promise<boolean>;
    isAuthenticated(tokenName?: string): Promise<boolean>;
    getRefreshToken(): Promise<string | undefined>;
    isRefreshTokenAvailable(): Promise<boolean>;
    protected internalGetToken(codeName: string, code: string, grantType: string, verifier: any, scope: string | undefined): Promise<AuthResult>;
    getAccessToken(tokenName?: string, scopes?: string): Promise<any>;
    expire(tokenName?: string): Promise<void>;
    logout(): Promise<void>;
    private finishLogout;
    onLoginSuccess(authResponse: any): void;
    onLogout(): void;
    clearStorage(): Promise<void>;
}
