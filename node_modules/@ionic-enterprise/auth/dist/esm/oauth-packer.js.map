{"version":3,"file":"oauth-packer.js","sourceRoot":"","sources":["../../src/oauth-packer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AACtC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,IAAI,wBAAwB,GAAG;IAC7B,YAAY;IACZ,UAAU;IACV,QAAQ;IACR,gBAAgB;IAChB,WAAW;IACX,eAAe;IACf,gBAAgB;IAChB,uBAAuB;IACvB,aAAa;IACb,SAAS;IACT,eAAe;IACf,YAAY;IACZ,YAAY;IACZ,SAAS;IACT,OAAO;IACP,0BAA0B;IAC1B,QAAQ;IACR,cAAc;IACd,cAAc;IACd,SAAS;IACT,aAAa;IACb,eAAe;IACf,eAAe;IACf,WAAW;IACX,OAAO;IACP,OAAO;IACP,YAAY;IACZ,KAAK;CACN,CAAC;AAIF,MAAM,OAAO,WAAW;IACtB,MAAM,CAAC,UAAU,CAAC,OAAe;QAC/B,MAAM,WAAW,GAAW,EAAE,CAAC;QAC/B,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;YACvB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;gBAAE,SAAS,CAAC,0CAA0C;YACvE,MAAM,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;YACjC,IAAI,wBAAwB,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;gBAChD,WAAW,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;aACvC;iBAAM;gBACL,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,0BAA0B,EAAE,GAAG,CAAC,CAAC;gBAC1E,WAAW,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;aACjC;SACF;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;CACF","sourcesContent":["import { snakeCase } from 'lodash-es';\nimport { logging } from './logging';\n\nvar validAuthorizationParams = [\n  'acr_values',\n  'audience', // maybe auth0 specific\n  'claims',\n  'claims_locales',\n  'client_id',\n  'client_secret',\n  'code_challenge',\n  'code_challenge_method',\n  'domain_hint',\n  'display',\n  'id_token_hint',\n  'login_hint',\n  'logout_uri',\n  'max_age',\n  'nonce',\n  'post_logout_redirect_uri',\n  'prompt',\n  'redirect_uri',\n  'registration',\n  'request',\n  'request_uri',\n  'response_mode',\n  'response_type',\n  'return_to', // maybe auth0 specific\n  'scope',\n  'state',\n  'ui_locales',\n  'vtr',\n];\n\ntype Params = { [index: string]: any };\n\nexport class OAuthPacker {\n  static packParams(options: Params) {\n    const validParams: Params = {};\n    for (let key in options) {\n      if (!options[key]) continue; // skip null/undefined/empty string values\n      const snakedKey = snakeCase(key);\n      if (validAuthorizationParams.includes(snakedKey)) {\n        validParams[snakedKey] = options[key];\n      } else {\n        logging.debug('OAuthPacker::packParams', 'adding additional param:', key);\n        validParams[key] = options[key];\n      }\n    }\n    return validParams;\n  }\n}\n"]}