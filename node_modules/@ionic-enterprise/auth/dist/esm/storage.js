import { logging } from './logging';
class BaseStorage {
    constructor() {
        this.accessTokenKey = '_ionicAuth.accessToken';
        this.refreshTokenKey = '_ionicAuth.refreshToken';
        this.idTokenKey = '_ionicAuth.idToken';
        this.authResponseKey = '_ionicAuth.authResponse';
    }
    setClientId(clientId) {
        this.accessTokenKey = this.accessTokenKey + '.' + clientId;
        this.refreshTokenKey = this.refreshTokenKey + '.' + clientId;
        this.idTokenKey = this.idTokenKey + '.' + clientId;
        this.authResponseKey = this.authResponseKey + '.' + clientId;
    }
    // some keys need to be store per token, helper to ensure consistency
    formatKeyForToken(keyName, tokenName) {
        return tokenName ? this.accessTokenKey + '.' + tokenName : this.accessTokenKey;
    }
}
export const isTokenStorageProvider = (obj) => {
    const provider = obj;
    return ((typeof provider === 'object' &&
        provider.getAccessToken &&
        typeof provider.getAccessToken === 'function') ||
        (provider.getAuthResponse && typeof provider.getAuthResponse === 'function') ||
        (provider.getIdToken && typeof provider.getIdToken === 'function') ||
        (provider.getRefreshToken && typeof provider.getRefreshToken === 'function') ||
        (provider.setAccessToken && typeof provider.setAccessToken === 'function') ||
        (provider.setAuthResponse && typeof provider.setAuthResponse === 'function') ||
        (provider.setIdToken && typeof provider.setIdToken === 'function') ||
        (provider.setRefreshToken && typeof provider.setRefreshToken === 'function') ||
        false);
};
export const isIV5UserInterface = (obj) => {
    const provider = obj;
    return (provider.getValue &&
        typeof provider.getValue === 'function' &&
        provider.setValue &&
        typeof provider.setValue === 'function' &&
        provider.clear &&
        typeof provider.clear === 'function' &&
        provider.onLock &&
        typeof provider.onLock === 'function');
};
export class AuthIdentityVault5Storage extends BaseStorage {
    constructor(vault) {
        super();
        this.vault = vault;
    }
    /**
     * get the saved access token
     */
    async getAccessToken(tokenName) {
        var _a;
        const key = this.formatKeyForToken(this.accessTokenKey, tokenName);
        logging.debug('getAccessToken key:', key);
        return (_a = (await this.vault.getValue(key))) !== null && _a !== void 0 ? _a : undefined;
    }
    /**
     * save the access token
     */
    async setAccessToken(accessToken, tokenName) {
        const key = this.formatKeyForToken(this.accessTokenKey, tokenName);
        logging.debug('setAccessToken: key: ', key);
        return this.vault.setValue(key, accessToken);
    }
    /**
     * get the saved refresh token
     */
    async getRefreshToken() {
        var _a;
        return (_a = (await this.vault.getValue(this.refreshTokenKey))) !== null && _a !== void 0 ? _a : undefined;
    }
    /**
     * save the refresh token
     */
    async setRefreshToken(refreshToken) {
        return this.vault.setValue(this.refreshTokenKey, refreshToken);
    }
    /**
     * get the id token
     */
    async getIdToken() {
        var _a;
        return (_a = (await this.vault.getValue(this.idTokenKey))) !== null && _a !== void 0 ? _a : undefined;
    }
    /**
     * save the id token
     */
    async setIdToken(idToken) {
        return this.vault.setValue(this.idTokenKey, idToken);
    }
    /**
     * get the full auth result
     */
    async getAuthResponse() {
        return this.vault.getValue(this.authResponseKey);
    }
    /**
     * save the full auth response
     */
    async setAuthResponse(response) {
        return this.vault.setValue(this.authResponseKey, response);
    }
    async clear() {
        return this.vault.clear();
    }
    onLock(callback) {
        this.vault.onLock(callback);
    }
}
export class AuthIdentityVaultStorage extends BaseStorage {
    constructor(iv) {
        super();
        this.iv = iv;
    }
    async ensureVaultConfigured(setPasscodeIfNeeded) {
        const vault = await this.iv.getVault();
        const ivConfig = await vault.getConfig();
        if (ivConfig.isPasscodeSetupNeeded && setPasscodeIfNeeded) {
            await this.iv.setPasscode();
        }
        return vault;
    }
    /**
     * get the saved access token
     */
    async getAccessToken(tokenName) {
        const key = this.formatKeyForToken(this.accessTokenKey, tokenName);
        logging.debug('getAccessToken: key: ', key);
        const vault = await this.ensureVaultConfigured(false);
        return vault.getValue(key);
    }
    /**
     * save the access token
     */
    async setAccessToken(accessToken, tokenName) {
        const key = this.formatKeyForToken(this.accessTokenKey, tokenName);
        logging.debug('setAccessToken: key: ', key);
        const vault = await this.ensureVaultConfigured(true);
        return vault.storeValue(key, accessToken);
    }
    /**
     * get the saved refresh token
     */
    async getRefreshToken() {
        const vault = await this.ensureVaultConfigured(false);
        return vault.getValue(this.refreshTokenKey);
    }
    /**
     * save the refresh token
     */
    async setRefreshToken(refreshToken) {
        const vault = await this.ensureVaultConfigured(true);
        return vault.storeValue(this.refreshTokenKey, refreshToken);
    }
    /**
     * get the id token
     */
    async getIdToken() {
        const vault = await this.ensureVaultConfigured(false);
        return vault.getValue(this.idTokenKey);
    }
    /**
     * save the id token
     */
    async setIdToken(idToken) {
        const vault = await this.ensureVaultConfigured(true);
        return vault.storeValue(this.idTokenKey, idToken);
    }
    /**
     * get the full auth result
     */
    async getAuthResponse() {
        const vault = await this.ensureVaultConfigured(false);
        return vault.getValue(this.authResponseKey);
    }
    /**
     * save the full auth response
     */
    async setAuthResponse(response) {
        const vault = await this.ensureVaultConfigured(true);
        return vault.storeValue(this.authResponseKey, response);
    }
    async clear() {
        const vault = await this.iv.getVault();
        return vault.clear();
    }
}
export class AuthLocalStorage extends BaseStorage {
    /**
     * get the saved access token
     */
    async getAccessToken(tokenName) {
        const key = this.formatKeyForToken(this.accessTokenKey, tokenName);
        const accessToken = localStorage.getItem(key);
        return accessToken || undefined;
    }
    /**
     * save the access token
     */
    async setAccessToken(accessToken, tokenName) {
        const key = this.formatKeyForToken(this.accessTokenKey, tokenName);
        return localStorage.setItem(key, accessToken);
    }
    /**
     * get the saved refresh token
     */
    async getRefreshToken() {
        const refreshToken = localStorage.getItem(this.refreshTokenKey);
        return refreshToken || undefined;
    }
    /**
     * save the refresh token
     */
    async setRefreshToken(refreshToken) {
        return localStorage.setItem(this.refreshTokenKey, refreshToken);
    }
    /**
     * get the id token
     */
    async getIdToken() {
        const idToken = localStorage.getItem(this.idTokenKey);
        return idToken || undefined;
    }
    /**
     * save the id token
     */
    async setIdToken(idToken) {
        return localStorage.setItem(this.idTokenKey, idToken);
    }
    /**
     * get the full auth result
     */
    async getAuthResponse() {
        const authResponseString = localStorage.getItem(this.authResponseKey);
        if (authResponseString) {
            try {
                return JSON.parse(authResponseString);
            }
            catch (e) {
                logging.error(`auth response of ${authResponseString} is not valid json`);
            }
        }
    }
    /**
     * save the full auth response
     */
    async setAuthResponse(response) {
        try {
            const authRespString = JSON.stringify(response);
            return localStorage.setItem(this.authResponseKey, authRespString);
        }
        catch (e) { }
    }
    async clear() {
        localStorage.removeItem(this.accessTokenKey);
        localStorage.removeItem(this.refreshTokenKey);
        localStorage.removeItem(this.idTokenKey);
        localStorage.removeItem(this.authResponseKey);
    }
}
//# sourceMappingURL=storage.js.map