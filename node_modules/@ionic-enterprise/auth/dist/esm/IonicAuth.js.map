{"version":3,"file":"IonicAuth.js","sourceRoot":"","sources":["../../src/IonicAuth.ts"],"names":[],"mappings":"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","sourcesContent":["import { AuthResult, IIonicAuth, IonicAuthOptions } from './interfaces';\nimport { IonicAuthWeb } from './ionic-auth-web';\nimport { IonicNativeAuth } from './ionic-auth-cordova';\n\nexport class IonicAuth<IDToken extends {} = any> implements IIonicAuth<IDToken> {\n  private implementation: IIonicAuth;\n\n  constructor(options: IonicAuthOptions) {\n    this.implementation = this.getImplementation(options);\n  }\n\n  /**\n   * Using configuration display the auth provider's login UI.\n   *\n   *  The overrideUrl parameter should only be used when the default\n   *  discovery url needs to be overrode. (The known use case is with Azure AD\n   *  custom user flows/policies.)\n   *\n   * @example\n   * myAuthService.login(\"\")\n   */\n  login(overrideUrl?: string) {\n    return this.implementation.login(overrideUrl);\n  }\n\n  /**\n   * Add additional parameters to the login request.\n   *\n   * @example\n   * myAuthService.additionalLoginParameters({ 'login_hint': 'neighbors cat name' })\n   *\n   * @param parameters any additional parameters that should be added to the login request\n   *  examples: `login_hint`, `domain_hint`\n   */\n  additionalLoginParameters(parameters: { [id: string]: string }) {\n    return this.implementation.additionalLoginParameters(parameters);\n  }\n\n  /**\n   * Get the access token, once logged in, for API calls.\n   *\n   * @example\n   * myAuthService.getAccessToken()\n   *\n   * @param tokenName Optional token name, only used when multiple tokens are required (Azure specific feature).\n   * @param scopes The scopes for the access token.\n   */\n  getAccessToken(tokenName?: string, scopes?: string) {\n    return this.implementation.getAccessToken(tokenName, scopes);\n  }\n\n  /**\n   * Get the unparsed id token.\n   *\n   * @example\n   * myAuthService.getRawIdToken()\n   */\n  getRawIdToken(): Promise<string | undefined> {\n    return this.implementation.getRawIdToken();\n  }\n\n  /**\n   * Get the parsed id token, includes requested scope values.\n   *\n   * @example\n   * myAuthService.getIdToken()\n   */\n  getIdToken(): Promise<IDToken | undefined> {\n    return this.implementation.getIdToken();\n  }\n\n  /**\n   * Get the full original auth response.\n   *\n   * @example\n   * myAuthService.getAuthResponse()\n   */\n  getAuthResponse() {\n    return this.implementation.getAuthResponse();\n  }\n\n  /**\n   * Check to see if the access token is available.\n   *\n   * @example\n   * myAuthService.isAccessTokenAvailable()\n   *\n   * @param tokenName Optional token name, only used when multiple tokens are required (Azure specific feature).\n   */\n  isAccessTokenAvailable(tokenName?: string) {\n    return this.implementation.isAccessTokenAvailable(tokenName);\n  }\n\n  /**\n   * Check to see if the access token is expired.\n   *\n   * @example\n   * myAuthService.isAccessTokenExpired()\n   */\n  isAccessTokenExpired() {\n    return this.implementation.isAccessTokenExpired();\n  }\n\n  /**\n   * Check to see if the refresh token is available.\n   *\n   * @example\n   * myAuthService.isRefreshTokenAvailable()\n   */\n  isRefreshTokenAvailable() {\n    return this.implementation.isRefreshTokenAvailable();\n  }\n\n  /**\n   * Get the refresh token if available.\n   *\n   * @example\n   * myAuthService.getRefreshToken()\n   */\n  getRefreshToken() {\n    return this.implementation.getRefreshToken();\n  }\n\n  /**\n   * Refresh the session, throws if refresh token is invalid or missing.\n   *\n   * @example\n   * myAuthService.refreshSession()\n   *\n   * @param tokenName Optional token name, only used when multiple tokens are required (Azure specific feature).\n   */\n  refreshSession() {\n    return this.implementation.refreshSession();\n  }\n\n  /**\n   * Check to see if the user is logged in, and refresh the token if needed.\n   *\n   * @example\n   * const isAuth = myAuthService.isAuthenticated()\n   */\n  isAuthenticated() {\n    return this.implementation.isAuthenticated();\n  }\n\n  /**\n   * Log the user out and clear all tokens & data stored in the {@link TokenStorageProvider} as well as any\n   * metadata relevant to the existing session such as access token expiration time.\n   *\n   * @example\n   * myAuthService.logout()\n   */\n  logout() {\n    return this.implementation.logout();\n  }\n\n  /**\n   * Expire the current access token, but keep the refresh token, useful for testing.\n   *\n   * @example\n   * myAuthService.expire()\n   */\n  expire() {\n    return this.implementation.expire();\n  }\n\n  /**\n   * Called by the hosting app when login callbacks happen, these will be to the URL specified\n   *  in the options for RedirectUri.\n   *\n   * @example\n   * myAuthService.handleLoginCallback()\n   *\n   * @param url callback url to handle @default defaults to `window.location.href`\n   */\n  handleLoginCallback(url?: string) {\n    return this.implementation.handleLoginCallback(url);\n  }\n\n  /**\n   * Called by the hosting app when logout callbacks happens.\n   *\n   * @example\n   * myAuthService.handleLogoutCallback()\n   */\n  handleLogoutCallback() {\n    return this.implementation.handleLogoutCallback();\n  }\n\n  /**\n   * Called by the hosting app when callbacks happen, these will be to the URL specified\n   *  in the options for LogoutUrl and RedirectUri.\n   *\n   * @example\n   * myAuthService.handleCallback(window.location.href)\n   *\n   * @deprecated Use [handleLoginCallback](#iionicauth.handlelogincallback) instead\n   * @param url callback url to handle\n   */\n  handleCallback(url: string) {\n    return this.implementation.handleLoginCallback(url);\n  }\n\n  /**\n   * This method will clear all tokens & data stored in the {@link TokenStorageProvider} as well as any\n   * metadata relevant to the existing session such as access token expiration time.\n   *\n   * @example\n   * myAuthService.clearStorage()\n   */\n  async clearStorage() {\n    return this.implementation.clearStorage();\n  }\n\n  /**\n   * Override the discovery url used for login in a way that persists.\n   *\n   * @example\n   * myAuthService.setOverrideDiscoveryUrl(\"https://myurl\")\n   *\n   * @param url the discovery url used for login\n   */\n  setOverrideDiscoveryUrl(url: string) {\n    return this.implementation.setOverrideDiscoveryUrl(url);\n  }\n\n  /**\n   * Clear previosly persisted override of the discovery url used for login.\n   *\n   * @example\n   * myAuthService.clearOverrideDiscoveryUrl()\n   */\n  clearOverrideDiscoveryUrl() {\n    return this.implementation.clearOverrideDiscoveryUrl();\n  }\n\n  /**\n   * Clear previosly persisted override of the discovery url used for login.\n   *\n   * @example\n   * myAuthService.getOverrideDiscoveryUrl()\n   */\n  getOverrideDiscoveryUrl() {\n    return this.implementation.getOverrideDiscoveryUrl();\n  }\n\n  /**\n   * Get the time the access token will expire in milliseconds from the epoch.\n   *\n   * @example\n   * myAuthService.getAccessTokenExpiration()\n   */\n  getAccessTokenExpiration() {\n    return this.implementation.getAccessTokenExpiration();\n  }\n\n  /**\n   * Event handler which can be overridden to handle successful login events.\n   *\n   * @usage\n   * ```typescript\n   * async onLoginSuccess(): Promise<void> {\n   *  // do something here\n   * }\n   * ```\n   * @param result the auth result from a successful login\n   */\n  onLoginSuccess(result: AuthResult): void {}\n\n  /**\n   * Event handler which can be overridden to handle successful logout events.\n   *\n   * @usage\n   * ```typescript\n   * async onLogout(): Promise<void> {\n   *  // do something here\n   * }\n   * ```\n   */\n  onLogout(): void {}\n\n  getImplementation(options: IonicAuthOptions) {\n    switch (options.platform) {\n      case 'web':\n        return new IonicAuthWeb<IDToken>(options, {\n          onLoginSuccess: this.onLoginSuccess.bind(this),\n          onLogout: this.onLogout.bind(this),\n        });\n      default:\n        return new IonicNativeAuth<IDToken>(options, {\n          onLoginSuccess: this.onLoginSuccess.bind(this),\n          onLogout: this.onLogout.bind(this),\n        });\n    }\n  }\n}\n"]}