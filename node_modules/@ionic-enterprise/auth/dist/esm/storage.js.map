{"version":3,"file":"storage.js","sourceRoot":"","sources":["../../src/storage.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  TokenStorageProvider,\n  IVUserInterface,\n  VaultInterface,\n  IV5UserInterface,\n} from './interfaces';\nimport { logging } from './logging';\n\nabstract class BaseStorage {\n  protected accessTokenKey = '_ionicAuth.accessToken';\n  protected refreshTokenKey = '_ionicAuth.refreshToken';\n  protected idTokenKey = '_ionicAuth.idToken';\n  protected authResponseKey = '_ionicAuth.authResponse';\n  setClientId(clientId: string) {\n    this.accessTokenKey = this.accessTokenKey + '.' + clientId;\n    this.refreshTokenKey = this.refreshTokenKey + '.' + clientId;\n    this.idTokenKey = this.idTokenKey + '.' + clientId;\n    this.authResponseKey = this.authResponseKey + '.' + clientId;\n  }\n\n  // some keys need to be store per token, helper to ensure consistency\n  formatKeyForToken(keyName: string, tokenName?: string): string {\n    return tokenName ? this.accessTokenKey + '.' + tokenName : this.accessTokenKey;\n  }\n}\n\nexport const isTokenStorageProvider = (obj: any): obj is TokenStorageProvider => {\n  const provider = obj as TokenStorageProvider;\n  return (\n    (typeof provider === 'object' &&\n      provider.getAccessToken &&\n      typeof provider.getAccessToken === 'function') ||\n    (provider.getAuthResponse && typeof provider.getAuthResponse === 'function') ||\n    (provider.getIdToken && typeof provider.getIdToken === 'function') ||\n    (provider.getRefreshToken && typeof provider.getRefreshToken === 'function') ||\n    (provider.setAccessToken && typeof provider.setAccessToken === 'function') ||\n    (provider.setAuthResponse && typeof provider.setAuthResponse === 'function') ||\n    (provider.setIdToken && typeof provider.setIdToken === 'function') ||\n    (provider.setRefreshToken && typeof provider.setRefreshToken === 'function') ||\n    false\n  );\n};\n\nexport const isIV5UserInterface = (obj: any): obj is IV5UserInterface => {\n  const provider = obj as IV5UserInterface;\n  return (\n    provider.getValue &&\n    typeof provider.getValue === 'function' &&\n    provider.setValue &&\n    typeof provider.setValue === 'function' &&\n    provider.clear &&\n    typeof provider.clear === 'function' &&\n    provider.onLock &&\n    typeof provider.onLock === 'function'\n  );\n};\n\nexport class AuthIdentityVault5Storage extends BaseStorage implements TokenStorageProvider {\n  constructor(private vault: IV5UserInterface) {\n    super();\n  }\n\n  /**\n   * get the saved access token\n   */\n  async getAccessToken(tokenName?: string): Promise<string | undefined> {\n    const key = this.formatKeyForToken(this.accessTokenKey, tokenName);\n    logging.debug('getAccessToken key:', key);\n    return (await this.vault.getValue<string>(key)) ?? undefined;\n  }\n\n  /**\n   * save the access token\n   */\n  async setAccessToken(accessToken: string | undefined, tokenName?: string) {\n    const key = this.formatKeyForToken(this.accessTokenKey, tokenName);\n    logging.debug('setAccessToken: key: ', key);\n    return this.vault.setValue(key, accessToken);\n  }\n\n  /**\n   * get the saved refresh token\n   */\n  async getRefreshToken(): Promise<string | undefined> {\n    return (await this.vault.getValue(this.refreshTokenKey)) ?? undefined;\n  }\n\n  /**\n   * save the refresh token\n   */\n  async setRefreshToken(refreshToken: string) {\n    return this.vault.setValue(this.refreshTokenKey, refreshToken);\n  }\n\n  /**\n   * get the id token\n   */\n  async getIdToken(): Promise<string | undefined> {\n    return (await this.vault.getValue(this.idTokenKey)) ?? undefined;\n  }\n\n  /**\n   * save the id token\n   */\n  async setIdToken(idToken: string) {\n    return this.vault.setValue(this.idTokenKey, idToken);\n  }\n\n  /**\n   * get the full auth result\n   */\n  async getAuthResponse() {\n    return this.vault.getValue(this.authResponseKey);\n  }\n\n  /**\n   * save the full auth response\n   */\n  async setAuthResponse(response: any) {\n    return this.vault.setValue(this.authResponseKey, response);\n  }\n\n  async clear() {\n    return this.vault.clear();\n  }\n\n  onLock(callback: () => void) {\n    this.vault.onLock(callback);\n  }\n}\n\nexport class AuthIdentityVaultStorage extends BaseStorage implements TokenStorageProvider {\n  constructor(private iv: IVUserInterface) {\n    super();\n  }\n\n  private async ensureVaultConfigured(setPasscodeIfNeeded: boolean): Promise<VaultInterface> {\n    const vault = await this.iv.getVault();\n    const ivConfig = await vault.getConfig();\n    if (ivConfig.isPasscodeSetupNeeded && setPasscodeIfNeeded) {\n      await this.iv.setPasscode();\n    }\n    return vault;\n  }\n\n  /**\n   * get the saved access token\n   */\n  async getAccessToken(tokenName?: string): Promise<string | undefined> {\n    const key = this.formatKeyForToken(this.accessTokenKey, tokenName);\n    logging.debug('getAccessToken: key: ', key);\n    const vault = await this.ensureVaultConfigured(false);\n    return vault.getValue(key);\n  }\n\n  /**\n   * save the access token\n   */\n  async setAccessToken(accessToken: string | undefined, tokenName?: string) {\n    const key = this.formatKeyForToken(this.accessTokenKey, tokenName);\n    logging.debug('setAccessToken: key: ', key);\n    const vault = await this.ensureVaultConfigured(true);\n    return vault.storeValue(key, accessToken);\n  }\n\n  /**\n   * get the saved refresh token\n   */\n  async getRefreshToken(): Promise<string | undefined> {\n    const vault = await this.ensureVaultConfigured(false);\n    return vault.getValue(this.refreshTokenKey);\n  }\n\n  /**\n   * save the refresh token\n   */\n  async setRefreshToken(refreshToken: string) {\n    const vault = await this.ensureVaultConfigured(true);\n    return vault.storeValue(this.refreshTokenKey, refreshToken);\n  }\n\n  /**\n   * get the id token\n   */\n  async getIdToken(): Promise<string | undefined> {\n    const vault = await this.ensureVaultConfigured(false);\n    return vault.getValue(this.idTokenKey);\n  }\n\n  /**\n   * save the id token\n   */\n  async setIdToken(idToken: string) {\n    const vault = await this.ensureVaultConfigured(true);\n    return vault.storeValue(this.idTokenKey, idToken);\n  }\n\n  /**\n   * get the full auth result\n   */\n  async getAuthResponse() {\n    const vault = await this.ensureVaultConfigured(false);\n    return vault.getValue(this.authResponseKey);\n  }\n\n  /**\n   * save the full auth response\n   */\n  async setAuthResponse(response: any) {\n    const vault = await this.ensureVaultConfigured(true);\n    return vault.storeValue(this.authResponseKey, response);\n  }\n\n  async clear() {\n    const vault = await this.iv.getVault();\n    return vault.clear();\n  }\n}\n\nexport class AuthLocalStorage extends BaseStorage implements TokenStorageProvider {\n  /**\n   * get the saved access token\n   */\n  async getAccessToken(tokenName?: string): Promise<string | undefined> {\n    const key = this.formatKeyForToken(this.accessTokenKey, tokenName);\n    const accessToken = localStorage.getItem(key);\n    return accessToken || undefined;\n  }\n\n  /**\n   * save the access token\n   */\n  async setAccessToken(accessToken: string, tokenName?: string) {\n    const key = this.formatKeyForToken(this.accessTokenKey, tokenName);\n    return localStorage.setItem(key, accessToken);\n  }\n\n  /**\n   * get the saved refresh token\n   */\n  async getRefreshToken(): Promise<string | undefined> {\n    const refreshToken = localStorage.getItem(this.refreshTokenKey);\n    return refreshToken || undefined;\n  }\n\n  /**\n   * save the refresh token\n   */\n  async setRefreshToken(refreshToken: string) {\n    return localStorage.setItem(this.refreshTokenKey, refreshToken);\n  }\n\n  /**\n   * get the id token\n   */\n  async getIdToken(): Promise<string | undefined> {\n    const idToken = localStorage.getItem(this.idTokenKey);\n    return idToken || undefined;\n  }\n\n  /**\n   * save the id token\n   */\n  async setIdToken(idToken: string) {\n    return localStorage.setItem(this.idTokenKey, idToken);\n  }\n\n  /**\n   * get the full auth result\n   */\n  async getAuthResponse() {\n    const authResponseString = localStorage.getItem(this.authResponseKey);\n    if (authResponseString) {\n      try {\n        return JSON.parse(authResponseString);\n      } catch (e) {\n        logging.error(`auth response of ${authResponseString} is not valid json`);\n      }\n    }\n  }\n\n  /**\n   * save the full auth response\n   */\n  async setAuthResponse(response: any) {\n    try {\n      const authRespString = JSON.stringify(response);\n      return localStorage.setItem(this.authResponseKey, authRespString);\n    } catch (e) {}\n  }\n\n  async clear() {\n    localStorage.removeItem(this.accessTokenKey);\n    localStorage.removeItem(this.refreshTokenKey);\n    localStorage.removeItem(this.idTokenKey);\n    localStorage.removeItem(this.authResponseKey);\n  }\n}\n"]}