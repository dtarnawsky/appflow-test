import { UrlInfo } from './UrlInfo';
import { logging } from './logging';
import { http } from './http';
export class UrlHelper {
    static buildUrl(url, options) {
        const params = new URLSearchParams(options);
        const urlObj = new URL(url);
        params.forEach((val, key) => urlObj.searchParams.append(key, val));
        logging.debug(urlObj.href, this.logTag, 'buildUrl: ');
        return new UrlInfo(urlObj.href);
    }
    static parseHash(urlHash) {
        let params = {};
        let queries;
        let temp;
        let i;
        let l;
        if (urlHash[0] === '#') {
            urlHash = urlHash.slice(1);
        }
        // Split into key/value pairs
        queries = urlHash.split('&');
        // Convert the array of strings into an object
        for (i = 0, l = queries.length; i < l; i++) {
            temp = queries[i].split('=');
            params[temp[0]] = temp[1];
        }
        return params;
    }
    static post(url, data, headers) {
        logging.debug('UrlHelper::Post');
        return new Promise((resolve, reject) => {
            return http.post(url, data, headers, resolve, reject);
        });
    }
    static get(url) {
        logging.debug('UrlHelper::Post');
        return new Promise(function (resolve, reject) {
            return http.get(url, resolve, reject);
        });
    }
}
UrlHelper.logTag = 'UrlHelper: ';
//# sourceMappingURL=urlHelper.js.map