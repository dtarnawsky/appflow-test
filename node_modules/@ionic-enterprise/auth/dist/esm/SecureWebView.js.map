{"version":3,"file":"SecureWebView.js","sourceRoot":"","sources":["../../src/SecureWebView.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,aAAa;IACxB,WAAW,CAAC,QAA4B;QACtC,IAAI,YAAY,GAAG,SAAS,YAAY,CAAC,KAAU;YACjD,mDAAmD;YACnD,2DAA2D;YAC3D,qCAAqC;YACrC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,EAAE,eAAe,EAAE,aAAa,EAAE,EAAE,CAAC,CAAC;IAC3E,CAAC;IAED,WAAW;IACX,wBAAwB;IACxB,sHAAsH;IACtH,+EAA+E;IAC/E,yEAAyE;IACzE,yEAAyE;IACzE,kDAAkD;IAElD,IAAI,CAAC,OAAwB,EAAE,SAA6B,EAAE,OAA0B;QACtF,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;YACvC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;SACzB;QACD,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,eAAe,EAAE,MAAM,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IACvE,CAAC;IAED,IAAI,CAAC,SAA6B,EAAE,OAA0B;QAC5D,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,eAAe,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAChE,CAAC;IAED,sBAAsB,CAAC,SAA6B,EAAE,OAA0B;QAC9E,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,eAAe,EAAE,wBAAwB,EAAE,EAAE,CAAC,CAAC;IAClF,CAAC;IAED,2BAA2B,CACzB,WAAmB,EACnB,SAA6B,EAC7B,OAA0B;QAE1B,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,eAAe,EAAE,6BAA6B,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;IAClG,CAAC;IAED,gBAAgB,CAAC,SAA6B,EAAE,OAA0B;QACxE,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,eAAe,EAAE,kBAAkB,EAAE,EAAE,CAAC,CAAC;IAC5E,CAAC;IAED,MAAM,CAAC,SAA6B,EAAE,OAA0B;QAC9D,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;IAClE,CAAC;IAED,YAAY,CAAC,GAAW,EAAE,SAA6B,EAAE,OAA0B;QACjF,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,eAAe,EAAE,cAAc,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3E,CAAC;CACF;AAED,MAAM,CAAC,MAAM,kBAAkB,GAAG,IAAI,aAAa,EAAE,CAAC","sourcesContent":["export class SecureWebView {\n  isAvailable(callback: (data: any) => any) {\n    var errorHandler = function errorHandler(error: any) {\n      // An error has occurred while trying to access the\n      // SecureWebView native implementation, most likely because\n      // we are on an unsupported platform.\n      callback(false);\n    };\n    cordova.exec(callback, errorHandler, 'SecureWebView', 'isAvailable', []);\n  }\n\n  // options:\n  //  url - url to display\n  //  webView - for iOS which webview to display, if possible. By default we use the newest one available for OS version\n  //      - ASWebAuth - ASWebAuthenticationSession (avaialble starting in iOS 12)\n  //      - SFAuth - SFAuthenticationSession (available starting in iOS 11)\n  //      - SFSafari - SFSafariViewController (available starting in iOS 9)\n  //      - MobileSafari - Mobile Safari (pre-iOS 8)\n\n  show(options: any | undefined, onSuccess: (data: any) => any, onError: (err: any) => any) {\n    options = options || {};\n    if (!options.hasOwnProperty('animated')) {\n      options.animated = true;\n    }\n    cordova.exec(onSuccess, onError, 'SecureWebView', 'show', [options]);\n  }\n\n  hide(onSuccess: (data: any) => any, onError: (err: any) => any) {\n    cordova.exec(onSuccess, onError, 'SecureWebView', 'hide', []);\n  }\n\n  getViewHandlerPackages(onSuccess: (data: any) => any, onError: (err: any) => any) {\n    cordova.exec(onSuccess, onError, 'SecureWebView', 'getViewHandlerPackages', []);\n  }\n\n  useCustomTabsImplementation(\n    packageName: string,\n    onSuccess: (data: any) => any,\n    onError: (err: any) => any,\n  ) {\n    cordova.exec(onSuccess, onError, 'SecureWebView', 'useCustomTabsImplementation', [packageName]);\n  }\n\n  connectToService(onSuccess: (data: any) => any, onError: (err: any) => any) {\n    cordova.exec(onSuccess, onError, 'SecureWebView', 'connectToService', []);\n  }\n\n  warmUp(onSuccess: (data: any) => any, onError: (err: any) => any) {\n    cordova.exec(onSuccess, onError, 'SecureWebView', 'warmUp', []);\n  }\n\n  mayLaunchUrl(url: string, onSuccess: (data: any) => any, onError: (err: any) => any) {\n    cordova.exec(onSuccess, onError, 'SecureWebView', 'mayLaunchUrl', [url]);\n  }\n}\n\nexport const IonicSecureWebView = new SecureWebView();\n"]}