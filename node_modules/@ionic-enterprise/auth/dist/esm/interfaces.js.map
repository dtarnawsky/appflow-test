{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../src/interfaces.ts"],"names":[],"mappings":"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","sourcesContent":["import { logging, Logger } from './logging';\nimport { UrlHelper } from './urlHelper';\nimport { UrlInfo } from './UrlInfo';\nimport { generateChallengeAndVerifier } from './crypto-helper';\n\n/**\n * @hidden\n */\nexport interface IHandlers {\n  onLoginSuccess(result: AuthResult): void;\n  onLogout(): void;\n}\n\n/**\n * @hidden\n */\nexport interface IVConfig {\n  isPasscodeSetupNeeded: boolean;\n}\n\n/**\n * @hidden\n */\nexport interface VaultInterface {\n  getConfig(): Promise<IVConfig>;\n  getValue(name: string): Promise<any>;\n  storeValue(name: string, value: any): Promise<any>;\n  clear(): Promise<void>;\n}\n\n/**\n * @hidden\n */\nexport interface IVUserInterface {\n  getVault(): Promise<VaultInterface>;\n  setPasscode(): Promise<void>;\n}\n\nexport interface IV5UserInterface {\n  getValue<T = any>(key: string): Promise<T | null>;\n  setValue<T = any>(key: string, value: T): Promise<void>;\n  clear(): Promise<void>;\n  onLock(callback: () => void): void;\n}\n\n/**\n *\n * Provided by the hosting app, this interface allows the hosting app to configure,\n *   and provide information needed to login, logout.\n */\nexport interface IonicAuthOptions {\n  /**\n   * - Type: `string`\n   *\n   * Provided Application ID\n   */\n  clientID: string;\n\n  /**\n   * - Type: `string`\n   *\n   * Location that the hosting app expects logout callbacks to navigate to.\n   */\n  logoutUrl: string;\n\n  /**\n   * - Type: `string`\n   *\n   * Location that the hosting app expects callbacks to navigate to.\n   */\n  redirectUri?: string;\n\n  /**\n   * - Type: `string`\n   *\n   * User details requested from the Authentication provider, each provider may\n   *   support standard {e.g. openid, profile, email, etc.}, or custom scopes.\n   */\n  scope?: string;\n\n  /**\n   * - Type: `string`\n   *\n   * Provided audience (aud) value\n   */\n  audience?: string;\n\n  /**\n   * - Type: `localStorage` | {@link TokenStorageProvider}\n   *\n   * The type of storage to use for the tokens\n   */\n  tokenStorageProvider?: 'localStorage' | TokenStorageProvider | IVUserInterface;\n\n  /**\n   * - Type: `string`\n   *\n   * Location of the Auth Server's discovery endpoint, can be null for Azure\n   */\n  discoveryUrl?: string;\n\n  /**\n   * - Type: `web` | `cordova` | `capacitor`\n   *\n   * Are we hosted in cordova, web, capacitor\n   */\n  platform?: 'web' | 'cordova' | 'capacitor';\n\n  /**\n   * - Type: `auth0` | `azure` | `cognito` | `identity-server` | `keycloak` | `okta` | `ping` | `salesforce` | `onelogin` | `general`\n   *\n   * The type of the Auth Server, currently only the following are supported:\n   *\n   *  * Auth0\n   *  * Azure Active Directory: `azure\n   *  * Cognito (AWS)\n   *  * Identity Server\n   *  * Keycloak\n   *  * Okta\n   *  * Ping\n   *  * Salesforce\n   *  * OneLogin\n   *\n   * 'general' is deprecated--please use a specific provider.\n   */\n  authConfig?:\n    | 'auth0'\n    | 'azure'\n    | 'cognito'\n    | 'salesforce'\n    | 'okta'\n    | 'ping'\n    | 'identity-server'\n    | 'keycloak'\n    | 'onelogin'\n    | 'general';\n\n  /**\n   * @hidden\n   */\n  clientSecret?: string;\n\n  /**\n   * - Type: `DEBUG` | `ERROR` | `NONE`\n   *\n   * The log level for the module\n   */\n  logLevel?: 'DEBUG' | 'ERROR' | 'NONE';\n\n  /**\n   * - Type: `private` | `shared` | `safari`\n   *\n   * * `private` - Avoids the prompt but the session will only be shared with Safari on iOS 10 or lower.\n   * * `shared` - Allows for sharing a session between Safari and other applications\n   * for a true SSO experience between apps but on iOS 11 and higher it will prompt the user for\n   * permission to share the website data with the application.\n   * * `safari` - Will start authentication flow externally in the Safari browser.\n   */\n  iosWebView?: 'private' | 'shared' | 'safari';\n\n  /**\n   * - Type: `string`\n   *\n   * setting to allow the toolbar color of the android webview control to be set. Takes a string that can be parsed as\n   * a color by `android.graphics.Color.parseColor`\n   */\n  androidToolbarColor?: string;\n\n  /**\n   * - Type: `CURRENT` | `POPUP`\n   *\n   * determines the UI mode to use with web authentication in implicit. \"CURRENT\" will replace the current window with the authentication provider, and \"POPUP\" will open the authentication provider in a new window/tab.\n   * When this is set to \"CURRENT\", you will need to use the {@link handleLoginCallback} and {@link handleLogoutCallback} to complete the auth\n   */\n  implicitLogin?: 'CURRENT' | 'POPUP';\n\n  /**\n   * - Type: `implicit` | `PKCE`\n   *\n   * Authentication flow to use on web\n   * defaults to: `implicit`\n   */\n  webAuthFlow?: 'implicit' | 'PKCE';\n\n  /**\n   * - Type: {@link ISafariWebViewOptions}\n   *\n   * Additional configuration options to pass to the Safari Web View when iosWebView is set to \"private\".\n   */\n  safariWebViewOptions?: ISafariWebViewOptions;\n}\n\n/**\n * Configuration options to pass to the Safari Web View.\n */\nexport interface ISafariWebViewOptions {\n  /**\n   * - Type: `done` | `close` | `cancel`\n   *\n   * Configures the label of the dismiss button (\"done\", \"close\", or \"cancel\"). Defaults to \"Done\".\n   */\n  dismissButtonStyle?: 'done' | 'close' | 'cancel';\n  /**\n   * - Type: `string`\n   *\n   * The color to tint the background of the navigation bar and the toolbar. Must be in hex (#000000) format.\n   */\n  preferredBarTintColor?: string;\n  /**\n   * - Type: `string`\n   *\n   * The color to tint the control buttons on the navigation bar and the toolbar. Must be in hex (#000000) format.\n   */\n  preferredControlTintColor?: string;\n}\n\n/**\n * @hidden\n */\nexport interface IonicGeneralAuthOptions extends IonicAuthOptions {\n  /**\n   * should the 'client_secret' value always be passed in for login calls, regardless of implict(web) or not\n   *  defaults to: true\n   */\n  alwaysSendClientSecretOnLogin?: boolean;\n}\n\n/**\n * @hidden\n */\nexport interface IIonicAuth<IDTokenType extends {} = any> {\n  /**\n   * Using configuration display the auth provider's login UI.\n   *\n   *  @param overrideUrl The overrideUrl parameter should only be used when the default\n   *  discovery url needs to be overrode. (The known use case is with Azure AD\n   *  custom user flows/policies.)\n   */\n  login(overrideUrl?: string): Promise<void>;\n\n  additionalLoginParameters(parameters: { [id: string]: string }): void;\n\n  getAccessToken(tokenName?: string, scopes?: string): Promise<string | undefined>;\n\n  getRawIdToken(): Promise<string | undefined>;\n\n  getIdToken(): Promise<IDTokenType | undefined>;\n\n  getAuthResponse(): Promise<any | undefined>;\n\n  isAccessTokenAvailable(tokenName?: string): Promise<boolean>;\n\n  isAccessTokenExpired(): Promise<boolean>;\n\n  isRefreshTokenAvailable(): Promise<boolean>;\n\n  getRefreshToken(): Promise<string | undefined>;\n\n  refreshSession(tokenName?: string): Promise<void>;\n\n  isAuthenticated(): Promise<boolean>;\n\n  logout(): Promise<void>;\n\n  expire(): Promise<void>;\n\n  handleLoginCallback(url?: string): Promise<AuthResult>;\n\n  handleLogoutCallback(): Promise<void>;\n\n  handleCallback(url: string): Promise<AuthResult>;\n\n  onLoginSuccess(response: any): void;\n\n  onLogout(): void;\n\n  clearStorage(): Promise<void>;\n\n  setOverrideDiscoveryUrl(url: string): Promise<void>;\n\n  clearOverrideDiscoveryUrl(): Promise<void>;\n\n  getOverrideDiscoveryUrl(): Promise<string | undefined>;\n\n  getAccessTokenExpiration(): Promise<number | undefined>;\n}\n\n/**\n * This interface can be implemented by the hosting app, and set in the options\n *   it should be a wrapper around access to a secure storage solution if\n *   <a href=\"https://ionic.io/docs/identity-vault\" target={null} rel={null}>Ionic Identity Vault</a> is not being used.\n */\nexport interface TokenStorageProvider {\n  /**\n   * Get the saved access token.\n   *\n   * @example\n   * storage.getAccessToken()\n   *\n   * @param tokenName Optional token name, only used when multiple tokens are required (Azure specific feature).\n   */\n  getAccessToken?: (tokenName?: string) => Promise<string | undefined>;\n\n  /**\n   * Save the access token.\n   *\n   * @example\n   * storage.saveAccessToken(\"123abcString\", \"mytoken\")\n   *\n   * @param tokenName Optional token name, only used when multiple tokens are required (Azure specific feature).\n   */\n  setAccessToken?: (accessToken: string, tokenName?: string) => Promise<void>;\n\n  /**\n   * Get the saved refresh token.\n   *\n   * @example\n   * storage.getRefreshToken()\n   */\n  getRefreshToken?: () => Promise<string | undefined>;\n\n  /**\n   * Save the refresh token.\n   *\n   * @example\n   * storage.setRefreshToken(\"123abcString\")\n   */\n  setRefreshToken?: (refreshToken: string) => Promise<void>;\n\n  /**\n   * Get the id token.\n   *\n   * @example\n   * storage.getIdToken()\n   */\n  getIdToken?: () => Promise<string | undefined>;\n\n  /**\n   * Save the id token.\n   *\n   * @example\n   * storage.setIdToken(\"123abcString\")\n   */\n  setIdToken?: (idToken: string) => Promise<void>;\n\n  /**\n   * Get the full auth result.\n   *\n   * @example\n   * storage.getAuthResponse()\n   */\n  getAuthResponse?: () => Promise<any>;\n\n  /**\n   * Save the full auth response.\n   *\n   * @example\n   * storage.setAuthResponse(\"OK\")\n   */\n  setAuthResponse?: (response: any) => Promise<void>;\n\n  /**\n   * Clear storage.\n   *\n   * @example\n   * storage.clear()\n   */\n  clear?: () => Promise<void>;\n\n  /**\n   * Specify a callback to be called when the vault locks.\n   *\n   * @example\n   * storage.onLock(() => {\n   *   // do stuff\n   * });\n   */\n  onLock?: (callback: () => void) => void;\n}\n\n////\n// internal classes and data structures\n////\n\n/**\n * @hidden\n */\nexport interface AuthResult {\n  expiresIn?: number;\n  accessToken?: string;\n  idToken?: string;\n  refreshToken?: string;\n  scope?: string;\n  tokenType?: string;\n}\n\nconst ready = new Promise<void>(resolve => {\n  const DEVICE_READY_TIMEOUT = 5000;\n  const readyTimeout = setTimeout(() => {\n    console.warn(`Auth Connect: deviceready did not fire within ${DEVICE_READY_TIMEOUT}ms.`);\n    resolve();\n  }, DEVICE_READY_TIMEOUT);\n\n  document.addEventListener('deviceready', () => {\n    clearTimeout(readyTimeout);\n    resolve();\n  });\n});\n\n/**\n * @hidden\n */\nexport abstract class IonicAuthConfig {\n  locations: any;\n  defaultDiscoveryUrl: string;\n  overrideDiscoveryUrl: string;\n  currentDiscoveryUrl: string;\n  logger: Logger;\n  private logTag: string = 'IonicAuthConfig';\n\n  constructor(public options: IonicAuthOptions) {\n    this.defaultDiscoveryUrl = '';\n    this.overrideDiscoveryUrl = '';\n    this.currentDiscoveryUrl = '';\n    this.locations = undefined;\n    logging.setLogLevel(options.logLevel);\n    this.logger = logging;\n  }\n\n  abstract getAuthorizeUrl(\n    nonce: string,\n    challenge: string,\n    parameters: { [id: string]: string },\n  ): Promise<UrlInfo>;\n  abstract getLogoutUrl(): Promise<UrlInfo>;\n  abstract getTokenUrl(): Promise<UrlInfo>;\n\n  generateChallengeAndVerifier(): Promise<{\n    verifier: string;\n    challenge: string;\n  }> {\n    return generateChallengeAndVerifier();\n  }\n\n  private validateLocations(): boolean {\n    if (this.locations === undefined) {\n      this.logger.debug(this.logTag, 'locations undefined');\n      return false;\n    }\n    // we have locations loaded are they the right ones? yep, unless we have an override\n    if (this.overrideDiscoveryUrl === undefined || this.overrideDiscoveryUrl === '') {\n      this.logger.debug(this.logTag, 'override discovery url empty or null');\n      return true;\n    }\n    this.logger.debug(this.logTag, 'override discovery url: ', this.overrideDiscoveryUrl);\n\n    // does the current equal the override?\n    if (this.overrideDiscoveryUrl !== this.currentDiscoveryUrl) {\n      this.logger.debug(this.logTag, 'override not eq current discovery url');\n      return false;\n    }\n\n    this.logger.debug(this.logTag, 'all ok?');\n    return true;\n  }\n\n  async loadLocations(): Promise<void> {\n    if (this.validateLocations()) {\n      return;\n    }\n\n    this.currentDiscoveryUrl = this.overrideDiscoveryUrl;\n    if (this.currentDiscoveryUrl === '') {\n      this.currentDiscoveryUrl = this.options.discoveryUrl || this.defaultDiscoveryUrl;\n    }\n\n    this.logger.debug(this.logTag, 'discoveryUrl: ', this.currentDiscoveryUrl);\n    if (this.options.platform === 'cordova' || this.options.platform === 'capacitor') {\n      // validate?\n      await ready;\n      try {\n        const result = await UrlHelper.get(this.currentDiscoveryUrl);\n        this.logger.debug(this.logTag, 'result.data: ', result);\n        this.locations = JSON.parse(result.data);\n      } catch (err) {\n        throw new Error(err.error);\n      }\n    } else {\n      const resp = await fetch(this.currentDiscoveryUrl);\n      this.locations = await resp.json(); // Transform the data into json\n      this.logger.debug(this.logTag, 'locations resp: ', this.locations);\n    }\n  }\n\n  async getIssuer(): Promise<string> {\n    await this.loadLocations();\n    return this.locations['issuer'];\n  }\n}\n"]}