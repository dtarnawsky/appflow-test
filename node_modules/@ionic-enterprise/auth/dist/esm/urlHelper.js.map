{"version":3,"file":"urlHelper.js","sourceRoot":"","sources":["../../src/urlHelper.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AA6B9B,MAAM,OAAO,SAAS;IAEpB,MAAM,CAAC,QAAQ,CAAC,GAAW,EAAE,OAAiC;QAC5D,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,OAAO,CAAC,CAAC;QAC5C,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;QAC5B,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QACnE,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QACtD,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,OAAe;QAC9B,IAAI,MAAM,GAAgC,EAAE,CAAC;QAC7C,IAAI,OAAiB,CAAC;QACtB,IAAI,IAAc,CAAC;QACnB,IAAI,CAAS,CAAC;QACd,IAAI,CAAS,CAAC;QACd,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YACtB,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SAC5B;QAED,6BAA6B;QAC7B,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE7B,8CAA8C;QAC9C,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1C,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;SAC3B;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,GAAW,EAAE,IAAS,EAAE,OAAY;QAC9C,OAAO,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACjC,OAAO,IAAI,OAAO,CAAe,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,GAAW;QACpB,OAAO,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACjC,OAAO,IAAI,OAAO,CAAe,UAAU,OAAO,EAAE,MAAM;YACxD,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;;AA1CM,gBAAM,GAAG,aAAa,CAAC","sourcesContent":["import { UrlInfo } from './UrlInfo';\nimport { logging } from './logging';\nimport { http } from './http';\n\nexport interface HTTPResponse {\n  /**\n   * The status number of the response\n   */\n  status: number;\n\n  /**\n   * The headers of the response\n   */\n  headers: any;\n\n  /**\n   * The URL of the response. This property will be the final URL obtained after any redirects.\n   */\n  url: string;\n\n  /**\n   * The data that is in the response. This property usually exists when a promise returned by a request method resolves.\n   */\n  data?: any;\n\n  /**\n   * Error response from the server. This property usually exists when a promise returned by a request method rejects.\n   */\n  error?: string;\n}\n\nexport class UrlHelper {\n  static logTag = 'UrlHelper: ';\n  static buildUrl(url: string, options: { [index: string]: any }): UrlInfo {\n    const params = new URLSearchParams(options);\n    const urlObj = new URL(url);\n    params.forEach((val, key) => urlObj.searchParams.append(key, val));\n    logging.debug(urlObj.href, this.logTag, 'buildUrl: ');\n    return new UrlInfo(urlObj.href);\n  }\n\n  static parseHash(urlHash: string): { [index: string]: string } {\n    let params: { [index: string]: string } = {};\n    let queries: string[];\n    let temp: string[];\n    let i: number;\n    let l: number;\n    if (urlHash[0] === '#') {\n      urlHash = urlHash.slice(1);\n    }\n\n    // Split into key/value pairs\n    queries = urlHash.split('&');\n\n    // Convert the array of strings into an object\n    for (i = 0, l = queries.length; i < l; i++) {\n      temp = queries[i].split('=');\n      params[temp[0]] = temp[1];\n    }\n    return params;\n  }\n\n  static post(url: string, data: any, headers: any): Promise<HTTPResponse> {\n    logging.debug('UrlHelper::Post');\n    return new Promise<HTTPResponse>((resolve, reject) => {\n      return http.post(url, data, headers, resolve, reject);\n    });\n  }\n\n  static get(url: string): Promise<HTTPResponse> {\n    logging.debug('UrlHelper::Post');\n    return new Promise<HTTPResponse>(function (resolve, reject) {\n      return http.get(url, resolve, reject);\n    });\n  }\n}\n"]}