package com.ionicframework.IdentityVault;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Build;
import android.util.Base64;
import android.util.Log;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import java.nio.charset.StandardCharsets;
import java.security.KeyStore;
import java.security.SecureRandom;
import javax.crypto.Cipher;
import org.json.JSONException;
import org.json.JSONObject;

@RequiresApi(api = Build.VERSION_CODES.M)
public class DeviceSecurityStrongVault extends VaultBase {

    protected boolean invalidated = false;

    protected Cipher masterKeyCipher;
    protected String masterPasscode;

    public DeviceSecurityStrongVault(IdentityVaultConfig config, AppCompatActivity activity) {
        super(config, activity);
    }

    public void setIsInvalidated(boolean invalid) {
        this.invalidated = invalid;
    }

    protected boolean isAESPairedKeyEncrypted() throws VaultError {
        try {
            KeyStore keyStore = KeyStore.getInstance("AndroidKeyStore");
            keyStore.load(null);
            boolean hasEncryptKey = keyStore.containsAlias(biometricCypherKey + "-encrypt_key");
            boolean hasDecryptKey = keyStore.containsAlias(biometricCypherKey + "-decrypt_key");
            return (hasEncryptKey && hasDecryptKey);
        } catch (Exception e) {
            e.printStackTrace();
            throw new VaultError(e.getLocalizedMessage());
        }
    }

    @Override
    protected String getVaultType() {
        return VaultType.DEVICE_SECURITY;
    }

    @Override
    protected String getVaultStrength() {
        return VaultStrength.STRONG;
    }

    @Override
    public void clear() throws VaultError {
        super.clear();
        this.masterKeyCipher = null;
        this.masterPasscode = null;
        this.invalidated = false;
        if (this.isAESPairedKeyEncrypted()) {
            BiometricCipherHelper.removeKey(biometricCypherKey + "-encrypt_key");
            BiometricCipherHelper.removeKey(biometricCypherKey + "-decrypt_key");
        }
    }

    @Override
    public void lock(boolean wasTimeout) {
        this.masterKeyCipher = null;
        this.masterPasscode = null;
        super.lock(wasTimeout);
    }

    @Override
    public void unlock(boolean forceUnlock) throws VaultError {
        if (this.isLocked()) {
            if (this.doesVaultExist() || forceUnlock) {
                if (this.invalidated) {
                    throw new MismatchedDeviceSecurityVault(this.config);
                }

                if (this.masterKeyCipher == null) {
                    boolean isEmpty = this.isEmpty();
                    boolean isPendingVault = StateStore.pendingVault != null;
                    if ((isEmpty && !this.doesVaultExist()) || isPendingVault) {
                        setupEncryption();
                        if (!isPendingVault) {
                            super.unlock(forceUnlock);
                        }
                    } else {
                        throw new MissingBiometricsError();
                    }
                } else {
                    super.unlock(forceUnlock);
                    if (!isAESPairedKeyEncrypted()) {
                        BiometricCipherHelper.removeKey(biometricCypherKey);
                        setupEncryption();
                        this.storeData();
                    }
                }
            }
        }
    }

    @Override
    protected void storeData() throws VaultError {
        if (this.invalidated) {
            throw new MismatchedDeviceSecurityVault(this.config);
        }

        super.storeData();
    }

    private void setupEncryption() throws VaultError {
        long startTime = System.nanoTime();

        this.masterPasscode = PairedAESKeysHelper.generateSecurePassword();
        String encryptedMasterPasscode = PairedAESKeysHelper.encryptMasterPasscode(
            biometricCypherKey,
            this.config.deviceSecurityType,
            this.masterPasscode
        );
        SharedPreferences pref = this.activity.getSharedPreferences(dataSharedPrefsName, Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = pref.edit();
        editor.putString("mk", encryptedMasterPasscode);
        editor.apply();

        long endTime = System.nanoTime();
        Log.i("IV", "DeviceSecurityStrongVault setupEncryption() took: " + ((endTime - startTime) / 1000000) + "ms");
    }

    @Override
    protected void clearStoredData() throws VaultError {
        SharedPreferences pref = this.activity.getSharedPreferences(dataSharedPrefsName, Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = pref.edit();
        editor.remove("mk");
        editor.apply();
        super.clearStoredData();
    }

    public void setMasterKeyCipher(Cipher cipher) throws VaultError {
        this.masterKeyCipher = cipher;
        if (this.isAESPairedKeyEncrypted()) {
            try {
                SharedPreferences pref = this.activity.getSharedPreferences(dataSharedPrefsName, Context.MODE_PRIVATE);
                String encryptedPasscode = pref.getString("mk", null);
                if (encryptedPasscode != null) {
                    JSONObject jsonObject = new JSONObject(encryptedPasscode);
                    byte[] encryptedKeyBytes = PairedAESKeysHelper.encodeBase64StringToBytes(jsonObject.getString("encryptedPassword"));
                    byte[] securePasswordBytes = cipher.doFinal(encryptedKeyBytes);
                    this.masterPasscode = Base64.encodeToString(securePasswordBytes, Base64.NO_WRAP);
                } else {
                    throw new Exception("No master passcode entry found");
                }
            } catch (Exception e) {
                e.printStackTrace();
                throw new VaultError(e.getLocalizedMessage());
            }
        } else {
            String passcode = this.loadMasterPasscode(cipher);
            if (passcode != null) {
                this.masterPasscode = passcode;
            } else {
                String randomPasscode = this.getRandomPasscode();
                this.masterPasscode = randomPasscode;
                this.storeMasterPasscode(randomPasscode);
            }
        }
    }

    public boolean doesMasterPasscodeExist() {
        SharedPreferences pref = this.activity.getSharedPreferences(dataSharedPrefsName, Context.MODE_PRIVATE);
        String encryptedDataJson = pref.getString("mk", null);
        return encryptedDataJson != null;
    }

    public String getIVString() throws VaultError {
        try {
            SharedPreferences pref = this.activity.getSharedPreferences(dataSharedPrefsName, Context.MODE_PRIVATE);
            String encryptedDataJson = pref.getString("mk", null);
            if (encryptedDataJson == null) {
                return null;
            }
            JSONObject jsonObject = new JSONObject(encryptedDataJson);
            return jsonObject.getString("iv");
        } catch (JSONException e) {
            e.printStackTrace();
            throw new VaultError(e.getLocalizedMessage());
        }
    }

    public CryptoData getMasterKeyCryptoData() throws VaultError {
        try {
            SharedPreferences pref = this.activity.getSharedPreferences(dataSharedPrefsName, Context.MODE_PRIVATE);
            String encryptedDataJson = pref.getString("mk", null);
            if (encryptedDataJson == null) {
                return null;
            }
            return CryptoData.create(encryptedDataJson);
        } catch (JSONException e) {
            e.printStackTrace();
            throw new VaultError(e.getLocalizedMessage());
        }
    }

    private String loadMasterPasscode(Cipher cipher) throws VaultError {
        try {
            CryptoData cryptoData = this.getMasterKeyCryptoData();

            if (cryptoData == null) {
                return null;
            }

            byte[] decryptedDataBytes = cipher.doFinal(cryptoData.data);

            return new String(decryptedDataBytes, StandardCharsets.UTF_8);
        } catch (Exception e) {
            e.printStackTrace();
            throw new VaultError(e.getLocalizedMessage());
        }
    }

    private String getRandomPasscode() {
        String chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";
        int length = 64;
        SecureRandom secureRandom = new SecureRandom();
        StringBuilder sb = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
            sb.append(chars.charAt(secureRandom.nextInt(chars.length())));
        }
        return sb.toString();
    }

    private void storeMasterPasscode(String passcode) throws VaultError {
        try {
            SharedPreferences pref = this.activity.getSharedPreferences(dataSharedPrefsName, Context.MODE_PRIVATE);
            SharedPreferences.Editor editor = pref.edit();
            byte[] iv = this.masterKeyCipher.getIV();
            byte[] dataBytes = passcode.getBytes(StandardCharsets.UTF_8);
            byte[] encryptedBytes = this.masterKeyCipher.doFinal(dataBytes);
            CryptoData cryptoData = CryptoData.create(encryptedBytes, iv, new byte[0]);
            editor.putString("mk", cryptoData.toJSON());
            editor.apply();
        } catch (Exception e) {
            e.printStackTrace();
            throw new VaultError(e.getLocalizedMessage());
        }
    }
}
