package com.ionicframework.IdentityVault;

import androidx.annotation.Nullable;
import java.util.HashMap;
import org.json.JSONException;
import org.json.JSONObject;

public class VaultErrors {

    public static final int ERR_UNHANDLED = 0;
    public static final int ERR_VAULT_LOCKED = 1;
    public static final int ERR_VAULT_UNAVAILABLE = 2;
    public static final int ERR_INVALID_ARGUMENTS = 3;
    public static final int ERR_INVALIDATED_CREDENTIALS = 4;
    public static final int ERR_SECURITY_NOT_AVAILABLE = 5;
    public static final int ERR_AUTH_FAILED = 6;
    public static final int ERR_TOO_MANY_FAILED_ATTEMPTS = 7;
    public static final int ERR_USER_CANCELED_AUTH = 8;
    public static final int ERR_MISMATCHED_PASSCODE = 9;
    public static final int ERR_MISSING_PASSCODE = 10;
    public static final int ERR_PASSCODE_NOT_ENABLED = 11;
    public static final int ERR_KEY_NOT_FOUND = 12;
    public static final int ERR_BIOMETRICS_NOT_ENABLED = 13;
    public static final int ERR_INVALID_AUTH_MODE = 14;
    public static final int ERR_MISSING_BIOMETRICS = 15;
    public static final int ERR_SYSTEM_PASSCODE_NOT_AVAILABLE = 16;
    public static final int ERR_BIOMETRICS_LOCKED_OUT = 17;
    public static final int ERR_KEYSTORE = 19;
    public static final int ERR_MISMATCHED_DEVICE_SECURITY_VAULT = 20;

    public static JSONObject toJSON(VaultError e) {
        if (e instanceof VaultLockedError) {
            return VaultErrors.getJSON(ERR_VAULT_LOCKED, "Operation not allowed while vault locked.");
        } else if (e instanceof VaultUnavailableError) {
            return VaultErrors.getJSON(ERR_VAULT_UNAVAILABLE, "Vault Unavailable: Make sure you've configured the vault.");
        } else if (e instanceof InvalidArgumentsError) {
            String defaultErr = "Invalid Arguments Provided: ";
            String detail = e.getMessage();
            String err = detail == null ? defaultErr : defaultErr + detail;
            return VaultErrors.getJSON(ERR_INVALID_ARGUMENTS, err);
        } else if (e instanceof InvalidatedCredentialsError) {
            return VaultErrors.getJSON(ERR_INVALIDATED_CREDENTIALS, "Credentials invalidated or expired. Vault cleared.");
        } else if (e instanceof SecurityNotAvailableError) {
            return VaultErrors.getJSON(ERR_SECURITY_NOT_AVAILABLE, "Biometric Security unavailable.");
        } else if (e instanceof AuthFailedError) {
            return VaultErrors.getJSON(ERR_AUTH_FAILED, "Failed authorization attempt");
        } else if (e instanceof TooManyFailedAttemptsError) {
            return VaultErrors.getJSON(ERR_TOO_MANY_FAILED_ATTEMPTS, "Too many failed attempts. Vault cleared.");
        } else if (e instanceof UserCanceledAuthError) {
            return VaultErrors.getJSON(ERR_USER_CANCELED_AUTH, "User canceled auth attempt.");
        } else if (e instanceof MismatchedPasscodeError) {
            return VaultErrors.getJSON(ERR_MISMATCHED_PASSCODE, "Passcodes did not match.");
        } else if (e instanceof MissingPasscodeError) {
            return VaultErrors.getJSON(
                ERR_MISSING_PASSCODE,
                "Passcode not setup yet. You must call setPasscode prior to storing values if passcode is enabled",
                ((MissingPasscodeError) e).extra
            );
        } else if (e instanceof PasscodeNotEnabledError) {
            return VaultErrors.getJSON(ERR_PASSCODE_NOT_ENABLED, "Passcode not enabled.");
        } else if (e instanceof KeyNotFoundError) {
            return VaultErrors.getJSON(ERR_KEY_NOT_FOUND, "Key Not Found");
        } else if (e instanceof BiometricsNotEnabledError) {
            return VaultErrors.getJSON(ERR_BIOMETRICS_NOT_ENABLED, "Biometric auth is not enabled");
        } else if (e instanceof InvalidAuthModeError) {
            return VaultErrors.getJSON(ERR_INVALID_AUTH_MODE, "Invalid Auth Mode");
        } else if (e instanceof MissingBiometricsError) {
            return VaultErrors.getJSON(ERR_MISSING_BIOMETRICS, "Biometrics not authed yet");
        } else if (e instanceof SystemPasscodeNotAvailableError) {
            return VaultErrors.getJSON(
                ERR_SYSTEM_PASSCODE_NOT_AVAILABLE,
                "Option SystemPasscode for deviceSecurityType not available on this device"
            );
        } else if (e instanceof BiometricsLockedOutError) {
            return VaultErrors.getJSON(ERR_BIOMETRICS_LOCKED_OUT, "Biometrics have been locked due to too many attempts");
        } else if (e instanceof UnexpectedKeystoreError) {
            String defaultErr = "Unexpected Android Keystore Error: ";
            String detail = e.getMessage();
            String err = detail == null ? defaultErr : defaultErr + detail;

            return VaultErrors.getJSON(ERR_KEYSTORE, err);
        } else if (e instanceof MismatchedDeviceSecurityVault) {
            return VaultErrors.getJSON(ERR_MISMATCHED_DEVICE_SECURITY_VAULT, "");
        } else {
            String defaultErr = "Unhandled Error: ";
            String detail = e.getMessage();
            String err = detail == null ? defaultErr : defaultErr + detail;
            return VaultErrors.getJSON(ERR_UNHANDLED, err);
        }
    }

    private static JSONObject getJSON(int code, String msg) {
        return VaultErrors.getJSON(code, msg, null);
    }

    private static JSONObject getJSON(int code, String msg, HashMap<String, Object> extra) {
        JSONObject ret = new JSONObject();
        try {
            ret.put("code", code);
            ret.put("message", msg);
            if (extra != null) {
                JSONObject jsonObject = new JSONObject(extra);
                ret.put("extra", jsonObject);
            }
            return ret;
        } catch (JSONException e) {
            return ret;
        }
    }
}

class VaultError extends Throwable {

    public HashMap<String, Object> extra;

    VaultError() {}

    VaultError(String msg) {
        super(msg);
    }

    public int getErrorCode() {
        return 0;
    }
}

class VaultLockedError extends VaultError {

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_VAULT_LOCKED;
    }
}

class VaultUnavailableError extends VaultError {

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_VAULT_UNAVAILABLE;
    }
}

class InvalidArgumentsError extends VaultError {

    InvalidArgumentsError(String msg) {
        super(msg);
    }

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_INVALID_ARGUMENTS;
    }
}

class InvalidatedCredentialsError extends VaultError {

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_INVALIDATED_CREDENTIALS;
    }
}

class SecurityNotAvailableError extends VaultError {

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_SECURITY_NOT_AVAILABLE;
    }
}

class AuthFailedError extends VaultError {

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_AUTH_FAILED;
    }
}

class TooManyFailedAttemptsError extends VaultError {

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_TOO_MANY_FAILED_ATTEMPTS;
    }
}

class UserCanceledAuthError extends VaultError {

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_USER_CANCELED_AUTH;
    }
}

class MismatchedPasscodeError extends VaultError {

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_MISMATCHED_PASSCODE;
    }
}

class MissingPasscodeError extends VaultError {

    MissingPasscodeError(boolean isPasscodeSetRequest) {
        this.extra = new HashMap<>();
        this.extra.put("isPasscodeSetRequest", isPasscodeSetRequest);
    }

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_MISSING_PASSCODE;
    }
}

class PasscodeNotEnabledError extends VaultError {

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_PASSCODE_NOT_ENABLED;
    }
}

class KeyNotFoundError extends VaultError {

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_KEY_NOT_FOUND;
    }
}

class BiometricsNotEnabledError extends VaultError {

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_BIOMETRICS_NOT_ENABLED;
    }
}

class InvalidAuthModeError extends VaultError {

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_INVALID_AUTH_MODE;
    }
}

class MissingBiometricsError extends VaultError {

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_MISSING_BIOMETRICS;
    }
}

class SystemPasscodeNotAvailableError extends VaultError {

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_SYSTEM_PASSCODE_NOT_AVAILABLE;
    }
}

class BiometricsLockedOutError extends VaultError {

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_BIOMETRICS_LOCKED_OUT;
    }
}

class UnexpectedKeystoreError extends VaultError {

    UnexpectedKeystoreError(String msg) {
        super(msg);
    }

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_KEYSTORE;
    }
}

class MismatchedDeviceSecurityVault extends VaultError {

    IdentityVaultConfig config;

    MismatchedDeviceSecurityVault(IdentityVaultConfig invalidConfig) {
        super();
        this.config = invalidConfig;
    }

    @Override
    public int getErrorCode() {
        return VaultErrors.ERR_MISMATCHED_DEVICE_SECURITY_VAULT;
    }
}
