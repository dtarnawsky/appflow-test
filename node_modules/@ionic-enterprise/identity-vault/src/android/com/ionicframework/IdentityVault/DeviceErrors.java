package com.ionicframework.IdentityVault;

import org.json.JSONException;
import org.json.JSONObject;

public class DeviceErrors {

    public static final int ERR_UNHANDLED = 0;
    public static final int ERR_INVALID_ARGUMENTS = 1;
    public static final int ERR_USER_CANCELED_AUTH = 2;
    public static final int ERR_SECURITY_NOT_AVAILABLE = 3;
    public static final int ERR_AUTH_FAILED = 4;
    public static final int ERR_BIOMETRICS_LOCKED_OUT = 5;
    public static final int ERR_BIOMETRICS_NOT_ENABLED = 6;

    public static JSONObject toJSON(DeviceError e) {
        if (e instanceof DeviceInvalidArgumentsError) {
            String defaultErr = "Invalid Arguments Provided: ";
            String detail = e.getMessage();
            String err = detail == null ? defaultErr : defaultErr + detail;
            return DeviceErrors.getJSON(ERR_INVALID_ARGUMENTS, err);
        } else if (e instanceof DeviceUserCanceledAuthError) {
            return DeviceErrors.getJSON(ERR_USER_CANCELED_AUTH, "User canceled auth attempt.");
        } else if (e instanceof DeviceSecurityNotAvailableError) {
            return DeviceErrors.getJSON(ERR_SECURITY_NOT_AVAILABLE, "Biometric Security unavailable.");
        } else if (e instanceof DeviceAuthFailedError) {
            return DeviceErrors.getJSON(ERR_AUTH_FAILED, "Failed authorization attempt");
        } else if (e instanceof DeviceBiometricsLockedOutError) {
            return DeviceErrors.getJSON(ERR_BIOMETRICS_LOCKED_OUT, "Biometrics have been locked due to too many attempts");
        } else if (e instanceof DeviceBiometricsNotEnabledError) {
            return DeviceErrors.getJSON(ERR_BIOMETRICS_NOT_ENABLED, "Biometric auth is not enabled");
        } else {
            String defaultErr = "Unhandled Error: ";
            String detail = e.getMessage();
            String err = detail == null ? defaultErr : defaultErr + detail;
            return DeviceErrors.getJSON(ERR_UNHANDLED, err);
        }
    }

    private static JSONObject getJSON(int code, String msg) {
        JSONObject ret = new JSONObject();
        try {
            ret.put("code", code);
            ret.put("message", msg);
            return ret;
        } catch (JSONException e) {
            return ret;
        }
    }
}

class DeviceError extends Throwable {

    DeviceError() {}

    DeviceError(String msg) {
        super(msg);
    }

    public int getErrorCode() {
        return 0;
    }
}

class DeviceInvalidArgumentsError extends DeviceError {

    DeviceInvalidArgumentsError(String msg) {
        super(msg);
    }
}

class DeviceUserCanceledAuthError extends DeviceError {

    @Override
    public int getErrorCode() {
        return DeviceErrors.ERR_USER_CANCELED_AUTH;
    }
}

class DeviceAuthFailedError extends DeviceError {

    @Override
    public int getErrorCode() {
        return DeviceErrors.ERR_AUTH_FAILED;
    }
}

class DeviceBiometricsLockedOutError extends DeviceError {

    @Override
    public int getErrorCode() {
        return DeviceErrors.ERR_BIOMETRICS_LOCKED_OUT;
    }
}

class DeviceSecurityNotAvailableError extends DeviceError {

    @Override
    public int getErrorCode() {
        return DeviceErrors.ERR_SECURITY_NOT_AVAILABLE;
    }
}

class DeviceBiometricsNotEnabledError extends DeviceError {

    @Override
    public int getErrorCode() {
        return DeviceErrors.ERR_BIOMETRICS_NOT_ENABLED;
    }
}
