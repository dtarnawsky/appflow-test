package com.ionicframework.IdentityVault;

import android.app.Activity;
import android.content.Intent;
import android.os.Build;
import android.util.Log;
import androidx.annotation.RequiresApi;
import androidx.arch.core.util.Function;
import java.util.HashMap;
import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CordovaWebView;
import org.apache.cordova.PluginResult;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

@RequiresApi(api = Build.VERSION_CODES.M)
public class VaultPlugin extends CordovaPlugin {

    private static final int REQUEST_CODE_BIOMETRIC = 65500;
    private CallbackContext biometricCallbackContext;
    private final HashMap<String, CallbackContext> errorCallbacks = new HashMap<>();

    private final VaultManager vaultManager = new VaultManager();

    public void initialize(CordovaInterface cordova, CordovaWebView webView) {
        super.initialize(cordova, webView);
    }

    @Override
    public void onStop() {
        super.onStop();
        this.vaultManager.vaultManagerAppEnteredBackground();
    }

    public boolean execute(String action, JSONArray args, final CallbackContext callbackContext) {
        switch (action) {
            case "appResumed":
                appResumed(args, callbackContext);
                break;
            case "clear":
                clear(args, callbackContext);
                break;
            case "doesVaultExist":
                doesVaultExists(args, callbackContext);
                break;
            case "exportVault":
                exportVault(args, callbackContext);
                break;
            case "getKeys":
                getKeys(args, callbackContext);
                break;
            case "getValue":
                getValue(args, callbackContext);
                break;
            case "getVaultConfig":
                getVaultConfig(args, callbackContext);
                break;
            case "importVault":
                importVault(args, callbackContext);
                break;
            case "isEmpty":
                isEmpty(args, callbackContext);
                break;
            case "isLocked":
                isLocked(args, callbackContext);
                break;
            case "lock":
                lock(args, callbackContext);
                break;
            case "removeValue":
                removeValue(args, callbackContext);
                break;
            case "requestBiometricPrompt":
                requestBiometricPrompt(args, callbackContext);
                break;
            case "setCustomPasscode":
                setCustomPasscode(args, callbackContext);
                break;
            case "setup":
                setup(args, callbackContext);
                break;
            case "setValue":
                setValue(args, callbackContext);
                break;
            case "unlock":
                unlock(args, callbackContext);
                break;
            case "updateConfig":
                updateConfig(args, callbackContext);
                break;
            case "onConfigChanged":
                onConfigChanged(args, callbackContext);
                break;
            case "onLock":
                onLock(args, callbackContext);
                break;
            case "onUnlock":
                onUnlock(args, callbackContext);
                break;
            case "onError":
                onError(args, callbackContext);
                break;
            default:
                sendErrorResult(callbackContext, new VaultError("Method not found: " + action));
        }
        return true;
    }

    void appResumed(JSONArray args, CallbackContext callbackContext) {
        try {
            IdentityVaultConfig config = this.getConfig(args);
            this.vaultManager.vaultManagerAppResumed(config);
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        }
    }

    void clear(JSONArray args, CallbackContext callbackContext) {
        try {
            IdentityVaultConfig config = this.getConfig(args);
            this.vaultManager.clear(config);
            this.sendEmptyResult(callbackContext);
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        }
    }

    /** @deprecated Deprecated in favor of using the isEmpty method. */
    @Deprecated
    void doesVaultExists(JSONArray args, CallbackContext callbackContext) {
        try {
            IdentityVaultConfig config = this.getConfig(args);
            boolean data = this.vaultManager.doesVaultExist(config);
            this.sendResult(callbackContext, data ? "true" : "false");
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        }
    }

    void exportVault(JSONArray args, CallbackContext callbackContext) {
        try {
            IdentityVaultConfig config = this.getConfig(args);
            String json = this.vaultManager.exportVault(config);
            this.sendResult(callbackContext, json);
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        }
    }

    void importVault(JSONArray args, CallbackContext callbackContext) {
        try {
            IdentityVaultConfig config = this.getConfig(args);
            String json = this.getPositionalArg(args, 1, "json");
            this.vaultManager.importVault(config, json);
            this.sendEmptyResult(callbackContext);
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        }
    }

    void isEmpty(JSONArray args, CallbackContext callbackContext) {
        try {
            IdentityVaultConfig config = this.getConfig(args);
            boolean data = this.vaultManager.isEmpty(config);
            this.sendResult(callbackContext, data ? "true" : "false");
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        }
    }

    void isLocked(JSONArray args, CallbackContext callbackContext) {
        try {
            IdentityVaultConfig config = this.getConfig(args);
            boolean data = this.vaultManager.isLocked(config);
            this.sendResult(callbackContext, data ? "true" : "false");
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        }
    }

    void getKeys(JSONArray args, CallbackContext callbackContext) {
        try {
            IdentityVaultConfig config = this.getConfig(args);
            String data = this.vaultManager.getKeys(config);
            this.sendResult(callbackContext, data);
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        }
    }

    void getValue(JSONArray args, CallbackContext callbackContext) {
        try {
            IdentityVaultConfig config = this.getConfig(args);
            String key = this.getPositionalArg(args, 1, "key");
            String value = this.vaultManager.getValue(config, key);
            this.sendResult(callbackContext, value);
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        }
    }

    void getVaultConfig(JSONArray args, CallbackContext callbackContext) {
        try {
            IdentityVaultConfig config = this.getConfig(args);
            IdentityVaultConfig vaultConfig = this.vaultManager.getVaultConfig(config);
            this.sendResult(callbackContext, vaultConfig.toJSONObject().toString());
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        }
    }

    void lock(JSONArray args, CallbackContext callbackContext) {
        try {
            IdentityVaultConfig config = this.getConfig(args);
            this.vaultManager.lock(config);
            this.sendEmptyResult(callbackContext);
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        }
    }

    void requestBiometricPrompt(JSONArray args, CallbackContext callbackContext) {
        biometricCallbackContext = callbackContext;
        try {
            IdentityVaultConfig config = this.getConfig(args);
            cordova
                .getActivity()
                .runOnUiThread(
                    () -> {
                        Intent intent = new Intent(cordova.getActivity().getApplicationContext(), BiometricPromptActivity.class);
                        intent.putExtra("key", config.key);
                        this.cordova.startActivityForResult(this, intent, REQUEST_CODE_BIOMETRIC);
                    }
                );
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        }
    }

    void removeValue(JSONArray args, CallbackContext callbackContext) {
        try {
            IdentityVaultConfig config = this.getConfig(args);
            String key = this.getPositionalArg(args, 1, "key");
            this.vaultManager.removeValue(config, key);
            this.sendEmptyResult(callbackContext);
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        }
    }

    void setCustomPasscode(JSONArray args, CallbackContext callbackContext) {
        try {
            IdentityVaultConfig config = this.getConfig(args);
            String passcode = this.getPositionalArg(args, 1, "passcode");
            this.vaultManager.setCustomPasscode(config, passcode);
            this.sendEmptyResult(callbackContext);
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        }
    }

    void setValue(JSONArray args, CallbackContext callbackContext) {
        try {
            IdentityVaultConfig config = this.getConfig(args);
            String key = this.getPositionalArg(args, 1, "key");
            String value = this.getPositionalArg(args, 2, "value");
            this.vaultManager.setValue(config, key, value);
            this.sendEmptyResult(callbackContext);
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        } catch (ClassCastException e) {
            sendErrorResult(callbackContext, new InvalidArgumentsError("key must be a string"));
        }
    }

    void unlock(JSONArray args, CallbackContext callbackContext) {
        try {
            IdentityVaultConfig config = this.getConfig(args);
            this.vaultManager.unlock(config);
            this.sendEmptyResult(callbackContext);
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        }
    }

    void updateConfig(JSONArray args, CallbackContext callbackContext) {
        try {
            IdentityVaultConfig config = this.getConfig(args);
            this.vaultManager.updateConfig(config);
            this.sendEmptyResult(callbackContext);
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        }
    }

    void onConfigChanged(JSONArray args, CallbackContext callbackContext) {
        Function<IdentityVaultConfig, Void> callback = (IdentityVaultConfig c) -> {
            try {
                this.sendResult(callbackContext, c.toJSONObject().toString());
            } catch (VaultError e) {
                this.sendErrorResult(callbackContext, e);
            }

            return null;
        };

        this.vaultManager.onConfigChanged(callback);
    }

    void onLock(JSONArray args, CallbackContext callbackContext) {
        Function<Boolean, Void> callback = (Boolean timeout) -> {
            try {
                JSONObject jsonObject = new JSONObject();
                jsonObject.put("timeout", timeout);
                this.sendResult(callbackContext, jsonObject.toString(), true);
            } catch (JSONException e) {
                this.sendErrorResult(callbackContext, new VaultError(e.toString()));
            }

            return null;
        };

        try {
            IdentityVaultConfig config = this.getConfig(args);
            this.vaultManager.onLock(config, callback);
        } catch (VaultError e) {
            this.sendErrorResult(callbackContext, e);
        }
    }

    void onUnlock(JSONArray args, CallbackContext callbackContext) {
        Function<Void, Void> callback = (Void v) -> {
            this.sendEmptyResult(callbackContext, true);
            return null;
        };

        try {
            IdentityVaultConfig config = this.getConfig(args);
            this.vaultManager.onUnlock(config, callback);
        } catch (VaultError e) {
            this.sendErrorResult(callbackContext, e);
        }
    }

    void onError(JSONArray args, CallbackContext callbackContext) {
        Function<ErrorCallbackArgs, Void> callback = (ErrorCallbackArgs errorArgs) -> {
            PluginResult result = new PluginResult(PluginResult.Status.ERROR, errorArgs.error);
            result.setKeepCallback(true);

            CallbackContext errorCallback = this.errorCallbacks.get(errorArgs.vaultKey);
            if (errorCallback != null) {
                errorCallback.sendPluginResult(result);
                return null;
            }
            return null;
        };

        try {
            IdentityVaultConfig config = this.getConfig(args);
            this.errorCallbacks.put(config.key, callbackContext);

            this.vaultManager.onError(config, callback);
        } catch (VaultError e) {
            this.sendErrorResult(callbackContext, e);
        }
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        Log.d("IV", "in onActivityResult");
        Log.d("IV", "requestCode: " + requestCode);
        Log.d("IV", "REQUEST_CODE_BIOMETRIC: " + REQUEST_CODE_BIOMETRIC);
        Log.d("IV", "resultCode: " + resultCode);
        Log.d("IV", "Activity.RESULT_OK: " + Activity.RESULT_OK);
        Log.d("IV", "Intent data is null: " + (data == null));
        if (requestCode == REQUEST_CODE_BIOMETRIC) {
            if (resultCode == Activity.RESULT_OK) {
                this.sendEmptyResult(biometricCallbackContext);
            } else {
                String errorJson = "";
                try {
                    errorJson = data.getStringExtra("errorJson");
                    JSONObject jsonErrorObject = new JSONObject(errorJson);
                    this.sendErrorResult(biometricCallbackContext, jsonErrorObject);
                } catch (NullPointerException nex) {
                    nex.printStackTrace();
                    this.sendErrorResult(biometricCallbackContext, new VaultError());
                } catch (JSONException ex) {
                    ex.printStackTrace();
                    System.out.println(errorJson);
                    this.sendErrorResult(biometricCallbackContext, new VaultError());
                }
            }
            biometricCallbackContext = null;
        }
    }

    private void setup(JSONArray args, final CallbackContext callbackContext) {
        try {
            IdentityVaultConfig config = this.getConfig(args);
            this.vaultManager.setup(config, this.cordova.getActivity());
            this.sendEmptyResult(callbackContext);
        } catch (VaultError e) {
            sendErrorResult(callbackContext, e);
        }
    }

    private IdentityVaultConfig getConfig(JSONArray args) throws InvalidArgumentsError {
        try {
            JSONObject configJson = args.getJSONObject(0);
            return new IdentityVaultConfig(configJson);
        } catch (JSONException ex) {
            String theMessage = ex.getLocalizedMessage();
            if (theMessage.contains("No value for ")) {
                throw new InvalidArgumentsError(
                    String.format(
                        "Config object is missing the required '%s' property. [Docs: https://ionic.io/docs/identity-vault/interfaces/identityvaultconfig]",
                        theMessage.replace("No value for ", "")
                    )
                );
            } else {
                throw new InvalidArgumentsError(ex.getLocalizedMessage());
            }
        }
    }

    private void sendErrorResult(final CallbackContext callbackContext, VaultError error) {
        if (error instanceof MismatchedDeviceSecurityVault) {
            try {
                this.vaultManager.migrateDeviceSecurityVault(((MismatchedDeviceSecurityVault) error).config);
                throw new InvalidatedCredentialsError();
            } catch (VaultError vaultError) {
                sendErrorResult(callbackContext, vaultError);
            }
            return;
        }
        JSONObject jsonError = VaultErrors.toJSON(error);
        PluginResult result = new PluginResult(PluginResult.Status.ERROR, jsonError);
        result.setKeepCallback(false);
        callbackContext.sendPluginResult(result);
    }

    private void sendErrorResult(final CallbackContext callbackContext, JSONObject jsonError) {
        PluginResult result = new PluginResult(PluginResult.Status.ERROR, jsonError);
        result.setKeepCallback(false);
        callbackContext.sendPluginResult(result);
    }

    private void sendEmptyResult(final CallbackContext callbackContext) {
        this.sendEmptyResult(callbackContext, false);
    }

    private void sendEmptyResult(final CallbackContext callbackContext, Boolean keepCallback) {
        String nullString = null;
        // NOTE: use null string to get the correct PluginResult call signature
        PluginResult result = new PluginResult(PluginResult.Status.OK, nullString);
        result.setKeepCallback(keepCallback);
        callbackContext.sendPluginResult(result);
    }

    private void sendResult(final CallbackContext callbackContext, String value) {
        sendResult(callbackContext, value, false);
    }

    private void sendResult(final CallbackContext callbackContext, String value, Boolean keepCallback) {
        PluginResult result = new PluginResult(PluginResult.Status.OK, value);
        result.setKeepCallback(keepCallback);
        callbackContext.sendPluginResult(result);
    }

    private <T> T getPositionalArg(JSONArray args, int index, String name) throws InvalidArgumentsError {
        if (args.isNull(index)) {
            throw new InvalidArgumentsError(name + " missing");
        }
        return (T) args.opt(index);
    }
}
