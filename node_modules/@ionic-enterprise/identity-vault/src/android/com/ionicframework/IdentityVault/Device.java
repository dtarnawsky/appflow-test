package com.ionicframework.IdentityVault;

import android.app.Activity;
import android.app.KeyguardManager;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.security.keystore.KeyGenParameterSpec;
import android.security.keystore.KeyInfo;
import android.security.keystore.KeyProperties;
import android.util.Log;
import androidx.biometric.BiometricManager;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.security.spec.InvalidKeySpecException;
import java.util.Date;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import org.json.JSONArray;

public class Device {

    private final String TAG = "Device";
    private boolean mHideScreenOnBackgroundEnabled = false;
    private boolean mDimBackgroundBehindBiometricsEnabled = false;
    private boolean mBiometricsPermanentlyLocked = false;
    private Date mBiometricsLockedAt = null;

    public static Device device = null;

    private Device() {}

    public static Device getInstance() {
        if (device == null) {
            device = new Device();
        }

        return device;
    }

    public boolean isLockedOutOfBiometrics() {
        if (mBiometricsPermanentlyLocked) {
            return true;
        }

        if (mBiometricsLockedAt == null) {
            return false;
        }

        long elapsed = Math.abs(new Date().getTime() - this.mBiometricsLockedAt.getTime());
        if (elapsed > 30000) {
            clearBiometricsLock();
            return false;
        }
        return true;
    }

    public void setBiometricsLock() {
        this.mBiometricsLockedAt = new Date();
    }

    public void setPermanentBiometricsLock() {
        this.mBiometricsPermanentlyLocked = true;
    }

    public void clearBiometricsLock() {
        this.mBiometricsPermanentlyLocked = false;
        this.mBiometricsLockedAt = null;
    }

    public boolean isHideScreenOnBackgroundEnabled() {
        return this.mHideScreenOnBackgroundEnabled;
    }

    public boolean isDimBackgroundBehindBiometricsEnabled() {
        return this.mDimBackgroundBehindBiometricsEnabled;
    }

    public void setHideScreenOnBackgroundEnabled(boolean enabled, boolean dimBiometrics) {
        this.mHideScreenOnBackgroundEnabled = enabled;
        this.mDimBackgroundBehindBiometricsEnabled = dimBiometrics;
    }

    public boolean isDevicePasscodeSet(Activity activity) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            KeyguardManager manager = (KeyguardManager) activity.getSystemService(Context.KEYGUARD_SERVICE);
            return manager.isDeviceSecure();
        }

        Log.d(TAG, "Android Version less than M: Biometrics Not Enabled");
        return false;
    }

    public JSONArray getAvailableHardware(Activity activity) {
        final String FINGER = "fingerprint";
        final String IRIS = "iris";
        final String FACE = "face";

        JSONArray hardware = new JSONArray();
        PackageManager packageManager = activity.getPackageManager();

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (packageManager.hasSystemFeature(PackageManager.FEATURE_FINGERPRINT)) hardware.put(FINGER);
        }

        if (packageManager.hasSystemFeature(PackageManager.FEATURE_IRIS)) {
            hardware.put(IRIS);
        } else {
            // check if Samsung's Iris service is present
            try {
                PackageInfo irisSamsung = packageManager.getPackageInfo("com.samsung.android.server.iris", PackageManager.GET_META_DATA);
                hardware.put(IRIS);
            } catch (PackageManager.NameNotFoundException e) {
                // do nada
            }
        }

        if (packageManager.hasSystemFeature(PackageManager.FEATURE_FACE)) {
            hardware.put(FACE);
        } else {
            // check if Samsung's Face service is present
            try {
                PackageInfo faceSamsung = packageManager.getPackageInfo(
                    "com.samsung.android.bio.face.service",
                    PackageManager.GET_META_DATA
                );
                hardware.put(FACE);
            } catch (PackageManager.NameNotFoundException e) {
                // do nada
            }
        }

        return hardware;
    }

    public boolean isBiometricsEnabled(Activity activity) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            BiometricManager biometricManager = BiometricManager.from(activity.getApplicationContext());
            return biometricManager.canAuthenticate() == BiometricManager.BIOMETRIC_SUCCESS;
        }

        Log.d(TAG, "Android Version less than M: Biometrics Not Enabled");
        return false;
    }

    public boolean isBiometricsSupported(Activity activity) {
        if (!this.canUseKeychainAuthentication(activity.getApplicationContext())) {
            Log.d(TAG, "Keychain Auth Unavailable: Biometrics Unavailable");
            return false;
        }

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            BiometricManager biometricManager = BiometricManager.from(activity.getApplicationContext());
            // Device supports fingerprint authentication hardware & user has enrolled fingerprints
            return (
                biometricManager.canAuthenticate() != BiometricManager.BIOMETRIC_ERROR_NO_HARDWARE &&
                getAvailableHardware(activity).length() != 0
            );
        }
        Log.d(TAG, "Android Version less than M: Biometrics Unavailable");
        return false;
    }

    public String getBiometricStrengthLevel(Activity activity) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            BiometricManager biometricManager = BiometricManager.from(activity.getApplicationContext());
            if (biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_STRONG) == BiometricManager.BIOMETRIC_SUCCESS) {
                return "strong";
            }
        }
        return "weak";
    }

    public boolean hasSecureHardware(Context context) {
        try {
            if (Build.VERSION.SDK_INT >= 23) {
                String key = "iv_test_key";
                KeyStore keyStore = KeyStore.getInstance("AndroidKeyStore");
                keyStore.load(null);

                SecretKey secretKey = (SecretKey) keyStore.getKey(key, null);
                if (secretKey != null) {
                    keyStore.deleteEntry(key);
                }

                KeyGenerator keyGenerator = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, "AndroidKeyStore");
                KeyGenParameterSpec.Builder builder = new KeyGenParameterSpec.Builder(
                    key,
                    KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT
                )
                    .setBlockModes(KeyProperties.BLOCK_MODE_CBC)
                    .setUserAuthenticationRequired(false)
                    .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7);

                if (Build.VERSION.SDK_INT >= 28) {
                    boolean isStrongBoxBacked = context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_STRONGBOX_KEYSTORE);
                    builder.setIsStrongBoxBacked(isStrongBoxBacked);
                }

                keyGenerator.init(builder.build());
                secretKey = keyGenerator.generateKey();

                SecretKeyFactory factory = SecretKeyFactory.getInstance(secretKey.getAlgorithm(), "AndroidKeyStore");
                KeyInfo keyInfo = (KeyInfo) factory.getKeySpec(secretKey, KeyInfo.class);

                boolean isSecureHardware = keyInfo.isInsideSecureHardware();
                keyStore.deleteEntry(key);

                return isSecureHardware;
            }
        } catch (Exception ex) {
            System.out.println(ex.getLocalizedMessage());
        }

        return false;
    }

    private boolean canUseKeychainAuthentication(Context context) {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) return false;
        KeyguardManager keyguardManager = context.getSystemService(KeyguardManager.class);
        return keyguardManager.isKeyguardSecure();
    }
}
