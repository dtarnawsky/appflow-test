package com.ionicframework.IdentityVault;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.Resources;
import android.os.Build;
import android.view.WindowManager;
import androidx.appcompat.app.AppCompatActivity;
import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CordovaWebView;
import org.apache.cordova.PluginResult;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class DevicePlugin extends CordovaPlugin {

    private static final String TAG = "DevicePlugin";
    private static final String ACTION_LOCKOUT_RESET = "com.android.server.fingerprint.ACTION_LOCKOUT_RESET";
    private static final String ACTION_CLOSE_SYSTEM_DIALOGS = "android.intent.action.CLOSE_SYSTEM_DIALOGS";
    private static Device device;
    private static final int REQUEST_CODE_BIOMETRIC = 65500;
    private CallbackContext biometricCallbackContext;
    private static PrivacyScreenDialog dialog;

    private final BroadcastReceiver lockoutReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            if (ACTION_LOCKOUT_RESET.equals(intent.getAction())) {
                device.clearBiometricsLock();
            }
        }
    };

    private final BroadcastReceiver recentAppsReceiver = new BroadcastReceiver() {
        final String SYSTEM_DIALOG_REASON_KEY = "reason";
        final String SYSTEM_DIALOG_REASON_HOME_KEY = "homekey";
        final String SYSTEM_DIALOG_REASON_RECENT_APPS = "recentapps";
        final String SYSTEM_DIALOG_REASON_RECENT_APPS_XIAOMI = "fs_gesture";

        @Override
        public void onReceive(Context context, Intent intent) {
            if ((Build.VERSION.SDK_INT >= 31 || usesGestureNavigation(context)) && ACTION_CLOSE_SYSTEM_DIALOGS.equals(intent.getAction())) {
                String reason = intent.getStringExtra(SYSTEM_DIALOG_REASON_KEY);
                if (reason != null) {
                    switch (reason) {
                        case SYSTEM_DIALOG_REASON_HOME_KEY:
                        case SYSTEM_DIALOG_REASON_RECENT_APPS:
                        case SYSTEM_DIALOG_REASON_RECENT_APPS_XIAOMI:
                            onRecentAppsTriggered(true);
                            break;
                    }
                }
            }
        }
    };

    public void initialize(CordovaInterface cordova, CordovaWebView webView) {
        super.initialize(cordova, webView);
        device = Device.getInstance();
        cordova.getContext().registerReceiver(lockoutReceiver, new IntentFilter(ACTION_LOCKOUT_RESET), null, null);
        cordova.getContext().registerReceiver(recentAppsReceiver, new IntentFilter(ACTION_CLOSE_SYSTEM_DIALOGS), null, null);
    }

    @Override
    public void onPause(boolean multitasking) {
        super.onPause(multitasking);
        if (DevicePlugin.device.isHideScreenOnBackgroundEnabled()) {
            cordova.getActivity().getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
        }
    }

    @Override
    public void onResume(boolean multitasking) {
        super.onResume(multitasking);
        onRecentAppsTriggered(false);
        if (!usesGestureNavigation(cordova.getContext())) {
            cordova.getActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SECURE);
        } else if (DevicePlugin.device.isHideScreenOnBackgroundEnabled()) {
            cordova.getActivity().getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
        }
    }

    @Override
    public void onDestroy() {
        if (null != dialog) {
            dialog.dismiss();
            dialog = null;
        }
        cordova.getContext().unregisterReceiver(recentAppsReceiver);
        super.onDestroy();
    }

    public boolean execute(String action, JSONArray args, final CallbackContext callbackContext) {
        switch (action) {
            case "getAvailableHardware":
                getAvailableHardware(args, callbackContext);
                break;
            case "isSystemPasscodeSet":
                isSystemPasscodeSet(args, callbackContext);
                break;
            case "isBiometricsEnabled":
                isBiometricsEnabled(args, callbackContext);
                break;
            case "isBiometricsSupported":
                isBiometricsSupported(args, callbackContext);
                break;
            case "getBiometricStrengthLevel":
                getBiometricStrengthLevel(args, callbackContext);
                break;
            case "isHideScreenOnBackgroundEnabled":
                isHideScreenOnBackgroundEnabled(args, callbackContext);
                break;
            case "setHideScreenOnBackground":
                setHideScreenOnBackground(args, callbackContext);
                break;
            case "isLockedOutOfBiometrics":
                isLockedOutOfBiometrics(args, callbackContext);
                break;
            case "isBiometricsAllowed":
                isBiometricsAllowed(args, callbackContext);
                break;
            case "hasSecureHardware":
                hasSecureHardware(args, callbackContext);
                break;
            case "showBiometricPrompt":
                showBiometricPrompt(args, callbackContext);
            default:
                break;
        }

        return true;
    }

    private void getAvailableHardware(JSONArray args, CallbackContext callbackContext) {
        JSONArray hardware = device.getAvailableHardware(cordova.getActivity());
        success(callbackContext, hardware);
    }

    private void isLockedOutOfBiometrics(JSONArray args, CallbackContext callbackContext) {
        boolean isLockedOut = device.isLockedOutOfBiometrics();
        success(callbackContext, isLockedOut);
    }

    private void getBiometricStrengthLevel(JSONArray args, CallbackContext callbackContext) {
        String level = device.getBiometricStrengthLevel(cordova.getActivity());
        success(callbackContext, level);
    }

    private void isHideScreenOnBackgroundEnabled(JSONArray args, CallbackContext callbackContext) {
        boolean isEnabled = device.isHideScreenOnBackgroundEnabled();
        success(callbackContext, isEnabled);
    }

    private void hasSecureHardware(JSONArray args, CallbackContext callbackContext) {
        boolean isSecure = device.hasSecureHardware(cordova.getContext());
        success(callbackContext, isSecure);
    }

    private void showBiometricPrompt(JSONArray args, CallbackContext callbackContext) {
        biometricCallbackContext = callbackContext;
        try {
            String configJson = args.getJSONObject(0).toString();

            cordova
                .getActivity()
                .runOnUiThread(
                    () -> {
                        Intent intent = new Intent(cordova.getActivity().getApplicationContext(), NonVaultBiometricPromptActivity.class);
                        intent.putExtra("promptConfig", configJson);
                        this.cordova.startActivityForResult(this, intent, REQUEST_CODE_BIOMETRIC);
                    }
                );
        } catch (JSONException e) {
            error(callbackContext, new DeviceError(e.getLocalizedMessage()));
        }
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_CODE_BIOMETRIC) {
            if (resultCode == Activity.RESULT_OK) {
                this.success(biometricCallbackContext);
            } else {
                String errorJson = data.getStringExtra("errorJson");

                try {
                    JSONObject jsonErrorObject = new JSONObject(errorJson);
                    this.error(biometricCallbackContext, jsonErrorObject);
                } catch (JSONException ex) {
                    ex.printStackTrace();
                    System.out.println(errorJson);
                    this.error(biometricCallbackContext, new DeviceError());
                }
            }
            biometricCallbackContext = null;
        }
    }

    private void setHideScreenOnBackground(JSONArray args, CallbackContext callbackContext) {
        try {
            boolean enabledValue = args.getBoolean(0);
            boolean dimBiometrics = args.getBoolean(1);
            device.setHideScreenOnBackgroundEnabled(enabledValue, dimBiometrics);
            success(callbackContext);
        } catch (JSONException ex) {
            error(callbackContext, new DeviceError("could not parse boolean value for 'enabled'"));
        }
    }

    private void isSystemPasscodeSet(JSONArray args, CallbackContext callbackContext) {
        boolean isPasscodeSet = device.isDevicePasscodeSet(cordova.getActivity());
        success(callbackContext, isPasscodeSet);
    }

    private void isBiometricsEnabled(JSONArray args, CallbackContext callbackContext) {
        boolean isEnabled = device.isBiometricsEnabled(cordova.getActivity());
        success(callbackContext, isEnabled);
    }

    private void isBiometricsSupported(JSONArray args, CallbackContext callbackContext) {
        boolean isEnabled = device.isBiometricsSupported(cordova.getActivity());
        success(callbackContext, isEnabled);
    }

    private void isBiometricsAllowed(JSONArray args, CallbackContext callbackContext) {
        success(callbackContext, "granted");
    }

    private void success(final CallbackContext callbackContext, boolean val) {
        PluginResult result = new PluginResult(PluginResult.Status.OK, val);
        result.setKeepCallback(false);
        callbackContext.sendPluginResult(result);
    }

    private void success(final CallbackContext callbackContext, String val) {
        PluginResult result = new PluginResult(PluginResult.Status.OK, val);
        result.setKeepCallback(false);
        callbackContext.sendPluginResult(result);
    }

    private void success(final CallbackContext callbackContext, final JSONArray data) {
        JSONArray ret = (data == null) ? new JSONArray() : data;
        PluginResult result = new PluginResult(PluginResult.Status.OK, ret);
        result.setKeepCallback(false);
        callbackContext.sendPluginResult(result);
    }

    private void success(final CallbackContext callbackContext) {
        String nullString = null;
        // NOTE: use null string to get the correct PluginResult call signature
        PluginResult result = new PluginResult(PluginResult.Status.OK, nullString);
        result.setKeepCallback(false);
        callbackContext.sendPluginResult(result);
    }

    private void error(final CallbackContext callbackContext, DeviceError error) {
        JSONObject jsonError = DeviceErrors.toJSON(error);
        error(callbackContext, jsonError);
    }

    private void error(final CallbackContext callbackContext, JSONObject error) {
        PluginResult result = new PluginResult(PluginResult.Status.ERROR, error);
        result.setKeepCallback(false);
        callbackContext.sendPluginResult(result);
    }

    private boolean usesGestureNavigation(Context context) {
        Resources resources = context.getResources();
        int resourceId = resources.getIdentifier("config_navBarInteractionMode", "integer", "android");
        return resourceId > 0 && resources.getInteger(resourceId) == 2;
    }

    public void onRecentAppsTriggered(boolean isRecentAppsOpen) {
        if (device.isHideScreenOnBackgroundEnabled() && isRecentAppsOpen) {
            if (null != dialog && isDialogViewAttachedToWindowManager()) {
                dialog.dismiss();
                // Force dialog to be null to avoid `Unable to add Window` crash
                dialog = null;
            }
            Context context = cordova.getContext();
            dialog = new PrivacyScreenDialog(context);

            if (
                context instanceof AppCompatActivity &&
                !((AppCompatActivity) context).isFinishing() &&
                !dialog.isShowing() &&
                !isDialogViewAttachedToWindowManager()
            ) {
                dialog.show();
            }
        } else if (null != dialog) {
            dialog.dismiss();
            dialog = null;
        }
    }

    private boolean isDialogViewAttachedToWindowManager() {
        return (
            dialog.getWindow() != null && dialog.getWindow().getDecorView() != null && dialog.getWindow().getDecorView().getParent() != null
        );
    }
}
