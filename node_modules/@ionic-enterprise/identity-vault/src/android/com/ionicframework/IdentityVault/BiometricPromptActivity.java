package com.ionicframework.IdentityVault;

import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.WindowManager;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.biometric.BiometricManager;
import androidx.biometric.BiometricPrompt;
import java.util.concurrent.Executor;
import javax.crypto.Cipher;

@RequiresApi(api = Build.VERSION_CODES.M)
public class BiometricPromptActivity extends AppCompatActivity {

    private BiometricPrompt biometricPrompt;
    private BiometricPrompt.PromptInfo promptInfo;
    private VaultBase vault;

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        if (Device.getInstance().isHideScreenOnBackgroundEnabled()) {
            if (Device.getInstance().isDimBackgroundBehindBiometricsEnabled()) {
                getWindow().addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
            } else {
                try {
                    final int resourceId = getResources().getIdentifier("splash", "drawable", getPackageName());
                    final int themeId = getResources().getIdentifier("Splash", "style", getPackageName());

                    setTheme(themeId);
                    getWindow().getDecorView().findViewById(android.R.id.content).setBackgroundResource(resourceId);
                } catch (Exception e) {
                    getWindow().addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
                }
            }
        }

        super.onCreate(savedInstanceState);

        Intent intent = getIntent();
        String key = intent.getStringExtra("key");

        this.vault = VaultManager.getVault(key);

        if (StateStore.pendingVault != null) {
            if (StateStore.pendingVault instanceof DeviceSecurityStrongVault) {
                DeviceSecurityStrongVault strongVault = (DeviceSecurityStrongVault) StateStore.pendingVault;
                if (strongVault.masterKeyCipher == null) {
                    this.vault = strongVault;
                }
            }

            if (StateStore.pendingVault instanceof DeviceSecurityWeakVault) {
                DeviceSecurityWeakVault weakVault = (DeviceSecurityWeakVault) StateStore.pendingVault;
                if (!weakVault.isAuthed()) {
                    this.vault = weakVault;
                }
            }
        }

        setTitle(null);
        if (savedInstanceState != null) {
            return;
        }
        this.biometricPrompt = this.createBiometricPrompt();
        this.promptInfo = this.createPromptInfo(this.vault.config);
        this.authenticate();
    }

    private void authenticate() {
        try {
            if (Device.getInstance().isLockedOutOfBiometrics()) {
                throw new BiometricsLockedOutError();
            }
            if (this.vault instanceof DeviceSecurityStrongVault) {
                DeviceSecurityStrongVault strongVault = (DeviceSecurityStrongVault) this.vault;
                Cipher cipher;

                if (strongVault.isAESPairedKeyEncrypted()) {
                    String iv = strongVault.getIVString();
                    cipher = PairedAESKeysHelper.getDecryptionCipher(this.vault.biometricCypherKey, iv);
                } else {
                    CryptoData masterKeyCryptoData = strongVault.getMasterKeyCryptoData();
                    if (masterKeyCryptoData != null) {
                        cipher =
                            BiometricCipherHelper.getCypherForDecryption(
                                this.vault.biometricCypherKey,
                                vault.config.deviceSecurityType,
                                masterKeyCryptoData.iv,
                                this
                            );
                    } else {
                        cipher =
                            BiometricCipherHelper.getCypherForEncryption(
                                this.vault.biometricCypherKey,
                                vault.config.deviceSecurityType,
                                this
                            );
                    }
                }
                this.biometricPrompt.authenticate(this.promptInfo, new BiometricPrompt.CryptoObject(cipher));
            } else {
                this.biometricPrompt.authenticate(this.promptInfo);
            }
        } catch (VaultError vaultError) {
            if (vaultError instanceof InvalidatedCredentialsError) {
                try {
                    this.vault.clear();
                    BiometricCipherHelper.removeKey(this.vault.biometricCypherKey);
                } catch (VaultError ex) {
                    ex.printStackTrace();
                }
            }

            this.vault.handleError(vaultError);

            System.out.println(vaultError.getErrorCode());
            Intent data = new Intent();
            data.putExtra("errorJson", VaultErrors.toJSON(vaultError).toString());
            setResult(RESULT_CANCELED, data);
            finish();
        }
    }

    private BiometricPrompt createBiometricPrompt() {
        final Handler handler = new Handler(Looper.getMainLooper());
        Executor executor = handler::post;
        BiometricPrompt.AuthenticationCallback authenticationCallback = new BiometricPrompt.AuthenticationCallback() {
            /**
             * Called when authentication fails after multiple attempts.
             */
            @Override
            public void onAuthenticationError(int errorCode, @NonNull CharSequence errString) {
                super.onAuthenticationError(errorCode, errString);
                onPromptError(errorCode, errString);
            }

            @Override
            public void onAuthenticationSucceeded(@NonNull androidx.biometric.BiometricPrompt.AuthenticationResult result) {
                super.onAuthenticationSucceeded(result);
                try {
                    onPromptSuccess(result);
                } catch (VaultError vaultError) {
                    Intent data = new Intent();
                    data.putExtra("errorJson", VaultErrors.toJSON(vaultError).toString());
                    setResult(RESULT_CANCELED, data);
                    finish();
                }
            }
        };
        return new BiometricPrompt(this, executor, authenticationCallback);
    }

    private BiometricPrompt.PromptInfo createPromptInfo(IdentityVaultConfig config) {
        boolean isDeviceVaultStrong = vault instanceof DeviceSecurityStrongVault;

        BiometricPrompt.PromptInfo.Builder builder = new BiometricPrompt.PromptInfo.Builder().setConfirmationRequired(false);

        if (config.androidBiometricsPromptDescription != null) {
            builder.setDescription(config.androidBiometricsPromptDescription);
        }

        if (config.androidBiometricsPromptSubtitle != null) {
            builder.setSubtitle(config.androidBiometricsPromptSubtitle);
        }

        if (config.androidBiometricsPromptTitle != null) {
            builder.setTitle(config.androidBiometricsPromptTitle);
        }

        if (vault.config.deviceSecurityType.equals("SystemPasscode")) {
            if (isDeviceVaultStrong) {
                builder.setAllowedAuthenticators(BiometricManager.Authenticators.DEVICE_CREDENTIAL);
            } else {
                builder.setAllowedAuthenticators(
                    BiometricManager.Authenticators.BIOMETRIC_WEAK | BiometricManager.Authenticators.DEVICE_CREDENTIAL
                );
            }
        } else if (vault.config.deviceSecurityType.equals("Biometrics")) {
            if (isDeviceVaultStrong) {
                builder.setAllowedAuthenticators(BiometricManager.Authenticators.BIOMETRIC_STRONG);
            } else {
                builder.setAllowedAuthenticators(BiometricManager.Authenticators.BIOMETRIC_WEAK);
            }
            builder.setNegativeButtonText(config.androidBiometricsNegativeButtonText);
        } else if (vault.config.deviceSecurityType.equals("Both")) {
            if (isDeviceVaultStrong) {
                builder.setAllowedAuthenticators(
                    BiometricManager.Authenticators.BIOMETRIC_STRONG | BiometricManager.Authenticators.DEVICE_CREDENTIAL
                );
            } else {
                builder.setAllowedAuthenticators(
                    BiometricManager.Authenticators.BIOMETRIC_WEAK | BiometricManager.Authenticators.DEVICE_CREDENTIAL
                );
            }
        }

        return builder.build();
    }

    private void onPromptError(int errorCode, @NonNull CharSequence errString) {
        VaultError error;

        switch (errorCode) {
            case BiometricPrompt.ERROR_USER_CANCELED:
            case BiometricPrompt.ERROR_CANCELED:
            case BiometricPrompt.ERROR_NEGATIVE_BUTTON:
                error = new UserCanceledAuthError();
                break;
            case BiometricPrompt.ERROR_LOCKOUT:
                Device.device.setBiometricsLock();
                error = new BiometricsLockedOutError();
                break;
            case BiometricPrompt.ERROR_LOCKOUT_PERMANENT:
                Device.device.setPermanentBiometricsLock();
                error = new BiometricsLockedOutError();
                break;
            case BiometricPrompt.ERROR_HW_NOT_PRESENT:
                error = new SecurityNotAvailableError();
                break;
            case BiometricPrompt.ERROR_NO_BIOMETRICS:
            case BiometricPrompt.ERROR_NO_DEVICE_CREDENTIAL:
                error = new BiometricsNotEnabledError();
                break;
            default:
                error = new VaultError(errString.toString());
                break;
        }

        this.vault.handleError(error);

        Intent data = new Intent();
        data.putExtra("errorJson", VaultErrors.toJSON(error).toString());
        setResult(RESULT_CANCELED, data);
        finish();
    }

    private void onPromptSuccess(@NonNull BiometricPrompt.AuthenticationResult result) throws VaultError {
        Device.device.clearBiometricsLock();

        if (this.vault instanceof DeviceSecurityStrongVault) {
            DeviceSecurityStrongVault strongVault = (DeviceSecurityStrongVault) this.vault;
            strongVault.setMasterKeyCipher(result.getCryptoObject().getCipher());
        } else if (this.vault instanceof DeviceSecurityWeakVault) {
            DeviceSecurityWeakVault weakVault = (DeviceSecurityWeakVault) this.vault;
            weakVault.setAuthed();
        }

        setResult(RESULT_OK);
        finish();
    }
}
