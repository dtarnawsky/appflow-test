package com.ionicframework.IdentityVault;

import android.content.Context;
import android.content.pm.PackageManager;
import android.os.Build;
import android.security.keystore.KeyGenParameterSpec;
import android.security.keystore.KeyInfo;
import android.security.keystore.KeyPermanentlyInvalidatedException;
import android.security.keystore.KeyProperties;
import androidx.annotation.RequiresApi;
import com.bottlerocketstudios.vault.EncryptionConstants;
import java.security.InvalidKeyException;
import java.security.KeyStore;
import java.security.spec.InvalidKeySpecException;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.GCMParameterSpec;

@RequiresApi(api = Build.VERSION_CODES.M)
public class BiometricCipherHelper {

    private static final String ENCRYPTION_BLOCK_MODE = KeyProperties.BLOCK_MODE_GCM;
    private static final String ENCRYPTION_PADDING = KeyProperties.ENCRYPTION_PADDING_NONE;
    private static final String ENCRYPTION_ALGORITHM = KeyProperties.KEY_ALGORITHM_AES;

    public static Cipher getCypherForDecryption(String key, String deviceSecurityType, byte[] iv, Context context) throws VaultError {
        try {
            Cipher cipher = getCipher();
            SecretKey secretKey = getOrCreateKey(key, deviceSecurityType, context);
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new GCMParameterSpec(128, iv));
            return cipher;
        } catch (KeyPermanentlyInvalidatedException e) {
            throw new InvalidatedCredentialsError();
        } catch (InvalidKeyException e) {
            e.printStackTrace();
            throw new UnexpectedKeystoreError(e.getLocalizedMessage());
        } catch (Exception e) {
            e.printStackTrace();
            throw new VaultError(e.getLocalizedMessage());
        }
    }

    public static Cipher getCypherForEncryption(String key, String deviceSecurityType, Context context) throws VaultError {
        try {
            Cipher cipher = getCipher();
            SecretKey secretKey = getOrCreateKey(key, deviceSecurityType, context);
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            return cipher;
        } catch (InvalidKeyException e) {
            e.printStackTrace();
            throw new UnexpectedKeystoreError(e.getLocalizedMessage());
        } catch (Exception e) {
            e.printStackTrace();
            throw new VaultError(e.getLocalizedMessage());
        }
    }

    public static void removeKey(String key) throws VaultError {
        try {
            KeyStore keyStore = KeyStore.getInstance("AndroidKeyStore");
            keyStore.load(null);
            if (keyStore.containsAlias(key)) {
                try {
                    keyStore.deleteEntry(key);
                } catch (Exception exc) {
                    exc.printStackTrace();
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new VaultError(ex.getLocalizedMessage());
        }
    }

    private static Cipher getCipher() throws VaultError {
        try {
            return Cipher.getInstance(ENCRYPTION_ALGORITHM + "/" + ENCRYPTION_BLOCK_MODE + "/" + ENCRYPTION_PADDING);
        } catch (Exception e) {
            throw new VaultError(e.getLocalizedMessage());
        }
    }

    private static SecretKey getOrCreateKey(String key, String deviceSecurityType, Context context) throws VaultError {
        try {
            KeyStore keyStore = KeyStore.getInstance("AndroidKeyStore");
            keyStore.load(null);
            SecretKey secretKey = (SecretKey) keyStore.getKey(key, null);
            if (secretKey == null) {
                KeyGenerator keyGenerator = KeyGenerator.getInstance(ENCRYPTION_ALGORITHM, "AndroidKeyStore");

                KeyGenParameterSpec.Builder builder = new KeyGenParameterSpec.Builder(
                    key,
                    KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT
                )
                    .setBlockModes(ENCRYPTION_BLOCK_MODE)
                    .setEncryptionPaddings(ENCRYPTION_PADDING)
                    .setUserAuthenticationRequired(true);
                // Only Android >= 11 supports Biometrics and Passcode on Secure Vault
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                    if (deviceSecurityType.equals("SystemPasscode")) {
                        builder.setUserAuthenticationParameters(0, KeyProperties.AUTH_DEVICE_CREDENTIAL);
                    } else if (deviceSecurityType.equals("Biometrics")) {
                        builder.setUserAuthenticationParameters(0, KeyProperties.AUTH_BIOMETRIC_STRONG);
                    } else if (deviceSecurityType.equals("Both")) {
                        builder.setUserAuthenticationParameters(
                            0,
                            KeyProperties.AUTH_BIOMETRIC_STRONG | KeyProperties.AUTH_DEVICE_CREDENTIAL
                        );
                    }
                } else {
                    builder.setUserAuthenticationValidityDurationSeconds(-1);
                }

                if (Build.VERSION.SDK_INT >= 24) {
                    builder.setInvalidatedByBiometricEnrollment(true);
                }

                boolean supportsHardwareSecurity = Device.getInstance().hasSecureHardware(context);

                if (Build.VERSION.SDK_INT >= 28 && supportsHardwareSecurity) {
                    boolean isStrongBoxBacked = context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_STRONGBOX_KEYSTORE);
                    builder.setIsStrongBoxBacked(isStrongBoxBacked);
                }

                keyGenerator.init(builder.build());
                secretKey = keyGenerator.generateKey();
            }

            return secretKey;
        } catch (Exception e) {
            throw new VaultError(e.getLocalizedMessage());
        }
    }
}
