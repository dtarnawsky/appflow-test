package com.ionicframework.IdentityVault;

import android.app.Activity;
import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.WindowManager;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.biometric.BiometricManager;
import androidx.biometric.BiometricPrompt;
import java.util.concurrent.Executor;
import org.json.JSONException;
import org.json.JSONObject;

@RequiresApi(api = Build.VERSION_CODES.M)
public class NonVaultBiometricPromptActivity extends AppCompatActivity {

    private BiometricPrompt biometricPrompt;
    private BiometricPrompt.PromptInfo promptInfo;

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        if (Device.getInstance().isHideScreenOnBackgroundEnabled()) {
            if (Device.getInstance().isDimBackgroundBehindBiometricsEnabled()) {
                getWindow().addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
            } else {
                try {
                    final int resourceId = getResources().getIdentifier("splash", "drawable", getPackageName());
                    final int themeId = getResources().getIdentifier("Splash", "style", getPackageName());

                    setTheme(themeId);
                    getWindow().getDecorView().findViewById(android.R.id.content).setBackgroundResource(resourceId);
                } catch (Exception e) {
                    getWindow().addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
                }
            }
        }

        super.onCreate(savedInstanceState);

        Intent intent = getIntent();
        try {
            String promptConfigJson = intent.getStringExtra("promptConfig");

            PromptConfig config = this.getPromptConfig(promptConfigJson);

            setTitle(null);
            this.biometricPrompt = this.createBiometricPrompt();
            this.promptInfo = this.createPromptInfo(this, config);
            this.authenticate();
            return;
        } catch (DeviceError e) {
            Intent data = new Intent();
            data.putExtra("errorJson", DeviceErrors.toJSON(e).toString());
            setResult(RESULT_CANCELED, data);
            finish();
        }
    }

    private void authenticate() {
        try {
            if (Device.getInstance().isLockedOutOfBiometrics()) {
                throw new DeviceBiometricsLockedOutError();
            }

            this.biometricPrompt.authenticate(this.promptInfo);
        } catch (DeviceError deviceError) {
            System.out.println(deviceError.getErrorCode());
            Intent data = new Intent();
            data.putExtra("errorJson", DeviceErrors.toJSON(deviceError).toString());
            setResult(RESULT_CANCELED, data);
            finish();
        }
    }

    private BiometricPrompt createBiometricPrompt() {
        final Handler handler = new Handler(Looper.getMainLooper());
        Executor executor = handler::post;
        BiometricPrompt.AuthenticationCallback authenticationCallback = new BiometricPrompt.AuthenticationCallback() {
            /**
             * Called when authentication fails after multiple attempts.
             */
            @Override
            public void onAuthenticationError(int errorCode, @NonNull CharSequence errString) {
                super.onAuthenticationError(errorCode, errString);
                onPromptError(errorCode, errString);
            }

            @Override
            public void onAuthenticationSucceeded(@NonNull androidx.biometric.BiometricPrompt.AuthenticationResult result) {
                super.onAuthenticationSucceeded(result);

                Device.device.clearBiometricsLock();
                setResult(RESULT_OK);
                finish();
            }
        };
        return new BiometricPrompt(this, executor, authenticationCallback);
    }

    private BiometricPrompt.PromptInfo createPromptInfo(Activity activity, PromptConfig config) {
        boolean isDeviceVaultStrong = Device.getInstance().getBiometricStrengthLevel(activity).equals("strong");

        BiometricPrompt.PromptInfo.Builder builder = new BiometricPrompt.PromptInfo.Builder().setConfirmationRequired(false);
        if (config.androidBiometricsPromptDescription != null) {
            builder.setDescription(config.androidBiometricsPromptDescription);
        }

        if (config.androidBiometricsPromptSubtitle != null) {
            builder.setSubtitle(config.androidBiometricsPromptSubtitle);
        }

        if (config.androidBiometricsPromptTitle != null) {
            builder.setTitle(config.androidBiometricsPromptTitle);
        }

        builder.setNegativeButtonText(config.androidBiometricsNegativeButtonText);

        if (isDeviceVaultStrong) {
            builder.setAllowedAuthenticators(BiometricManager.Authenticators.BIOMETRIC_STRONG);
        } else {
            builder.setAllowedAuthenticators(BiometricManager.Authenticators.BIOMETRIC_WEAK);
        }

        return builder.build();
    }

    private void onPromptError(int errorCode, @NonNull CharSequence errString) {
        DeviceError error;

        switch (errorCode) {
            case BiometricPrompt.ERROR_USER_CANCELED:
            case BiometricPrompt.ERROR_CANCELED:
            case BiometricPrompt.ERROR_NEGATIVE_BUTTON:
                error = new DeviceUserCanceledAuthError();
                break;
            case BiometricPrompt.ERROR_LOCKOUT:
                Device.device.setBiometricsLock();
                error = new DeviceBiometricsLockedOutError();
                break;
            case BiometricPrompt.ERROR_LOCKOUT_PERMANENT:
                Device.device.setPermanentBiometricsLock();
                error = new DeviceBiometricsLockedOutError();
                break;
            case BiometricPrompt.ERROR_HW_NOT_PRESENT:
                error = new DeviceSecurityNotAvailableError();
                break;
            case BiometricPrompt.ERROR_NO_BIOMETRICS:
            case BiometricPrompt.ERROR_NO_DEVICE_CREDENTIAL:
                error = new DeviceBiometricsNotEnabledError();
                break;
            default:
                error = new DeviceError(errString.toString());
                break;
        }

        Intent data = new Intent();
        data.putExtra("errorJson", DeviceErrors.toJSON(error).toString());
        setResult(RESULT_CANCELED, data);
        finish();
    }

    private PromptConfig getPromptConfig(String jsonString) throws DeviceInvalidArgumentsError {
        try {
            JSONObject configJSON = new JSONObject(jsonString);
            return new PromptConfig(configJSON);
        } catch (JSONException ex) {
            String theMessage = ex.getLocalizedMessage();
            if (theMessage.contains("No value for ")) {
                throw new DeviceInvalidArgumentsError(
                    String.format(
                        "Config object is missing the required '%s' property. [Docs: https://ionic.io/docs/identity-vault/interfaces/promptconfig]",
                        theMessage.replace("No value for ", "")
                    )
                );
            } else {
                throw new DeviceInvalidArgumentsError(ex.getLocalizedMessage());
            }
        }
    }
}
