package com.ionicframework.IdentityVault;

import android.os.Build;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import java.util.HashMap;

@RequiresApi(api = Build.VERSION_CODES.M)
public class InMemoryVault extends VaultBase {

    public InMemoryVault(IdentityVaultConfig config, AppCompatActivity activity) {
        super(config, activity);
        data = new HashMap<>();
    }

    @Override
    protected String getVaultType() {
        return VaultType.IN_MEMORY;
    }

    @Override
    protected String getVaultStrength() {
        return VaultStrength.NONE;
    }

    @Override
    public void clear() throws VaultError {
        this.data = null;
        this.data = new HashMap<>();
        this.customPasscode = null;
    }

    @Override
    public boolean doesVaultExist() {
        return true;
    }

    @Override
    public HashMap<String, String> exportVault() throws VaultError {
        return this.data;
    }

    @Override
    public void lock(boolean wasTimeout) {
        try {
            this.clear();
            if (this.onLockCallback != null) {
                this.onLockCallback.apply(wasTimeout);
            }
        } catch (VaultError error) {}
    }

    @Override
    public void importVault(HashMap<String, String> data) throws VaultError {
        this.data = data;
    }

    @Override
    public void setValue(String key, String value) throws VaultError {
        this.data.put(key, value);
    }

    @Override
    public void removeValue(String key) throws VaultError {
        this.data.remove(key);
    }

    @Override
    public void unlock() throws VaultError {}

    @Override
    public void unlock(boolean forceUnlock) throws VaultError {}

    @Override
    public boolean isEmpty() {
        if (this.data == null) {
            return true;
        }

        return this.data.isEmpty();
    }
}
