{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * The meaning of the error code in the thrown {@link VaultError}.\n */\nexport enum VaultErrorCodes {\n  /**\n   * An unknown error happened.\n   * @constant `0`\n   */\n  Unknown,\n  /**\n   * The operation failed because the vault was locked.\n   * @constant `1`\n   */\n  VaultLocked,\n  /**\n   * The operation failed because the vault was unavailable.\n   * The most likely cause of this error is that a vault has not been configured.\n   * @constant `2`\n   */\n  VaultUnavailable,\n  /**\n   * The operation failed because the some of the vault provided arguments were invalid.\n   * @constant `3`\n   */\n  InvalidArguments,\n  /**\n   * The credentials were invalidated. This can happen when a user changes biometrics or passcode.\n   * @constant `4`\n   */\n  InvalidatedCredential,\n  /**\n   * Biometric security is unavailable due to a passcode not being set up at the system level.\n   * In order to use biometric identification on the device a system level passcode must be set up by the user.\n   * @constant `5`\n   */\n  SecurityNotAvailable,\n  /**\n   * User authentication failed.\n   * @constant `6`\n   */\n  AuthFailed,\n  /**\n   * Too many failed authentication attempts made against the custom passcode vault, so the vault was cleared and user will need to login again.\n   * @constant `7`\n   */\n  TooManyFailedAttempts,\n  /**\n   * The user cancelled the native authentication dialog.\n   *\n   * **Note**: On iOS, this error code will also be thrown in the event that the native authentication dialog fails as a result of too many failed attempts.\n   * The user will be forced to cancel the dialog, triggering this error code.\n   *\n   * On Android, this error also will be thrown if using {@link DeviceSecurityType.SystemPasscode} or {@link DeviceSecurityType.Both} in the event of too many failed attempts.\n   * Its currently not possible to get the nature of failures from the native authentication dialog, and similar to iOS, the user will be forced to cancel the dialog, triggering this error code.\n   * @constant `8`\n   */\n  UserCanceledInteraction,\n  /**\n   * The user provided mismatched passcodes.\n   * @constant `9`\n   */\n  MismatchedPasscode,\n  /**\n   * The operation requires passcode to be setup but it isn't set yet. Call {@link Vault.setCustomPasscode} to set it.\n   * @constant `10`\n   */\n  MissingPasscode,\n  /**\n   * The operation failed because the application tried to unlock the vault with passcode authentication,\n   * but the vault is not configured to allow passcode authentication.\n   * @constant `11`\n   */\n  PasscodeNotEnabled,\n  /**\n   * The key was not found. This can happen when a user changes biometrics or passcode.\n   * @constant `12`\n   */\n  KeyNotFound,\n  /**\n   * The operation failed because biometric authentication is not enabled.\n   * This can occur when biometrics is not supported by the device\n   * or when biometrics has not been configured for the device or vault.\n   * @constant `13`\n   */\n  BiometricsNotEnabled,\n  /**\n   * @ignore\n   */\n  InvalidAuthMode,\n  /**\n   * Biometrics have not been authed yet (Android only)\n   * @constant `15`\n   */\n  MissingBiometrics,\n  /**\n   * {@link DeviceSecurityType.SystemPasscode} for {@link DeviceSecurityType} not available on this Android device.\n   * @constant `16`\n   */\n  AndroidSystemPasscodeUnavailable,\n  /**\n   * Biometrics have been locked out, usually because of too many failed attempts.\n   *\n   * **Note:** This error will never be thrown if using {@link DeviceSecurityType.SystemPasscode} or {@link DeviceSecurityType.Both}.\n   * Its currently not possible to get the nature of failures from the native authentication dialog, so the only error that would be thrown is {@link VaultErrorCodes.UserCanceledInteraction} as the user\n   * is forced to cancel the prompt.\n   *\n   * @constant `17`\n   */\n  AndroidBiometricsLockedOut,\n  /**\n   * Biometrics have been locked out, usually because of too many failed attempts.\n   *\n   * @constant `18`\n   */\n  iOSBiometricsLockedOut,\n  /**\n   * An unexpected error has occurred in the Android keystore.\n   * Some android devices (such as the Samsung S10) will return this error code when\n   * a maximum number of failed attempts is reached and the device must be restarted.\n   * See: [Max Uses Per Boot](https://source.android.com/security/keystore/tags#max_uses_per_boot)\n   *\n   * @constant `19`\n   */\n  AndroidUnexpectedKeystoreError,\n}\n\n/**\n * The meaning of the error code in the thrown {@link DeviceError}.\n */\nexport enum DeviceErrorCodes {\n  /**\n   * An unknown error happened.\n   * @constant `0`\n   */\n  Unknown,\n  /**\n   * The operation failed because the some of the vault provided arguments were invalid.\n   * @constant `1`\n   */\n  InvalidArguments,\n  /**\n   * The user cancelled the native authentication dialog.\n   *\n   * **Note**: On iOS, this error code will also be thrown in the event that the native authentication dialog fails as a result of too many failed attempts.\n   * The user will be forced to cancel the dialog, triggering this error code.\n   *\n   * @constant `2`\n   */\n  UserCanceledInteraction,\n  /**\n   * Biometric security is unavailable due to a passcode not being set up at the system level.\n   * In order to use biometric identification on the device a system level passcode must be set up by the user.\n   * @constant `3`\n   */\n  SecurityNotAvailable,\n  /**\n   * User authentication failed.\n   * @constant `4`\n   */\n  AuthFailed,\n  /**\n   * Biometrics have been locked out, usually because of too many failed attempts.\n   *\n   * @constant `5`\n   */\n  BiometricsLockedOut,\n  /**\n   * The operation failed because biometric authentication is not enabled.\n   * This can occur when biometrics is not supported by the device\n   * or when biometrics has not been configured for the device or vault.\n   * @constant `6`\n   */\n  BiometricsNotEnabled,\n}\n\n/**\n * An error that can be thrown by the plugin.\n *\n * @example\n * try {\n *  vault.unlock();\n * } catch(e) {\n *   switch (e.code) {\n *     case VaultErrorCodes.AuthFailed:\n *       alert('You failed to authenticate!');\n *       break;\n *     case VaultErrorCodes.UserCanceledInteraction:\n *       alert('You cancelled the face id prompt!');\n *       break;\n *     default:\n *       throw e;\n *   }\n * }\n */\nexport interface VaultError {\n  /**\n   * - Type: `string`\n   *\n   * A text description of the error that occurred.\n   */\n  message: string;\n  /**\n   * - Type: {@link VaultErrorCodes}\n   *\n   * The error code enum representing the error.\n   */\n  code: VaultErrorCodes;\n}\n\n/**\n * An error that can be thrown in the Device class.\n *\n * @example\n * try {\n *  await Device.showBiometricPrompt(promptConfig);\n * } catch(e) {\n *   switch (e.code) {\n *     case DeviceErrorCodes.AuthFailed:\n *       alert('You failed to authenticate!');\n *       break;\n *     case DeviceErrorCodes.UserCanceledInteraction:\n *       alert('You cancelled the face id prompt!');\n *       break;\n *     default:\n *       throw e;\n *   }\n * }\n */\nexport interface DeviceError {\n  /**\n   * - Type: `string`\n   *\n   * A text description of the error that occurred.\n   */\n  message: string;\n  /**\n   * - Type: {@link DeviceErrorCodes}\n   *\n   * The error code enum representing the error.\n   */\n  code: DeviceErrorCodes;\n}\n\n/**\n * The possible values returned by {@link Device.getAvailableHardware}\n */\nexport enum SupportedBiometricType {\n  /** The device supports fingerprint scanning. */\n  Fingerprint = 'fingerprint',\n  /** The device supports facial recognition. */\n  Face = 'face',\n  /** The device supports iris scanning. */\n  Iris = 'iris',\n}\n\n/**\n * Possible device biometric strength levels on Android (always `strong` on iOS).\n * [More Information](https://source.android.com/security/biometric/measure#tiered-authentication).\n */\nexport enum BiometricSecurityStrength {\n  /** Refers to Class 2 - Weak biometric security */\n  Weak = 'weak',\n  /** Refers to Class 3 - Strong biometric security */\n  Strong = 'strong',\n}\n\n/**\n * Possible app biometric permissions states on iOS (always `granted` on Android and on iOS with TouchID).\n */\nexport enum BiometricPermissionState {\n  /** App has been granted permission to use FaceID */\n  Granted = 'granted',\n  /** App has been denied permission to use FaceID */\n  Denied = 'denied',\n  /** User has not yet been prompted to allow FaceID */\n  Prompt = 'prompt',\n}\n\n/**\n * When type is set to 'DeviceSecurity', determines which aspects of the device to use to secure the vault.\n * Note: Android only supports `SystemPasscode` on Android 11 and greater.\n * @default `Both`\n */\nexport enum DeviceSecurityType {\n  /** Will allow a system passcode to secure the vault. On Android, only supported on Android 11 and greater. */\n  SystemPasscode = 'SystemPasscode',\n  /** WIll allow biometric hardware tos secure the vault. */\n  Biometrics = 'Biometrics',\n  /** WIll allow both SystemPasscode or Biometrics as an option to secure the vault. */\n  Both = 'Both',\n  /** No biometric security option will be used. */\n  None = 'None',\n}\n\n/**\n * The type of vault\n */\nexport enum VaultType {\n  /**\n   * No additional security is required in the app as long as the device was unlocked with a secure method.\n   *\n   * On iOS, this vault is synchronized via iCloud or new device setup.\n   * */\n  SecureStorage = 'SecureStorage',\n  /**\n   * Uses additional device features to add an additional layer of security while the user is in the app.\n   *\n   * On iOS, this vault is NOT synchronized via iCloud or new device setup.\n   * */\n  DeviceSecurity = 'DeviceSecurity',\n  /**\n   * User will set a custom passcode that will be used to access the vault.\n   *\n   * On iOS, this vault is NOT synchronized via iCloud or new device setup.\n   * */\n  CustomPasscode = 'CustomPasscode',\n  /** Data will persist only while the application is in memory.\n   *\n   *  On iOS, this vault is NOT synchronized via iCloud or new device setup.\n   */\n  InMemory = 'InMemory',\n}\n\n/**\n * For Android, when type is {@link VaultType.DeviceSecurity} and deviceSecurityType is {@link DeviceSecurityType.Both}, this options specifies if you want to\n * prefer a Strong Cryptographic Vault or the System Passcode fallback when they both aren't available.\n * @default `StrongVault`\n */\nexport enum AndroidBiometricCryptoPreference {\n  /** Prefer to use a strong cryptographic vault. */\n  StrongVault = 'StrongVault',\n  /** Prefer the system passcode fallback. */\n  SystemPasscode = 'SystemPasscode',\n}\n\n// OLD METHODS\n\n/**\n * The type of authentication the vault should be configured to allow.\n * @deprecated For use in legacy Vault Migrator only.\n * @ignore\n */\nexport enum AuthMode {\n  /**\n   * Biometrics authentication should only be allowed\n   */\n  BiometricOnly,\n\n  /**\n   * Passcode authentication should only be allowed\n   */\n  PasscodeOnly,\n\n  /**\n   * Both biometric and passcode authentication should be allowed\n   */\n  BiometricAndPasscode,\n\n  /**\n   * Both biometric and passcode authentication should be disabled.\n   * With this setting all data in the vault will be cleared on lock or\n   * if the app is closed. Stored data is kept only in memory.\n   */\n  InMemoryOnly,\n\n  /**\n   * Use biometrics if it is available, otherwise use passcode\n   */\n  BiometricOrPasscode,\n\n  /**\n   * Both biometric and passcode authentication will be disabled but any stored values\n   * will persist and be stored securely at rest using the keychain and will be available\n   * without needing to authenticate via passcode or biometrics when the device is unlocked.\n   */\n  SecureStorage,\n}\n\n/**\n * The interface for the Default Session.\n * Extend this interface to make a custom session\n *\n * @example\n * MyCustomSession extends DefaultSession {\n *   email: string;\n *   age: number;\n *   nicknames: string[];\n * }\n *\n * @ignore\n */\nexport interface DefaultSession {\n  username: string;\n  token: string;\n}\n\n/**\n * The possible values returned by {@link getBiometricType}\n * @property `touchID` | `faceID` | `none`\n * @ignore\n */\nexport type BiometricType = 'touchID' | 'faceID' | 'none';\n\n/**\n * An interface that describes the vault. In {@link IdentityVaultUser} this\n * defaults to `_lastUser` & `default` you can optionally add this to the constructor\n * to accomplish advanced use cases multi-tenant vaults.\n *\n * @deprecated For use in legacy Vault Migrator only.\n * @ignore\n */\nexport interface VaultDescriptor {\n  /**\n   * The username for the vault you wish to access\n   */\n  username: string;\n\n  /**\n   * The vaultId for the vault you wish to access\n   */\n  vaultId: string;\n}\n\n/**\n * The configuration returned from {@link IonicNativeAuthPlugin} when {@link getConfig} is called.\n *\n * @ignore\n */\nexport interface PluginConfiguration {\n  /**\n   * The values the uniquely identify the vault\n   */\n  descriptor: VaultDescriptor;\n\n  /**\n   * Whether biometric authentication is enabled for the vault\n   */\n  isBiometricsEnabled: boolean;\n\n  /**\n   * Whether passcode authentication is enabled for the vault\n   */\n  isPasscodeEnabled: boolean;\n\n  /**\n   * Whether {@link AuthMode.SecureStorage} is enabled for the vault\n   */\n  isSecureStorageModeEnabled: boolean;\n\n  /**\n   * Whether a passcode needs to be set with {@link setPasscode}\n   */\n  isPasscodeSetupNeeded: boolean;\n\n  /**\n   * Obscures the app when backgrounded to avoid leaking sensitive information, such as financial statements or balances.\n   * App screenshots won't work on Android 10 devices using gesture navigation if this option is set to true.\n   */\n  hideScreenOnBackground: boolean;\n\n  /**\n   * The amount of number of milliseconds the app can be in the background for until the vault locks\n   */\n  lockAfter: number;\n}\n\n/**\n * @hidden\n * @deprecated For use in legacy Vault Migrator only.\n * @ignore\n */\nexport interface VaultOptionsBase {\n  /**\n   * The {@link AuthMode} to configure a new vault with. Note: This will only\n   * affect newly created vaults. Vaults with existing data and configuration will use\n   * there previous configuration. They can be change by unlocking and then chaning the AuthMode.\n   *\n   * @default - {@link BiometricAndPasscode}\n   *\n   */\n  authMode?: AuthMode;\n\n  /**\n   * The amount of number of milliseconds the app can be in the background for until the vault locks.\n   * A value of 0 means the vault won't lock in the background.\n   * @default 0\n   */\n  lockAfter?: number;\n\n  /**\n   * Obscures the app when backgrounded to avoid leaking sensitive information, such as financial statements or balances.\n   * App screenshots won't work on Android 10 devices using gesture navigation if this option is set to true.\n   * @default false\n   */\n  hideScreenOnBackground?: boolean;\n\n  /**\n   * After too many failed authentication attempts, should the vault be cleared?\n   * @default true\n   */\n  shouldClearVaultAfterTooManyFailedAttempts?: boolean;\n\n  /**\n   * If biometric auth fails, allow system pin fallback.\n   * @default false\n   */\n  allowSystemPinFallback?: boolean;\n\n  /**\n   * The title text for the Android authentication prompt.\n   * @default \"Please Authenticate\"\n   */\n  androidPromptTitle?: string;\n\n  /**\n   * The subtitle text for the Android authentication prompt.\n   * @default null\n   */\n  androidPromptSubtitle?: string;\n\n  /**\n   * The description text for the Android authentication prompt.\n   * @default null\n   */\n  androidPromptDescription?: string;\n\n  /**\n   * The cancel text for the Android authentication prompt.\n   * @default \"Cancel\"\n   */\n  androidPromptNegativeButtonText?: string;\n\n  /**\n   * The subtitle text for the Android pin authentication prompt.\n   * @default null\n   */\n  androidPINPromptSubtitle?: string;\n  /**\n   * The title text for verifying a pin in the Android pin authentication prompt.\n   * @default \"Please Authenticate\"\n   */\n  androidPINPromptVerifyTitle?: string;\n  /**\n   * The title text for entering a new pin in the Android pin authentication prompt.\n   * @default \"Please Authenticate\"\n   */\n  androidPINPromptTitle?: string;\n  /**\n   * The title text for confirming a new pin in the Android pin authentication prompt.\n   * @default \"Please Authenticate\"\n   */\n  androidPINPromptConfirmTitle?: string;\n  /**\n   * The confirm button text for the Android pin authentication prompt.\n   * @default \"OK\"\n   */\n  androidPINPromptConfirmButtonText?: string;\n  /**\n   * The cancel button text for the Android pin authentication prompt.\n   * @default \"Cancel\"\n   */\n  androidPINPromptNegativeButtonText?: string;\n\n  /**\n   * For iOS, the prompt text for the biometric prompt\n   * @default \"Authenticate to log in\"\n   */\n  iosPromptText?: string;\n}\n\n/**\n * The options passed in to initialize the vault.\n *\n * @deprecated For use in legacy Vault Migrator only.\n * @ignore\n */\nexport interface VaultOptions extends VaultOptionsBase {\n  /**\n   * Whether or not to attempt to automatically restore the session when the vault is ready\n   * If {@link restoreSessionOnReady} and {@link unlockOnAccess} are\n   * both true the vault will be immediately unlocked & the session restored if onReady if the\n   * vault is in use.\n   * @default false\n   */\n  restoreSessionOnReady?: boolean;\n\n  /**\n   * Whether or not to attempt to automatically unlock the vault when a value is accessed.\n   * If {@link restoreSessionOnReady} and {@link unlockOnAccess} are\n   * both true the vault will be immediately unlocked & the session restored if onReady if the\n   * vault is in use.\n   * @default false\n   */\n  unlockOnAccess?: boolean;\n\n  /**\n   * Whether or not to attempt to automatically unlock the vault when the vault is ready\n   * @default false\n   */\n  unlockOnReady?: boolean;\n}\n\n/**\n * The configuration file returned to event handlers such as\n * {@link onConfigChange} and {@link onVaultReady}.\n * @ignore\n */\nexport interface VaultConfig extends VaultOptionsBase {\n  /**\n   * Whether a passcode needs to be set with {@link setPasscode}\n   */\n  isPasscodeSetupNeeded: boolean;\n}\n\n/**\n * The options passed the the {@link IonicNativeAuthPlugin} when creating a vault with {@link getVault}\n * @ignore\n */\nexport interface PluginOptions extends VaultDescriptor {\n  /**\n   * The amount of number of milliseconds the app can be in the background for until the vault locks\n   */\n  lockAfter?: number;\n\n  /**\n   * Obscures the app when backgrounded to avoid leaking sensitive information, such as financial statements or balances.\n   * App screenshots won't work on Android 10 devices using gesture navigation if this option is set to true.\n   *\n   * @default false\n   */\n  hideScreenOnBackground?: boolean;\n\n  /**\n   * After too many failed authentication attempts, should the vault be cleared?\n   * @default true\n   */\n  shouldClearVaultAfterTooManyFailedAttempts?: boolean;\n\n  /**\n   * If biometric auth fails, allow system pin fallback.\n   *\n   * Please note: when Android devices are set to allow system pin fallback, the behavior of the biometrics prompt changes.\n   * The OS biometric prompt will not report that biometrics failed nor that the user has been locked out of biometrics.\n   * It is only currently possible to know the user either canceled the authentication prompt, or was successful in verifying.\n   *\n   * @default false\n   */\n  allowSystemPinFallback?: boolean;\n\n  /**\n   * The title text for the Android authentication prompt.\n   * @default \"Please Authenticate\"\n   */\n  androidPromptTitle?: string;\n\n  /**\n   * The subtitle text for the Android authentication prompt.\n   * @default null\n   */\n  androidPromptSubtitle?: string;\n\n  /**\n   * The description text for the Android authentication prompt.\n   * @default null\n   */\n  androidPromptDescription?: string;\n\n  /**\n   * The cancel text for the Android authentication prompt.\n   * @default \"Cancel\"\n   */\n  androidPromptNegativeButtonText?: string;\n\n  /**\n   * The subtitle text for the Android pin authentication prompt.\n   * @default null\n   */\n  androidPINPromptSubtitle?: string;\n  /**\n   * The title text for verifying a pin in the Android pin authentication prompt.\n   * @default \"Please Authenticate\"\n   */\n  androidPINPromptVerifyTitle?: string;\n  /**\n   * The title text for entering a new pin in the Android pin authentication prompt.\n   * @default \"Please Authenticate\"\n   */\n  androidPINPromptTitle?: string;\n  /**\n   * The title text for confirming a new pin in the Android pin authentication prompt.\n   * @default \"Please Authenticate\"\n   */\n  androidPINPromptConfirmTitle?: string;\n  /**\n   * The confirm button text for the Android pin authentication prompt.\n   * @default \"OK\"\n   */\n  androidPINPromptConfirmButtonText?: string;\n  /**\n   * The cancel button text for the Android pin authentication prompt.\n   * @default \"Cancel\"\n   */\n  androidPINPromptNegativeButtonText?: string;\n\n  /**\n   * For iOS, the localized explanation for authentication shown in the dialog presented to the user.\n   * @default \"Authenticate to log in\"\n   */\n  iosPromptText?: string;\n\n  /**\n   * A handler that will receive events any time the vault is locked\n   */\n  onLock?(event: LockEvent): any;\n\n  /**\n   * A handler that will receive events any time the vault is unlocked\n   */\n  onUnlock?(event: PluginConfiguration): any;\n\n  /**\n   * A handler that will receive events any time the vault is configuration is changed\n   */\n  onConfig?(event: PluginConfiguration): any;\n\n  /**\n   * Called when there is an error during vault setup\n   *\n   * @param error - The {@link VaultError} that occurred.\n   *\n   */\n  onError?(error: VaultError): any;\n\n  /**\n   * Called when the vault is configured and available.\n   *\n   * @param vault - The {@link IdentityVault}  instance.\n   *\n   */\n  onReady?(vault: IdentityVault): any;\n}\n\n/**\n * The underlying vault API. You can gain direct access to the vault for more advanced usage by\n * using the {@link getVault IdentityVaultUser.getVault} method.\n * @ignore\n */\nexport interface IdentityVault {\n  /**\n   * The current configuration of the vault will stay current as long as {@link unsubscribe} is not called.\n   */\n  config?: PluginConfiguration;\n\n  /**\n   * Unsubscribe the instance from events about the vault.\n   *\n   * @example\n   * vault.unsubscribe();\n   *\n   */\n  unsubscribe(): Promise<void>;\n\n  /**\n   * Clear all vault data including stored tokens, values, and passcodes. The vault will be empty and unlocked after this.\n   *\n   * @example\n   * vault.clear()\n   */\n  clear(): Promise<void>;\n\n  /**\n   * Lock the vault clearing the contents from memory and requiring biometrics or passcode to unlock\n   *\n   * @example\n   * vault.lock()\n   */\n  lock(): Promise<void>;\n\n  /**\n   * Check whether the vault is currently locked\n   *\n   * @example\n   * if(!(await vault.isLocked())) {\n   *     // Do something if vault is not locked\n   * }\n   *\n   * @returns whether the vault is locked\n   */\n  isLocked(): Promise<boolean>;\n\n  /**\n   * Check whether the vault is currently empty\n   *\n   * @example\n   * if(!(await vault.isEmpty())) {\n   *     // Do something if vault is not empty\n   * }\n   *\n   * @returns whether the vault is empty\n   */\n  isEmpty(): Promise<boolean>;\n\n  /**\n   * Check whether the biometrics are locked on the device\n   *\n   * @example\n   * const bioLockedOut = await vault.isLockedOutOfBiometrics();\n   *\n   * @returns whether biometrics are locked\n   */\n  isLockedOutOfBiometrics(): Promise<boolean>;\n\n  /**\n   * Check whether the vault has any values stored in it.\n   *\n   * @example\n   * const vaultIsInUse = await vault.isInUse();\n   *\n   * @returns whether the vault has stored values\n   */\n  isInUse(): Promise<boolean>;\n\n  /**\n   * Get the current configuration of the vault\n   *\n   * @example\n   * const config = await vault.getConfig();\n   *\n   * @returns the configuration\n   */\n  getConfig(): Promise<PluginConfiguration>;\n\n  /**\n   * Check how many remaining failed attempts are left until vault clears\n   *\n   * @example\n   * const remainingAttempts = await vault.remainingAttempts();\n   *\n   * @returns the number of remaining attempts\n   */\n  remainingAttempts(): Promise<number>;\n\n  /**\n   * Get the username associated with the vault\n   *\n   * @example\n   * const username = await vault.getUsername();\n   *\n   * @returns the username for the vault\n   */\n  getUsername(): Promise<string>;\n\n  /**\n   * Store a value securely in the token slot. This is equivalent to calling {@link storeValue storeValue(\"token\", token)}.\n   *\n   * @example\n   * vault.storeToken(token);\n   *\n   * @param token - the value to store in the token slot\n   *\n   * @throws {@link VaultError} - if vault is locked, or if passcode is enabled but passcode has not been setup\n   */\n  storeToken(token: any): Promise<void>;\n\n  /**\n   * Get any data stored in the token slot. This is equivalent to calling {@link getValue getValue(\"token\")}.\n   *\n   * @example\n   * const token = await vault.getToken();\n   *\n   * @returns token data\n   *\n   * @throws {@link VaultError} - if vault is locked\n   */\n  getToken(): Promise<any>;\n\n  /**\n   * Store data securely under the given key.\n   *\n   * @example\n   * vault.storeValue(\"email\", emailToken);\n   *\n   * @param key - the key to store in the value in\n   * @param value - the value to store\n   *\n   * @throws {@link VaultError} - if vault is locked, or if passcode is enabled but passcode has not been setup\n   */\n  storeValue(key: string, value: any): Promise<void>;\n\n  /**\n   * Removes data under the given key.\n   *\n   * @example\n   * vault.removeValue(\"email\");\n   *\n   * @param key - the key to remove the value from\n   *\n   * @throws {@link VaultError} - if vault is locked, or if passcode is enabled but passcode has not been setup\n   */\n  removeValue(key: string): Promise<void>;\n\n  /**\n   * Get a value stored under the given key.\n   *\n   * @param key - the key where the value is stored\n   *\n   * @returns the value stored at the key\n   *\n   * @throws {@link VaultError} - if vault is locked\n   */\n  getValue(key: string): Promise<any>;\n\n  /**\n   * Get all keys with stored values.\n   *\n   * @example\n   * const keys = await vault.getKeys();\n   *\n   * @returns array with all keys\n   *\n   * @throws {@link VaultError} - if vault is locked\n   */\n  getKeys(): Promise<string[]>;\n\n  /**\n   * Get the type of biometrics the device supports\n   *\n   * @example\n   * const biometricType = await vault.getBiometricType();\n   *\n   * @deprecated this method has been deprecated in favor of {@link getAvailableHardware}\n   *\n   * @returns the type of biometrics the device supports\n   */\n  getBiometricType(): Promise<BiometricType>;\n\n  /**\n   * Gets the types of biometrics the device supports.\n   *\n   * Please note, this method only shows the biometrics the device is capable of, and does\n   * not reflect whether the biometric methods are enrolled or enabled.\n   *\n   * Traditionally Android has only supported fingerprint biometrics through the SDK. As of\n   * Android 10 multiple options are supported. Samsung devices can offer iris and face\n   * biometrics that exists outside the scope of the Android SDK. Since there is no official\n   * Android SDK support to detect those Samsung features, we attempt to determine their\n   * presence based on if the device has the Samsung face or iris biometrics software installed.\n   *\n   * @example\n   * const availableHardware = await vault.getAvailableHardware();\n   *\n   * @returns the list of biometrics the device supports\n   */\n  getAvailableHardware(): Promise<SupportedBiometricType[]>;\n\n  /**\n   * Enable/Disable Biometric authentication for the vault\n   *\n   * @example\n   * vault.setBiometricsEnabled(true);\n   *\n   * @param isBiometricsEnabled - whether or not biometrics should be enabled\n   *\n   * @throws {@link VaultError} - if biometrics is unavailable or the vault is locked\n   */\n  setBiometricsEnabled(isBiometricsEnabled: boolean): Promise<void>;\n\n  /**\n   * Set whether or not the screen will be obscured in app switcher mode\n   *\n   * @param enabled\n   * @param dimBiometrics? - optional boolean for Android to obscure\n   * the screen behind biometric prompts via dimming the background instead of the splash screen.\n   *\n   * @returns void\n   */\n  setHideScreenOnBackground(enabled: boolean, dimBiometrics?: boolean): Promise<void>;\n\n  /**\n   * Check whether or not biometrics is enabled on the vault\n   *\n   * @example\n   * const biometricsEnabled = await vault.isBiometricsEnabled();\n   *\n   * @returns whether or not biometrics is enabled\n   */\n  isBiometricsEnabled(): Promise<boolean>;\n\n  /**\n   * Check whether or not biometrics is supported by the device\n   * and has been configured by the current user of the device\n   *\n   * @example\n   * const biometricsAvailable = await vault.isBiometricsAvailable();\n   *\n   * @returns whether or not biometrics is available\n   */\n  isBiometricsAvailable(): Promise<boolean>;\n\n  /**\n   * Check whether or not biometrics is supported by the device\n   *\n   * @example\n   * const biometricsSupported = await vault.isBiometricsSupported();\n   *\n   * @returns whether or not biometrics is supported\n   */\n  isBiometricsSupported(): Promise<boolean>;\n\n  /**\n   * Check whether or not a passcode needs to be set for the vault using {@link setPasscode}\n   *\n   * @example\n   * const passcodeSetupNeeded = await vault.isPasscodeSetupNeeded();\n   *\n   * @returns whether or not the passcode needs to be set\n   */\n  isPasscodeSetupNeeded(): Promise<boolean>;\n\n  /**\n   * Set or Change the passcode for the vault\n   *\n   * @example\n   * vault.setPasscode();\n   *\n   * @param passcode - The passcode to set. If left null a native dialog will prompt the user to enter it.\n   *\n   * @throws {@link VaultError} - if the vault is locked, passcode is disabled, user canceled pin prompt, or pin was mismatched\n   */\n  setPasscode(passcode?: string): Promise<void>;\n\n  /**\n   * Check if passcode authentication is enabled for the vault\n   *\n   * @example\n   * const passcodeEnabled = await vault.isPasscodeEnabled();\n   *\n   * @returns whether or not the passcode is enabled\n   */\n  isPasscodeEnabled(): Promise<boolean>;\n\n  /**\n   * Enable/Disable passcode authentication for the vault\n   *\n   * @example\n   * vault.setPasscodeEnabled(true);\n   *\n   * @param isPasscodeEnabled - whether or not passcode should be enabled\n   *\n   * @throws {@link VaultError} - if the vault is locked\n   */\n  setPasscodeEnabled(isPasscodeEnabled: boolean): Promise<void>;\n\n  /**\n   * Check if {@link AuthMode.SecureStorage} is enabled for the vault\n   *\n   * @example\n   * const secureStorageModeEnabled = await vault.isSecureStorageModeEnabled();\n   *\n   * @returns whether or not the secure storage mode is enabled\n   */\n  isSecureStorageModeEnabled(): Promise<boolean>;\n\n  /**\n   * Enable/Disable secure storage mode for the vault. Setting {@link AuthMode.SecureStorage} automatically disables passcode\n   * and biometric authentication and allows for session values to be stored persistently and securely at rest using the keychain but allowing the user\n   * to access the data without authenticating as long as the device is unlocked.\n   *\n   * @example\n   * vault.setSecureStorageModeEnabled(true);\n   *\n   * @param isSecureStorageModeEnabled - whether or not secure storage mode should be enabled\n   *\n   * @throws {@link VaultError} - if the vault is locked\n   */\n  setSecureStorageModeEnabled(isSecureStorageModeEnabled: boolean): Promise<void>;\n\n  /**\n   * Unlock the vault using either passcode or biometrics\n   *\n   * @example\n   * vault.unlock();\n   *\n   * @param usingPasscode - whether or not to use passcode to unlock the vault\n   * @param passcode - The passcode to use. If left null a native dialog will prompt the user to enter it.\n   *\n   * @throws {@link VaultError} - if the vault is locked, the unlock type wasn't enabled, user canceled pin prompt, or pin was mismatched\n   */\n  unlock(usingPasscode?: boolean, passcode?: string): Promise<void>;\n}\n\n/**\n * The lock event passed to the {@link onVaultLocked} handler.\n * @ignore\n */\nexport interface LockEvent {\n  /**\n   * If the data was persisted to the device before lock\n   */\n  saved: boolean;\n  /**\n   * If the lock was due to a background timeout\n   */\n  timeout: boolean;\n}\n\n/**\n * The main class which you can extend in order to implement vault usage.\n *  @typeparam `T` must extend {@link DefaultSession}\n *\n * @usage\n * ```typescript\n * interface MyCustomSession extends DefaultSession {\n *   // username & token are inherited\n *   email: string;\n *   age: number;\n *   nicknames: string[];\n * }\n *\n * export class IdentityService extends IonicIdentityVaultUser<MyCustomSession> {\n *\n * constructor(private http: HttpClient, private router: Router, platform: Platform) {\n *   super(platform, {\n *     authMode: AuthMode.BiometricAndPasscode,\n *     restoreSessionOnReady: false,\n *     unlockOnReady: false, // set true to auto prompt the user to unlock when vault is ready\n *     unlockOnAccess: true,\n *     lockAfter: 5000, // lock after 5 seconds in the background\n *     hideScreenOnBackground: true\n *   });\n *\n *   onVaultUnlocked(config: VaultConfig) {\n *     //Route to my home page\n *   }\n *\n *   onVaultLocked(event: LockEvent) {\n *     //Route to my login page\n *   }\n *\n * }\n * ```\n * @ignore\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface IdentityVaultUser<T extends {} = DefaultSession> {\n  /**\n   * Get raw access to the underlying vault api\n   */\n  getVault(): Promise<IdentityVault>;\n\n  /**\n   * The stored session data\n   */\n  getSession(): Promise<T | undefined>;\n\n  /**\n   * Get the session from memory (without checking the vault for it)\n   */\n  getSession(): Promise<T | undefined>;\n\n  /**\n   * Called when the vault has been locked\n   * @param event - The data about the lock event {@link LockEvent}\n   */\n  onVaultLocked(event: LockEvent): any;\n\n  /**\n   * Called when the vault has been unlocked\n   *\n   * @param config - The current configuration {@link VaultConfig} of the vault\n   */\n  onVaultUnlocked(state: VaultConfig): any;\n\n  /**\n   * Called when there has been a configuration change in the vault\n   *\n   * @param config - The updated configuration {@link VaultConfig} of the vault\n   */\n  onConfigChange(state: VaultConfig): any;\n\n  /**\n   * Called when the vault is ready\n   *\n   * @param config - The current configuration {@link VaultConfig} of the vault\n   *\n   * @returns - A promise that resolves when the vault is successfully configured and available.\n   */\n  onVaultReady(state: VaultConfig): any;\n\n  /**\n   * Called when there is an error during vault setup\n   *\n   * @param error - The {@link VaultError} that occurred.\n   *\n   */\n  onSetupError(error: VaultError): any;\n\n  /**\n   * Called when the session object is restored.\n   *\n   * @param session - The {@link DefaultSession} or user defined session that occurred.\n   *\n   */\n  onSessionRestored(session: T): any;\n\n  /**\n   * Called when the session fails to auto restore\n   *\n   * @param err - The {@link VaultError} or that occurred.\n   *\n   */\n  onSessionRestoreError(err: VaultError): any;\n\n  /**\n   * Called when the automatically unlocking the vault after it is ready fails.\n   *\n   * @param err - The {@link VaultError} or that occurred.\n   *\n   */\n  onUnlockOnReadyError(err: VaultError): any;\n\n  /**\n   * Called when attempting passcode unlock to allow for user defined passcode prompts.\n   *\n   * @param isPasscodeSetRequest - Whether or not this is a request to set the passcode.\n   *\n   * @returns - a string to use as the passcode of undefined to use native prompts\n   *\n   */\n  onPasscodeRequest(isPasscodeSetRequest: boolean): Promise<string | void>;\n\n  /**\n   * Promise ensuring the user vault is ready to be accessed or denoting an error in setup;\n   *\n   * @returns - A promise that resolves when the vault is succesfully configured and available.\n   */\n  ready(): Promise<void>;\n\n  /**\n   * Get the type of biometrics the device supports\n   *\n   * @returns the type of biometrics the device supports\n   */\n  getBiometricType(): Promise<BiometricType>;\n\n  /**\n   * Set the {@link AuthMode} for the vault. The vault must be unlocked or this will throw an error.\n   *\n   * @param authMode - The {@link AuthMode} to use.\n   *\n   * @throws {@link VaultError} - If the vault is locked or the mode is unavailale due to device hardware\n   */\n  setAuthMode(authMode: AuthMode): Promise<void>;\n\n  /**\n   * Get the {@link AuthMode} for the vault.\n   */\n  getAuthMode(): Promise<AuthMode>;\n\n  /**\n   * Returns the underlying Plugin Implementation. This can be overriden in the sub class\n   * service to allow for a customer browser implementation. Note that when overriding this\n   * with a browser implementation you should use the storeValue/getValue functions with the key\n   * `session` to store & retrieve the session as described or by {@link DefaultSession} or the interface\n   * that extends it.\n   *\n   * @usage\n   * ```typescript\n   * getPlugin(): IonicNativeAuthPlugin {\n   *   if (this.platform.is('cordova')) {\n   *     return super.getPlugin();\n   *   }\n   *   // MyCustomerBrowserImplementation must implement the IonicNativeAuthPlugin interface\n   *   // make sure getValue('session') & storeValue('session') store & retrieve the session.\n   *   return MyCustomBrowserImplementation();\n   * }\n   * ```\n   */\n  getPlugin(): IonicNativeAuthPlugin;\n\n  /**\n   * Lock the user out without clearing their secure session\n   * information from the vault\n   */\n  lockOut(): Promise<void>;\n\n  /**\n   * Unlock the user's vault using the AuthMode configured for the vault\n   * or the override passed in to the call.\n   * This will call the {@link onPasscodeRequest} handler\n   * if the specified {@link AuthMode} allows for it to allow for user defined passcode prompt\n   * You can get more fine grain contol using the {@link IdentityVault} directly\n   * by calling {@link getVault}\n   */\n  unlock(authMode?: AuthMode): Promise<void>;\n\n  /**\n   * Log the user out entirely, and forget any stored\n   * authentication tokens\n   */\n  logout(): Promise<void>;\n\n  /**\n   * Check if there are any saved sessions in the vault\n   */\n  hasStoredSession(): Promise<boolean>;\n\n  /**\n   * Restore the session from the vault\n   */\n  restoreSession(): Promise<T | undefined>;\n\n  /**\n   * Store the session to the vault\n   * @param session - the session to store\n   */\n  saveSession(session: T): Promise<void>;\n\n  /**\n   * Login a new session for the user. This method will clear the vault & any stored PIN for\n   * previously stored sessions.\n   *\n   * @param session - the session to store\n   * @param authMode? - optionally specify the {@link AuthMode} to  use for the new session.\n   * Defaults to the current configuration for the vault if undefined.\n   *\n   */\n  login(session: T, authMode?: AuthMode): Promise<void>;\n\n  /**\n   * Enable/Disable Biometric authentication\n   *\n   * @param isBiometricsEnabled - whether or not biometrics should be enabled\n   *\n   * @throws {@link VaultError} - if biometrics is unavailable or the vault is locked\n   */\n  setBiometricsEnabled(isBiometricsEnabled: boolean): Promise<void>;\n\n  /**\n   * Set whether or not the screen will be obscured in app switcher mode\n   *\n   * @param enabled\n   * @param dimBiometrics? - optional parameter for Android to obscure the screen behind biometric prompts via dimming the background instead of the splash screen.\n   *\n   * @returns void\n   */\n  setHideScreenOnBackground(enabled: boolean, dimBiometrics?: boolean): Promise<void>;\n\n  /**\n   * Enable/Disable passcode authentication. This will cause {@link setPasscode}\n   * to fire if passcode setup is required causing\n   * the {@link onPasscodeRequest} handler to fire\n   * to allow for user defined passcode prompt.\n   * You can get more fine grain contol using the {@link IdentityVault} directly\n   * by calling {@link getVault}\n   *\n   * @param isPasscodeEnabled - whether or not passcode should be enabled\n   *\n   * @throws {@link VaultError} - if the vault is locked\n   */\n  setPasscodeEnabled(isPasscodeEnabled: boolean): Promise<void>;\n\n  /**\n   * Set or change the passcode for the user\n   * This will call the {@link onPasscodeRequest} handler\n   * to allow for user defined passcode prompt.\n   * You can get more fine grain contol using the {@link IdentityVault} directly\n   * by calling {@link getVault}\n   *\n   * @throws {@link VaultError} - if the vault is locked, passcode is disabled, user canceled pin prompt, or pin was mismatched\n   */\n  setPasscode(): Promise<void>;\n\n  /**\n   * Check whether or not biometrics is enabled on the vault\n   *\n   * @returns whether or not biometrics is enabled\n   */\n  isBiometricsEnabled(): Promise<boolean>;\n\n  /**\n   * Check whether or not biometrics is supported by the device\n   * and has been configured by the current user of the device\n   *\n   * @returns whether or not biometrics is available\n   */\n  isBiometricsAvailable(): Promise<boolean>;\n\n  /**\n   * Check whether or not biometrics is supported by the device\n   *\n   * @returns whether or not biometrics is supported\n   */\n  isBiometricsSupported(): Promise<boolean>;\n\n  /**\n   * Check if passcode authentication is enabled for the vault\n   *\n   * @returns whether or not the passcode is enabled\n   */\n  isPasscodeEnabled(): Promise<boolean>;\n\n  /**\n   * Check if {@link AuthMode.SecureStorage} is enabled for the vault\n   *\n   * @returns whether or not the secure storage mode is enabled\n   */\n  isSecureStorageModeEnabled(): Promise<boolean>;\n}\n\n/**\n * The native plugin\n * @ignore\n */\nexport interface IonicNativeAuthPlugin {\n  getVault(config: PluginOptions): IdentityVault;\n}\n"]}