{"version":3,"file":"VaultMigrator.js","sourceRoot":"","sources":["../../src/VaultMigrator.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,sBAAsB,EAAE,MAAM,cAAc,CAAC;AAItD,MAAM,aAAc,SAAQ,sBAA2B;IAGrD,cAAc;IACd,YAAY,OAAqB,EAAE,iBAA6C,EAAE,UAA4B;QAC5G,KAAK,CACH;YACE,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;SACnC,EACD,OAAO,EACP,UAAU,CACX,CAAC;QAEF,IAAI,iBAAiB,EAAE;YACrB,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;SAC5C;IACH,CAAC;IAEM,MAAM,CAAC,WAAW,CACvB,OAAqB,EACrB,iBAA6C,EAC7C,UAA4B;QAE5B,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;YAC3B,aAAa,CAAC,QAAQ,GAAG,IAAI,aAAa,CAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,CAAC,CAAC;SACpF;QACD,OAAO,aAAa,CAAC,QAAQ,CAAC;IAChC,CAAC;;AA1Bc,sBAAQ,GAA8B,SAAS,CAAC;AA6BjE,MAAM,OAAO,aAAa;IAIxB;;;;;;;;;;;;;;;OAeG;IACH,YACE,OAAqB,EACrB,iBAAkF,EAClF,UAA4B;QAE5B,IAAI,CAAC,eAAe,GAAG,IAAI,aAAa,CAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,CAAC,CAAC;IACnF,CAAC;IAED;;;;;;;;;OASG;IACH,KAAK,CAAC,WAAW;QACf,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC,EAAE;YACpD,MAAM,KAAK,CAAC,yBAAyB,CAAC,CAAC;SACxC;QAED,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;QAEpC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;QACpD,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;QAEnC,MAAM,SAAS,GAAQ,EAAE,CAAC;QAE1B,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;YACtB,SAAS,CAAC,GAAG,CAAC,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;SAC5C;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;;;;;;;OASG;IACH,KAAK,CAAC,KAAK;QACT,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;QACpD,OAAO,KAAK,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;CACF","sourcesContent":["import type { VaultDescriptor, VaultOptions } from './definitions';\nimport { IonicIdentityVaultUser } from './vault-user';\n\ntype onPasscodeRequestCallback = (_isPasscodeSetRequest: boolean) => Promise<string | undefined>;\n\nclass MigratorVault extends IonicIdentityVaultUser<any> {\n  private static instance: MigratorVault | undefined = undefined;\n\n  /** @ignore */\n  constructor(options: VaultOptions, onPasscodeRequest?: onPasscodeRequestCallback, descriptor?: VaultDescriptor) {\n    super(\n      {\n        ready: () => Promise.resolve(true),\n      },\n      options,\n      descriptor\n    );\n\n    if (onPasscodeRequest) {\n      this.onPasscodeRequest = onPasscodeRequest;\n    }\n  }\n\n  public static getInstance(\n    options: VaultOptions,\n    onPasscodeRequest?: onPasscodeRequestCallback,\n    descriptor?: VaultDescriptor\n  ): MigratorVault {\n    if (!MigratorVault.instance) {\n      MigratorVault.instance = new MigratorVault(options, onPasscodeRequest, descriptor);\n    }\n    return MigratorVault.instance;\n  }\n}\n\nexport class VaultMigrator {\n  /** @ignore */\n  private migratorSession: MigratorVault;\n\n  /**\n   *\n   * @usage\n   * ```typescript\n   * const legacyVaultConfig = {\n   *  unlockOnAccess: true,\n   *  hideScreenOnBackground: true,\n   *  lockAfter: 5000,\n   *  // and more ....\n   * }\n   * const migrator = new VaultMigrator(legacyVaultConfig, customPasscodePrompt);\n   * ```\n   * @param options The legacy vault configuration options\n   * @param onPasscodeRequest An optional callback function that will be called when the vault attempts to request a passcode. The function returns a promise with a boolean that indicates if the passcode is being setup for the first time for the vault or not.\n   * @param descriptor An optional interface that describes the legacy vault.\n   */\n  constructor(\n    options: VaultOptions,\n    onPasscodeRequest?: (isPasscodeSetRequest: boolean) => Promise<string | undefined>,\n    descriptor?: VaultDescriptor\n  ) {\n    this.migratorSession = new MigratorVault(options, onPasscodeRequest, descriptor);\n  }\n\n  /**\n   * Exports the data of the legacy vault in its entirety.\n   *\n   * @usage\n   * ```typescript\n   * const data = await migrator.exportVault();\n   * console.log(\"@@VAULT DATA: \", JSON.stringify(data));\n   * ```\n   * @returns\n   */\n  async exportVault(): Promise<any | null> {\n    if (!(await this.migratorSession.hasStoredSession())) {\n      throw Error('no data in legacy vault');\n    }\n\n    await this.migratorSession.unlock();\n\n    const vault = await this.migratorSession.getVault();\n    const keys = await vault.getKeys();\n\n    const vaultData: any = {};\n\n    for (const key of keys) {\n      vaultData[key] = await vault.getValue(key);\n    }\n\n    return vaultData;\n  }\n\n  /**\n   * Clears out the legacy vault and removes it from the system.  Be sure to run {@link VaultMigrator.exportVault} before calling this method.\n   *\n   * @usage\n   * ```typescript\n   * const data = await migrator.exportVault();\n   * await importVault(data);\n   * await migrator.clear();\n   * ```\n   */\n  async clear(): Promise<void> {\n    const vault = await this.migratorSession.getVault();\n    return vault.clear();\n  }\n}\n"]}