{"version":3,"file":"VaultInterface.js","sourceRoot":"","sources":["../../src/VaultInterface.ts"],"names":[],"mappings":"","sourcesContent":["import type { IdentityVaultConfig } from './IdentityVaultConfig';\nimport type { VaultError } from './definitions';\n\nexport interface VaultLockEvent {\n  /**\n   * If the lock was due to a background timeout\n   */\n  timeout: boolean;\n}\n\nexport interface VaultInterface {\n  config: IdentityVaultConfig;\n  /** @deprecated Deprecated in favor of using the isEmpty method. */\n  doesVaultExist(): Promise<boolean>;\n  clear(): Promise<void>;\n  exportVault(): Promise<{ [key: string]: string }>;\n  importVault(data: { [key: string]: string }): Promise<void>;\n  isLocked(): Promise<boolean>;\n  isEmpty(): Promise<boolean>;\n  getKeys(): Promise<string[]>;\n  getValue<T = any>(key: string): Promise<T | null>;\n  lock(): Promise<void>;\n  removeValue(key: string): Promise<void>;\n  setCustomPasscode(passcode: string): Promise<void>;\n  setValue<T = any>(key: string, value: T): Promise<void>;\n  onConfigChanged(callback: (config: IdentityVaultConfig) => void): void;\n  onError(callback: (err: VaultError) => void): void;\n  onLock(callback: (lockEvent: { timeout: boolean }) => void): void;\n  onPasscodeRequested(\n    callback:\n      | ((isPasscodeSetRequest: boolean, onComplete: (code: string) => void) => void)\n      | ((isPasscodeSetRequest: boolean) => Promise<void>)\n  ): void;\n  onUnlock(callback: () => void): void;\n  unlock(): Promise<void>;\n  updateConfig(config: IdentityVaultConfig): Promise<void>;\n  requestBiometricPrompt(): Promise<boolean>;\n}\n"]}