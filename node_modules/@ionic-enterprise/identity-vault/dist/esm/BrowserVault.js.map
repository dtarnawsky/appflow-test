{"version":3,"file":"BrowserVault.js","sourceRoot":"","sources":["../../src/BrowserVault.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IdentityVaultConfig } from './IdentityVaultConfig';\nimport type { VaultInterface, VaultLockEvent } from './VaultInterface';\nimport type { VaultError } from './definitions';\nimport { VaultErrorCodes } from './definitions';\n\ntype Callback<T = any> = (value: T) => void;\ntype EmptyCallback = () => void;\nconst STORAGE_KEYS = {\n  DATA: 'data',\n};\n\n/**\n * THIS VAULT DOES NOT IMPLEMENT SECURE STORAGE IN THE BROWSER. It only exists\n * as a way to run browser-compatible code in place of Identity Vault. Browsers\n * do not have a secure storage element same as native devices. This class\n * is intended to be used to enable running your application in the browser while\n * simulating the functions of Identity Vault using sessionStorage.\n *\n * Represents a vault implementation for browser compatibility.\n */\nexport class BrowserVault implements VaultInterface {\n  /** @ignore */\n  private isVaultLocked = false;\n\n  /** @ignore */\n  private isVaultEmpty = true;\n\n  /** @ignore */\n  private configCallback: Callback<IdentityVaultConfig> | undefined;\n\n  /** @ignore */\n  private errorCallback: Callback<VaultError> | undefined;\n\n  /** @ignore */\n  private lockCallback: Callback<VaultLockEvent> | undefined;\n\n  /** @ignore */\n  private unlockCallback: EmptyCallback | undefined;\n\n  /** @ignore */\n  config: IdentityVaultConfig;\n\n  /**\n   * @usage\n   * ```typescript\n   * const vault = new Vault({\n   *  key: 'com.company.myvaultapp',\n   *  type: 'CustomPasscode',\n   *  deviceSecurityType: 'Both',\n   *  lockAfterBackgrounded: 2000,\n   * });\n   * ```\n   * @param config\n   */\n  constructor(config: IdentityVaultConfig) {\n    console.warn(\n      'THIS VAULT DOES NOT IMPLEMENT SECURE STORAGE IN THE BROWSER AND IS NOT INTENDED FOR PRODUCTION USE. It only exists as a way to run browser-compatible code in place of Identity Vault. Browsers do not have a secure storage element same as native devices. This class is intended to be used to enable running your application in the browser while simulating the functions of Identity Vault using sessionStorage.'\n    );\n    this.config = Object.assign(\n      {\n        deviceSecurityType: 'Both',\n        androidBiometricsPreferStrongVaultOrSystemPasscode: 'StrongVault',\n        shouldClearVaultAfterTooManyFailedAttempts: false,\n        customPasscodeInvalidUnlockAttempts: 5,\n        unlockVaultOnLoad: false,\n      },\n      config\n    );\n    this.isVaultLocked = config.unlockVaultOnLoad ? false : true;\n  }\n\n  /** @deprecated Deprecated in favor of using the isEmpty method. */\n  /** See {@link Vault.doesVaultExist} */\n  doesVaultExist(): Promise<boolean> {\n    const data = this.getDataObj();\n    return Promise.resolve(!!data);\n  }\n\n  /** See {@link Vault.clear} */\n  clear(): Promise<void> {\n    this.unlockIfLocked();\n    sessionStorage.removeItem(this.getKey(STORAGE_KEYS.DATA));\n    this.isVaultEmpty = true;\n    return Promise.resolve();\n  }\n\n  /** See {@link Vault.exportVault} */\n  exportVault(): Promise<Record<string, string>> {\n    this.unlockIfLocked();\n    const data = this.getDataObj();\n    return Promise.resolve(data ?? {});\n  }\n\n  /** See {@link Vault.importVault} */\n  importVault(data: Record<string, string>): Promise<void> {\n    this.setDataObj(data);\n    return Promise.resolve();\n  }\n\n  /** See {@link Vault.isLocked} */\n  isLocked(): Promise<boolean> {\n    return Promise.resolve(this.isVaultLocked);\n  }\n\n  /** See {@link Vault.isEmpty} */\n  isEmpty(): Promise<boolean> {\n    return Promise.resolve(this.isVaultEmpty);\n  }\n\n  /** See {@link Vault.getKeys} */\n  getKeys(): Promise<string[]> {\n    this.unlockIfLocked();\n    const data = this.getDataObj();\n    if (!data) return Promise.resolve([]);\n    return Promise.resolve(Object.keys(data));\n  }\n\n  /** See {@link Vault.getValue} */\n  getValue<T = any>(key: string): Promise<T | null> {\n    this.unlockIfLocked();\n    const data = this.getDataObj();\n    return Promise.resolve(data?.[key] ?? null);\n  }\n\n  /** See {@link Vault.lock} */\n  lock(): Promise<void> {\n    this.lockCallback?.({ timeout: false });\n    return Promise.resolve();\n  }\n\n  /** See {@link Vault.removeValue} */\n  removeValue(key: string): Promise<void> {\n    this.unlockIfLocked();\n    const data = this.getDataObj();\n    if (!data) return Promise.resolve();\n    const { [key]: removed, ...dataAfterRemoval } = data;\n    this.setDataObj(dataAfterRemoval);\n    return Promise.resolve();\n  }\n\n  /** See {@link Vault.setCustomPasscode} */\n  setCustomPasscode(passcode: string): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /** See {@link Vault.setValue} */\n  setValue<T = any>(key: string, value: T): Promise<void> {\n    this.unlockIfLocked();\n    const data = this.getDataObj();\n    if (!data) {\n      this.setDataObj({ [key]: value });\n    } else {\n      this.setDataObj({ ...data, [key]: value });\n    }\n    return Promise.resolve();\n  }\n\n  /** See {@link Vault.onConfigChanged} */\n  onConfigChanged(callback: Callback<IdentityVaultConfig>): void {\n    this.configCallback = callback;\n  }\n\n  /** See {@link Vault.onError} */\n  onError(callback: Callback<VaultError>): void {\n    this.errorCallback = callback;\n  }\n\n  /** See {@link Vault.onLock} */\n  onLock(callback: Callback<VaultLockEvent>): void {\n    this.lockCallback = callback;\n  }\n\n  /** See {@link Vault.onPasscodeRequested} */\n  onPasscodeRequested(callback: (isPasscodeSetRequest: boolean, onComplete: (code: string) => void) => void): void;\n  onPasscodeRequested(callback: (isPasscodeSetRequest: boolean) => Promise<void>): void;\n  onPasscodeRequested(callback: (isPasscodeSetRequest: boolean, onComplete: (code: string) => void) => void): void {\n    // No passcode support\n  }\n\n  /** See {@link Vault.onUnlock} */\n  onUnlock(callback: EmptyCallback): void {\n    this.unlockCallback = callback;\n  }\n\n  /** See {@link Vault.unlock} */\n  unlock(): Promise<void> {\n    this.unlockCallback?.();\n    return Promise.resolve();\n  }\n\n  /** See {@link Vault.updateConfig} */\n  updateConfig(config: IdentityVaultConfig): Promise<void> {\n    this.config = config;\n    this.configCallback?.(config);\n    return Promise.resolve();\n  }\n\n  /** @ignore */\n  requestBiometricPrompt(): Promise<boolean> {\n    this.unlockIfLocked();\n    return Promise.resolve(true);\n  }\n\n  /** @ignore */\n  private unlockIfLocked(): void {\n    if (this.isVaultLocked) {\n      this.unlock();\n    }\n  }\n\n  /** @ignore */\n  private getDataObj(): Record<string, any> | null {\n    const value = sessionStorage.getItem(this.getKey(STORAGE_KEYS.DATA));\n    if (!value) return null;\n    try {\n      const dataObj = JSON.parse(value);\n      this.isVaultEmpty = Object.keys(dataObj).length <= 0;\n      return dataObj;\n    } catch (e) {\n      this.errorCallback?.({\n        message: 'Unable to parse data store',\n        code: VaultErrorCodes.Unknown,\n      });\n      return null;\n    }\n  }\n\n  /** @ignore */\n  private setDataObj(data: Record<string, any>): void {\n    try {\n      const dataStr = JSON.stringify(data);\n      sessionStorage.setItem(this.getKey(STORAGE_KEYS.DATA), dataStr);\n      this.isVaultEmpty = Object.keys(data).length <= 0;\n    } catch (e) {\n      this.errorCallback?.({\n        message: 'Unable to serialize data',\n        code: VaultErrorCodes.Unknown,\n      });\n    }\n  }\n\n  /** @ignore */\n  private getKey(key: string): string {\n    return `IV-${this.config.key}-${key}`;\n  }\n}\n"]}