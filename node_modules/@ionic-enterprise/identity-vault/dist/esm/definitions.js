/**
 * The meaning of the error code in the thrown {@link VaultError}.
 */
export var VaultErrorCodes;
(function (VaultErrorCodes) {
    /**
     * An unknown error happened.
     * @constant `0`
     */
    VaultErrorCodes[VaultErrorCodes["Unknown"] = 0] = "Unknown";
    /**
     * The operation failed because the vault was locked.
     * @constant `1`
     */
    VaultErrorCodes[VaultErrorCodes["VaultLocked"] = 1] = "VaultLocked";
    /**
     * The operation failed because the vault was unavailable.
     * The most likely cause of this error is that a vault has not been configured.
     * @constant `2`
     */
    VaultErrorCodes[VaultErrorCodes["VaultUnavailable"] = 2] = "VaultUnavailable";
    /**
     * The operation failed because the some of the vault provided arguments were invalid.
     * @constant `3`
     */
    VaultErrorCodes[VaultErrorCodes["InvalidArguments"] = 3] = "InvalidArguments";
    /**
     * The credentials were invalidated. This can happen when a user changes biometrics or passcode.
     * @constant `4`
     */
    VaultErrorCodes[VaultErrorCodes["InvalidatedCredential"] = 4] = "InvalidatedCredential";
    /**
     * Biometric security is unavailable due to a passcode not being set up at the system level.
     * In order to use biometric identification on the device a system level passcode must be set up by the user.
     * @constant `5`
     */
    VaultErrorCodes[VaultErrorCodes["SecurityNotAvailable"] = 5] = "SecurityNotAvailable";
    /**
     * User authentication failed.
     * @constant `6`
     */
    VaultErrorCodes[VaultErrorCodes["AuthFailed"] = 6] = "AuthFailed";
    /**
     * Too many failed authentication attempts made against the custom passcode vault, so the vault was cleared and user will need to login again.
     * @constant `7`
     */
    VaultErrorCodes[VaultErrorCodes["TooManyFailedAttempts"] = 7] = "TooManyFailedAttempts";
    /**
     * The user cancelled the native authentication dialog.
     *
     * **Note**: On iOS, this error code will also be thrown in the event that the native authentication dialog fails as a result of too many failed attempts.
     * The user will be forced to cancel the dialog, triggering this error code.
     *
     * On Android, this error also will be thrown if using {@link DeviceSecurityType.SystemPasscode} or {@link DeviceSecurityType.Both} in the event of too many failed attempts.
     * Its currently not possible to get the nature of failures from the native authentication dialog, and similar to iOS, the user will be forced to cancel the dialog, triggering this error code.
     * @constant `8`
     */
    VaultErrorCodes[VaultErrorCodes["UserCanceledInteraction"] = 8] = "UserCanceledInteraction";
    /**
     * The user provided mismatched passcodes.
     * @constant `9`
     */
    VaultErrorCodes[VaultErrorCodes["MismatchedPasscode"] = 9] = "MismatchedPasscode";
    /**
     * The operation requires passcode to be setup but it isn't set yet. Call {@link Vault.setCustomPasscode} to set it.
     * @constant `10`
     */
    VaultErrorCodes[VaultErrorCodes["MissingPasscode"] = 10] = "MissingPasscode";
    /**
     * The operation failed because the application tried to unlock the vault with passcode authentication,
     * but the vault is not configured to allow passcode authentication.
     * @constant `11`
     */
    VaultErrorCodes[VaultErrorCodes["PasscodeNotEnabled"] = 11] = "PasscodeNotEnabled";
    /**
     * The key was not found. This can happen when a user changes biometrics or passcode.
     * @constant `12`
     */
    VaultErrorCodes[VaultErrorCodes["KeyNotFound"] = 12] = "KeyNotFound";
    /**
     * The operation failed because biometric authentication is not enabled.
     * This can occur when biometrics is not supported by the device
     * or when biometrics has not been configured for the device or vault.
     * @constant `13`
     */
    VaultErrorCodes[VaultErrorCodes["BiometricsNotEnabled"] = 13] = "BiometricsNotEnabled";
    /**
     * @ignore
     */
    VaultErrorCodes[VaultErrorCodes["InvalidAuthMode"] = 14] = "InvalidAuthMode";
    /**
     * Biometrics have not been authed yet (Android only)
     * @constant `15`
     */
    VaultErrorCodes[VaultErrorCodes["MissingBiometrics"] = 15] = "MissingBiometrics";
    /**
     * {@link DeviceSecurityType.SystemPasscode} for {@link DeviceSecurityType} not available on this Android device.
     * @constant `16`
     */
    VaultErrorCodes[VaultErrorCodes["AndroidSystemPasscodeUnavailable"] = 16] = "AndroidSystemPasscodeUnavailable";
    /**
     * Biometrics have been locked out, usually because of too many failed attempts.
     *
     * **Note:** This error will never be thrown if using {@link DeviceSecurityType.SystemPasscode} or {@link DeviceSecurityType.Both}.
     * Its currently not possible to get the nature of failures from the native authentication dialog, so the only error that would be thrown is {@link VaultErrorCodes.UserCanceledInteraction} as the user
     * is forced to cancel the prompt.
     *
     * @constant `17`
     */
    VaultErrorCodes[VaultErrorCodes["AndroidBiometricsLockedOut"] = 17] = "AndroidBiometricsLockedOut";
    /**
     * Biometrics have been locked out, usually because of too many failed attempts.
     *
     * @constant `18`
     */
    VaultErrorCodes[VaultErrorCodes["iOSBiometricsLockedOut"] = 18] = "iOSBiometricsLockedOut";
    /**
     * An unexpected error has occurred in the Android keystore.
     * Some android devices (such as the Samsung S10) will return this error code when
     * a maximum number of failed attempts is reached and the device must be restarted.
     * See: [Max Uses Per Boot](https://source.android.com/security/keystore/tags#max_uses_per_boot)
     *
     * @constant `19`
     */
    VaultErrorCodes[VaultErrorCodes["AndroidUnexpectedKeystoreError"] = 19] = "AndroidUnexpectedKeystoreError";
})(VaultErrorCodes || (VaultErrorCodes = {}));
/**
 * The meaning of the error code in the thrown {@link DeviceError}.
 */
export var DeviceErrorCodes;
(function (DeviceErrorCodes) {
    /**
     * An unknown error happened.
     * @constant `0`
     */
    DeviceErrorCodes[DeviceErrorCodes["Unknown"] = 0] = "Unknown";
    /**
     * The operation failed because the some of the vault provided arguments were invalid.
     * @constant `1`
     */
    DeviceErrorCodes[DeviceErrorCodes["InvalidArguments"] = 1] = "InvalidArguments";
    /**
     * The user cancelled the native authentication dialog.
     *
     * **Note**: On iOS, this error code will also be thrown in the event that the native authentication dialog fails as a result of too many failed attempts.
     * The user will be forced to cancel the dialog, triggering this error code.
     *
     * @constant `2`
     */
    DeviceErrorCodes[DeviceErrorCodes["UserCanceledInteraction"] = 2] = "UserCanceledInteraction";
    /**
     * Biometric security is unavailable due to a passcode not being set up at the system level.
     * In order to use biometric identification on the device a system level passcode must be set up by the user.
     * @constant `3`
     */
    DeviceErrorCodes[DeviceErrorCodes["SecurityNotAvailable"] = 3] = "SecurityNotAvailable";
    /**
     * User authentication failed.
     * @constant `4`
     */
    DeviceErrorCodes[DeviceErrorCodes["AuthFailed"] = 4] = "AuthFailed";
    /**
     * Biometrics have been locked out, usually because of too many failed attempts.
     *
     * @constant `5`
     */
    DeviceErrorCodes[DeviceErrorCodes["BiometricsLockedOut"] = 5] = "BiometricsLockedOut";
    /**
     * The operation failed because biometric authentication is not enabled.
     * This can occur when biometrics is not supported by the device
     * or when biometrics has not been configured for the device or vault.
     * @constant `6`
     */
    DeviceErrorCodes[DeviceErrorCodes["BiometricsNotEnabled"] = 6] = "BiometricsNotEnabled";
})(DeviceErrorCodes || (DeviceErrorCodes = {}));
/**
 * The possible values returned by {@link Device.getAvailableHardware}
 */
export var SupportedBiometricType;
(function (SupportedBiometricType) {
    /** The device supports fingerprint scanning. */
    SupportedBiometricType["Fingerprint"] = "fingerprint";
    /** The device supports facial recognition. */
    SupportedBiometricType["Face"] = "face";
    /** The device supports iris scanning. */
    SupportedBiometricType["Iris"] = "iris";
})(SupportedBiometricType || (SupportedBiometricType = {}));
/**
 * Possible device biometric strength levels on Android (always `strong` on iOS).
 * [More Information](https://source.android.com/security/biometric/measure#tiered-authentication).
 */
export var BiometricSecurityStrength;
(function (BiometricSecurityStrength) {
    /** Refers to Class 2 - Weak biometric security */
    BiometricSecurityStrength["Weak"] = "weak";
    /** Refers to Class 3 - Strong biometric security */
    BiometricSecurityStrength["Strong"] = "strong";
})(BiometricSecurityStrength || (BiometricSecurityStrength = {}));
/**
 * Possible app biometric permissions states on iOS (always `granted` on Android and on iOS with TouchID).
 */
export var BiometricPermissionState;
(function (BiometricPermissionState) {
    /** App has been granted permission to use FaceID */
    BiometricPermissionState["Granted"] = "granted";
    /** App has been denied permission to use FaceID */
    BiometricPermissionState["Denied"] = "denied";
    /** User has not yet been prompted to allow FaceID */
    BiometricPermissionState["Prompt"] = "prompt";
})(BiometricPermissionState || (BiometricPermissionState = {}));
/**
 * When type is set to 'DeviceSecurity', determines which aspects of the device to use to secure the vault.
 * Note: Android only supports `SystemPasscode` on Android 11 and greater.
 * @default `Both`
 */
export var DeviceSecurityType;
(function (DeviceSecurityType) {
    /** Will allow a system passcode to secure the vault. On Android, only supported on Android 11 and greater. */
    DeviceSecurityType["SystemPasscode"] = "SystemPasscode";
    /** WIll allow biometric hardware tos secure the vault. */
    DeviceSecurityType["Biometrics"] = "Biometrics";
    /** WIll allow both SystemPasscode or Biometrics as an option to secure the vault. */
    DeviceSecurityType["Both"] = "Both";
    /** No biometric security option will be used. */
    DeviceSecurityType["None"] = "None";
})(DeviceSecurityType || (DeviceSecurityType = {}));
/**
 * The type of vault
 */
export var VaultType;
(function (VaultType) {
    /**
     * No additional security is required in the app as long as the device was unlocked with a secure method.
     *
     * On iOS, this vault is synchronized via iCloud or new device setup.
     * */
    VaultType["SecureStorage"] = "SecureStorage";
    /**
     * Uses additional device features to add an additional layer of security while the user is in the app.
     *
     * On iOS, this vault is NOT synchronized via iCloud or new device setup.
     * */
    VaultType["DeviceSecurity"] = "DeviceSecurity";
    /**
     * User will set a custom passcode that will be used to access the vault.
     *
     * On iOS, this vault is NOT synchronized via iCloud or new device setup.
     * */
    VaultType["CustomPasscode"] = "CustomPasscode";
    /** Data will persist only while the application is in memory.
     *
     *  On iOS, this vault is NOT synchronized via iCloud or new device setup.
     */
    VaultType["InMemory"] = "InMemory";
})(VaultType || (VaultType = {}));
/**
 * For Android, when type is {@link VaultType.DeviceSecurity} and deviceSecurityType is {@link DeviceSecurityType.Both}, this options specifies if you want to
 * prefer a Strong Cryptographic Vault or the System Passcode fallback when they both aren't available.
 * @default `StrongVault`
 */
export var AndroidBiometricCryptoPreference;
(function (AndroidBiometricCryptoPreference) {
    /** Prefer to use a strong cryptographic vault. */
    AndroidBiometricCryptoPreference["StrongVault"] = "StrongVault";
    /** Prefer the system passcode fallback. */
    AndroidBiometricCryptoPreference["SystemPasscode"] = "SystemPasscode";
})(AndroidBiometricCryptoPreference || (AndroidBiometricCryptoPreference = {}));
// OLD METHODS
/**
 * The type of authentication the vault should be configured to allow.
 * @deprecated For use in legacy Vault Migrator only.
 * @ignore
 */
export var AuthMode;
(function (AuthMode) {
    /**
     * Biometrics authentication should only be allowed
     */
    AuthMode[AuthMode["BiometricOnly"] = 0] = "BiometricOnly";
    /**
     * Passcode authentication should only be allowed
     */
    AuthMode[AuthMode["PasscodeOnly"] = 1] = "PasscodeOnly";
    /**
     * Both biometric and passcode authentication should be allowed
     */
    AuthMode[AuthMode["BiometricAndPasscode"] = 2] = "BiometricAndPasscode";
    /**
     * Both biometric and passcode authentication should be disabled.
     * With this setting all data in the vault will be cleared on lock or
     * if the app is closed. Stored data is kept only in memory.
     */
    AuthMode[AuthMode["InMemoryOnly"] = 3] = "InMemoryOnly";
    /**
     * Use biometrics if it is available, otherwise use passcode
     */
    AuthMode[AuthMode["BiometricOrPasscode"] = 4] = "BiometricOrPasscode";
    /**
     * Both biometric and passcode authentication will be disabled but any stored values
     * will persist and be stored securely at rest using the keychain and will be available
     * without needing to authenticate via passcode or biometrics when the device is unlocked.
     */
    AuthMode[AuthMode["SecureStorage"] = 5] = "SecureStorage";
})(AuthMode || (AuthMode = {}));
//# sourceMappingURL=definitions.js.map