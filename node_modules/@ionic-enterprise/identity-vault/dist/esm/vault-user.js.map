{"version":3,"file":"vault-user.js","sourceRoot":"","sources":["../../src/vault-user.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  DefaultSession,\n  IdentityVault,\n  IdentityVaultUser,\n  IonicNativeAuthPlugin,\n  VaultDescriptor,\n  VaultOptions,\n  PluginConfiguration,\n  LockEvent,\n  VaultError,\n  VaultConfig,\n  BiometricType,\n  SupportedBiometricType,\n} from './definitions';\nimport { AuthMode, VaultErrorCodes } from './definitions';\n\ndeclare let IonicNativeAuth: IonicNativeAuthPlugin;\n\n/**\n * @hidden\n *\n * @ignore\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport class IonicIdentityVaultUser<T extends {} = DefaultSession> implements IdentityVaultUser<T> {\n  private vault!: IdentityVault;\n  private vIonicNativeAuth?: IonicNativeAuthPlugin;\n  private _readyPromise: Promise<any>;\n  private _config!: PluginConfiguration;\n  private _readyResolve!: (value?: void | PromiseLike<void>) => void;\n  private _readyReject!: (reason?: any) => void;\n  private _readyCalled = false;\n  private descriptor: VaultDescriptor;\n  private session?: T;\n\n  constructor(\n    public platform: { ready: () => Promise<any> },\n    private readonly options: VaultOptions,\n    descriptor?: VaultDescriptor\n  ) {\n    this.descriptor = descriptor || { username: '_lastUser', vaultId: 'default' };\n    this._readyPromise = this.initializeVault();\n  }\n\n  get token(): string | undefined {\n    const session: any = this.session;\n    return session?.token;\n  }\n\n  get username(): string | undefined {\n    const session: any = this.session;\n    return session?.username;\n  }\n\n  get config(): VaultConfig {\n    if (!this._config) {\n      return undefined as any;\n    }\n    let authMode: AuthMode | undefined;\n    const bioEnabled = this._config.isBiometricsEnabled;\n    const passEnabled = this._config.isPasscodeEnabled;\n    const secureStorageMode = this._config.isSecureStorageModeEnabled;\n    if (secureStorageMode) {\n      authMode = AuthMode.SecureStorage;\n    } else if (bioEnabled && passEnabled) {\n      authMode = AuthMode.BiometricAndPasscode;\n    } else if (bioEnabled && !passEnabled) {\n      authMode = AuthMode.BiometricOnly;\n    } else if (!bioEnabled && passEnabled) {\n      authMode = AuthMode.PasscodeOnly;\n    } else if (!bioEnabled && !passEnabled) {\n      authMode = AuthMode.InMemoryOnly;\n    }\n    return {\n      authMode: authMode,\n      isPasscodeSetupNeeded: this._config.isPasscodeSetupNeeded,\n      lockAfter: this._config.lockAfter,\n      hideScreenOnBackground: this._config.hideScreenOnBackground,\n    };\n  }\n\n  // overidable event handlers\n  onVaultLocked(_event: LockEvent): void {\n    /* Do Nothing */\n  }\n  onSessionRestoreError(_err: VaultError): void {\n    /* Do Nothing */\n  }\n  onUnlockOnReadyError(_err: VaultError): void {\n    /* Do Nothing */\n  }\n  onVaultUnlocked(_config: VaultConfig): void {\n    /* Do Nothing */\n  }\n  onVaultReady(_config: VaultConfig): void {\n    /* Do Nothing */\n  }\n  onSetupError(_error: VaultError): void {\n    /* Do Nothing */\n  }\n  onConfigChange(_config: VaultConfig): void {\n    /* Do Nothing */\n  }\n  onSessionRestored(_session: T): void {\n    /* Do Nothing */\n  }\n  async onPasscodeRequest(_isPasscodeSetRequest: boolean): Promise<string | undefined> {\n    return;\n  }\n\n  private async onReady(vault: IdentityVault) {\n    if (this._readyCalled) {\n      return;\n    }\n    this._readyCalled = true;\n    this.vault = vault;\n    const inUse = await this.vault.isInUse();\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    this._config = vault.config!;\n    const locked = await this.vault.isLocked();\n\n    let restoreSessionError!: VaultError;\n\n    try {\n      if (this.options.restoreSessionOnReady && inUse) {\n        await this._restoreSession();\n      }\n    } catch (e) {\n      restoreSessionError = e as VaultError;\n    }\n\n    let unlockOnReadyError!: VaultError;\n    try {\n      if (locked && this.options.unlockOnReady) {\n        await this._unlock();\n      }\n    } catch (e) {\n      unlockOnReadyError = e as VaultError;\n    }\n\n    // Note Swallow all errors in init like Vault is Locked Etc.\n    try {\n      if (!inUse) {\n        await this._trySetAuthMode(this.options.authMode);\n      }\n    } catch (e) {\n      // Do Nothing\n    }\n    this._readyResolve();\n    this.onVaultReady(this.config);\n    if (restoreSessionError) {\n      this.onSessionRestoreError(restoreSessionError);\n    }\n    if (unlockOnReadyError) {\n      this.onUnlockOnReadyError(restoreSessionError);\n    }\n  }\n\n  private onLock(event: LockEvent) {\n    this.session = undefined;\n    this.onVaultLocked(event);\n  }\n\n  private async onUnlock(config: PluginConfiguration) {\n    await this.ready();\n    this._config = config;\n    this.onVaultUnlocked(this.config);\n  }\n\n  private onError(error: VaultError) {\n    this._readyReject(error);\n    this.onSetupError(error);\n  }\n\n  private onConfig(config: PluginConfiguration) {\n    this._config = config;\n    this.onConfigChange(this.config);\n  }\n\n  public async ready(): Promise<void> {\n    return this._readyPromise;\n  }\n\n  private async _unlock(authMode?: AuthMode): Promise<void> {\n    const locked = await this.vault.isLocked();\n    if (!locked) {\n      return;\n    }\n    authMode = authMode !== undefined && authMode !== AuthMode.BiometricOrPasscode ? authMode : this.config.authMode;\n    switch (authMode) {\n      case AuthMode.BiometricOnly:\n        return this.vault.unlock();\n      case AuthMode.PasscodeOnly:\n        return this.unlockWithPasscode();\n      case AuthMode.BiometricAndPasscode:\n        try {\n          await this.vault.unlock();\n          return;\n        } catch (e: any) {\n          const handleableErrors = [\n            VaultErrorCodes.AuthFailed,\n            VaultErrorCodes.BiometricsNotEnabled,\n            VaultErrorCodes.UserCanceledInteraction,\n            VaultErrorCodes.InvalidatedCredential,\n          ];\n          if (handleableErrors.indexOf(e.code) > -1) {\n            await this.unlockWithPasscode();\n            // The user removed fingerprints/faceID and so the bio creds are gone\n            // if they are using passcode auth we can resave the credential to autoreset\n            // the mode to PasscodeOnly if bio is no longer available.\n            if (e.code === VaultErrorCodes.InvalidatedCredential) {\n              const session = await this.restoreSession();\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              await this.saveSession(session!);\n            }\n            return;\n          }\n          throw e;\n        }\n    }\n  }\n\n  public async unlock(authMode?: AuthMode): Promise<void> {\n    await this.ready();\n    return this._unlock(authMode);\n  }\n\n  private async unlockWithPasscode() {\n    const passcode = await this.onPasscodeRequest(false);\n    return this.vault.unlock(true, passcode);\n  }\n\n  private async _setPasscode() {\n    const locked = await this.vault.isLocked();\n    if (locked) {\n      // eslint-disable-next-line no-throw-literal\n      throw { code: VaultErrorCodes.VaultLocked, message: 'Operation not allowed while vault locked.' };\n    }\n    const passcode = await this.onPasscodeRequest(true);\n    return this.vault.setPasscode(passcode);\n  }\n\n  public async setPasscode(): Promise<void> {\n    await this.ready();\n    return this._setPasscode();\n  }\n\n  public async getSession(): Promise<T | undefined> {\n    await this.ready();\n    if (this.options.unlockOnAccess) {\n      await this._unlock();\n    }\n    return this.session;\n  }\n\n  private async _restoreSession(): Promise<T | undefined> {\n    const inUse = await this.vault.isInUse();\n    if (!inUse) {\n      return;\n    }\n    if (this.options.unlockOnAccess) {\n      await this._unlock();\n    }\n    this.session = await this.vault.getValue('session');\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    this.onSessionRestored(this.session!);\n    return this.session;\n  }\n\n  public async restoreSession(): Promise<T | undefined> {\n    await this.ready();\n    return this._restoreSession();\n  }\n\n  public async saveSession(session: T): Promise<void> {\n    await this.ready();\n    if (this.config.isPasscodeSetupNeeded) {\n      await this.setPasscode();\n    }\n    try {\n      await this.vault.storeValue('session', session);\n    } catch (e: any) {\n      // Catch the case where Biometrics with Passcode Fallback\n      // was enabled but the user disabled passcode or removed their\n      // fingerprints/faceid and try to recover by setting to passcode only\n      // mode.\n      if (e.code === VaultErrorCodes.SecurityNotAvailable) {\n        const authMode = await this.getAuthMode();\n        if (authMode === AuthMode.BiometricAndPasscode) {\n          await this.setAuthMode(AuthMode.PasscodeOnly);\n          return this.saveSession(session);\n        }\n      }\n      throw e;\n    }\n    this.session = session;\n  }\n\n  public async login(session: T, authMode?: AuthMode): Promise<void> {\n    await this.ready();\n    await this.logout();\n    await this._trySetAuthMode(authMode);\n    return this.saveSession(session);\n  }\n\n  public async getVault(): Promise<IdentityVault> {\n    await this.ready();\n    return this.vault;\n  }\n\n  private async initializeVault(): Promise<void> {\n    await this.platform.ready();\n\n    if (this.vault != null) {\n      return Promise.resolve();\n    }\n\n    if (this.vIonicNativeAuth == null) {\n      this.vIonicNativeAuth = this.getPlugin();\n    }\n\n    const readyPromise = new Promise<void>((resolve, reject) => {\n      this._readyResolve = resolve;\n      this._readyReject = reject;\n    });\n\n    const {\n      lockAfter,\n      hideScreenOnBackground,\n      shouldClearVaultAfterTooManyFailedAttempts,\n      allowSystemPinFallback,\n      androidPromptNegativeButtonText,\n      androidPromptTitle,\n      androidPromptSubtitle,\n      androidPromptDescription,\n      androidPINPromptTitle,\n      androidPINPromptSubtitle,\n      androidPINPromptConfirmTitle,\n      androidPINPromptVerifyTitle,\n      androidPINPromptConfirmButtonText,\n      androidPINPromptNegativeButtonText,\n      iosPromptText,\n    } = this.options;\n\n    this.vault = this.vIonicNativeAuth.getVault({\n      lockAfter,\n      hideScreenOnBackground,\n      shouldClearVaultAfterTooManyFailedAttempts,\n      allowSystemPinFallback,\n      androidPromptNegativeButtonText,\n      androidPromptTitle,\n      androidPromptSubtitle,\n      androidPromptDescription,\n      androidPINPromptTitle,\n      androidPINPromptSubtitle,\n      androidPINPromptConfirmTitle,\n      androidPINPromptVerifyTitle,\n      androidPINPromptConfirmButtonText,\n      androidPINPromptNegativeButtonText,\n      iosPromptText,\n      ...this.descriptor,\n      onLock: this.onLock.bind(this),\n      onConfig: this.onConfig.bind(this),\n      onError: this.onError.bind(this),\n      onUnlock: this.onUnlock.bind(this),\n      onReady: this.onReady.bind(this),\n    });\n\n    return readyPromise;\n  }\n\n  public getPlugin(): IonicNativeAuthPlugin {\n    return IonicNativeAuth;\n  }\n\n  public async getBiometricType(): Promise<BiometricType> {\n    await this.ready();\n    return this.vault.getBiometricType();\n  }\n\n  public async getAvailableHardware(): Promise<SupportedBiometricType[]> {\n    await this.ready();\n    return this.vault.getAvailableHardware();\n  }\n\n  public async lockOut(): Promise<void> {\n    await this.ready();\n    await this.vault.lock();\n    this.session = undefined;\n  }\n\n  public async logout(): Promise<void> {\n    await this.ready();\n    await this.vault.clear();\n    this.session = undefined;\n    this._config = await this.vault.getConfig();\n  }\n\n  public async hasStoredSession(): Promise<boolean> {\n    await this.ready();\n    return this.vault.isInUse();\n  }\n\n  public async setBiometricsEnabled(isBiometricsEnabled: boolean): Promise<void> {\n    await this.ready();\n    return this._setBiometricsEnabled(isBiometricsEnabled);\n  }\n\n  private async _setBiometricsEnabled(isBiometricsEnabled: boolean): Promise<void> {\n    return this.vault.setBiometricsEnabled(isBiometricsEnabled);\n  }\n\n  public async setHideScreenOnBackground(enabled: boolean): Promise<void> {\n    await this.ready();\n    return this.vault.setHideScreenOnBackground(enabled);\n  }\n\n  public async setPasscodeEnabled(isPasscodeEnabled: boolean): Promise<void> {\n    await this.ready();\n    await this._setPasscodeEnabled(isPasscodeEnabled);\n  }\n\n  private async _setPasscodeEnabled(isPasscodeEnabled: boolean): Promise<void> {\n    await this.vault.setPasscodeEnabled(isPasscodeEnabled);\n    this._config = await this.vault.getConfig();\n    if (this.config.isPasscodeSetupNeeded) {\n      await this._setPasscode();\n    }\n  }\n\n  public async isBiometricsEnabled(): Promise<boolean> {\n    await this.ready();\n    return this.vault.isBiometricsEnabled();\n  }\n\n  public async isBiometricsAvailable(): Promise<boolean> {\n    await this.ready();\n    return this.vault.isBiometricsAvailable();\n  }\n\n  public async isBiometricsSupported(): Promise<boolean> {\n    await this.ready();\n    return this.vault.isBiometricsSupported();\n  }\n\n  public async isSecureStorageModeEnabled(): Promise<boolean> {\n    await this.ready();\n    return this.vault.isSecureStorageModeEnabled();\n  }\n\n  public async isPasscodeEnabled(): Promise<boolean> {\n    await this.ready();\n    return this.vault.isPasscodeEnabled();\n  }\n\n  private async _setAuthMode(authMode?: AuthMode) {\n    authMode = authMode !== undefined ? authMode : this.config.authMode;\n    if (authMode === this.config.authMode) {\n      return;\n    }\n    switch (authMode) {\n      case AuthMode.BiometricOnly:\n        await this._setBiometricsEnabled(true);\n        await this._setPasscodeEnabled(false);\n        break;\n      case AuthMode.PasscodeOnly:\n        await this._setPasscodeEnabled(true);\n        await this._setBiometricsEnabled(false);\n        break;\n      case AuthMode.BiometricAndPasscode:\n        await this._setPasscodeEnabled(true);\n        await this._setBiometricsEnabled(true);\n        break;\n      case AuthMode.BiometricOrPasscode:\n        try {\n          await this._setBiometricsEnabled(true);\n          await this._setPasscodeEnabled(false);\n        } catch (error) {\n          await this._setPasscodeEnabled(true);\n        }\n        break;\n      case AuthMode.InMemoryOnly:\n        await this._setPasscodeEnabled(false);\n        await this._setBiometricsEnabled(false);\n        await this.vault.setSecureStorageModeEnabled(false);\n        break;\n      case AuthMode.SecureStorage:\n        // Note: Setting this mode automatically disables the other modes in native code.\n        await this.vault.setSecureStorageModeEnabled(true);\n        break;\n      default:\n        // eslint-disable-next-line no-throw-literal\n        throw { code: VaultErrorCodes.InvalidAuthMode, message: 'Invalid AuthMode' };\n    }\n  }\n\n  private async _trySetAuthMode(authMode?: AuthMode) {\n    try {\n      await this._setAuthMode(authMode);\n    } catch (error: any) {\n      if (error.code !== VaultErrorCodes.BiometricsNotEnabled && error.code !== VaultErrorCodes.SecurityNotAvailable) {\n        throw error;\n      }\n    }\n  }\n\n  public async setAuthMode(authMode?: AuthMode): Promise<void> {\n    await this.ready();\n    return this._setAuthMode(authMode);\n  }\n\n  public async getAuthMode(): Promise<AuthMode> {\n    await this.ready();\n    this._config = await this.vault.getConfig();\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.config.authMode!;\n  }\n}\n"]}