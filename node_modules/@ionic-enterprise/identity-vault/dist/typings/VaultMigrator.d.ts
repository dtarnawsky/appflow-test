import type { VaultDescriptor, VaultOptions } from './definitions';
export declare class VaultMigrator {
    /** @ignore */
    private migratorSession;
    /**
     *
     * @usage
     * ```typescript
     * const legacyVaultConfig = {
     *  unlockOnAccess: true,
     *  hideScreenOnBackground: true,
     *  lockAfter: 5000,
     *  // and more ....
     * }
     * const migrator = new VaultMigrator(legacyVaultConfig, customPasscodePrompt);
     * ```
     * @param options The legacy vault configuration options
     * @param onPasscodeRequest An optional callback function that will be called when the vault attempts to request a passcode. The function returns a promise with a boolean that indicates if the passcode is being setup for the first time for the vault or not.
     * @param descriptor An optional interface that describes the legacy vault.
     */
    constructor(options: VaultOptions, onPasscodeRequest?: (isPasscodeSetRequest: boolean) => Promise<string | undefined>, descriptor?: VaultDescriptor);
    /**
     * Exports the data of the legacy vault in its entirety.
     *
     * @usage
     * ```typescript
     * const data = await migrator.exportVault();
     * console.log("@@VAULT DATA: ", JSON.stringify(data));
     * ```
     * @returns
     */
    exportVault(): Promise<any | null>;
    /**
     * Clears out the legacy vault and removes it from the system.  Be sure to run {@link VaultMigrator.exportVault} before calling this method.
     *
     * @usage
     * ```typescript
     * const data = await migrator.exportVault();
     * await importVault(data);
     * await migrator.clear();
     * ```
     */
    clear(): Promise<void>;
}
