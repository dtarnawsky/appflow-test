import { IdentityVaultConfig } from './IdentityVaultConfig';
import { VaultError } from './definitions';
export interface VaultLockEvent {
    /**
     * If the lock was due to a background timeout
     */
    timeout: boolean;
}
export interface VaultInterface {
    config: IdentityVaultConfig;
    /** @deprecated Deprecated in favor of using the isEmpty method. */
    doesVaultExist(): Promise<boolean>;
    clear(): Promise<void>;
    exportVault(): Promise<{
        [key: string]: string;
    }>;
    importVault(data: {
        [key: string]: string;
    }): Promise<void>;
    isLocked(): Promise<boolean>;
    isEmpty(): Promise<boolean>;
    getKeys(): Promise<string[]>;
    getValue<T = any>(key: string): Promise<T | null>;
    lock(): Promise<void>;
    removeValue(key: string): Promise<void>;
    setCustomPasscode(passcode: string): Promise<void>;
    setValue<T = any>(key: string, value: T): Promise<void>;
    onConfigChanged(callback: (config: IdentityVaultConfig) => void): void;
    onError(callback: (err: VaultError) => void): void;
    onLock(callback: (lockEvent: {
        timeout: boolean;
    }) => void): void;
    onPasscodeRequested(callback: ((isPasscodeSetRequest: boolean, onComplete: (code: string) => void) => void) | ((isPasscodeSetRequest: boolean) => Promise<void>)): void;
    onUnlock(callback: () => void): void;
    unlock(): Promise<void>;
    updateConfig(config: IdentityVaultConfig): Promise<void>;
    requestBiometricPrompt(): Promise<boolean>;
}
