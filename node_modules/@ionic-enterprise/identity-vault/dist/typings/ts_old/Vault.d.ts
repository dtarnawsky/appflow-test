import { IdentityVaultConfig } from './IdentityVaultConfig';
import { VaultInterface, VaultLockEvent } from './VaultInterface';
import { VaultError } from './definitions';
/**
 * Represents a vault for secure value storage
 */
export declare class Vault implements VaultInterface {
    /** @ignore */
    private passCodeRequestedCallback?;
    /** @ignore */
    private defaultConfig;
    /**
     * Contains the current config properties of the vault.
     * See the {@link IdentityVaultConfig | IdentityVaultConfig} docs page for more info.
     *
     * @usage
     * ```typescript
     * const newVault = new Vault(vaultConfig);
     * if(newVault.config.deviceSecurityType === DeviceSecurityType.None) {
     *   ...
     * }
     * ```
     *
     */
    config: IdentityVaultConfig;
    /**
     * @usage
     * ```typescript
     * const vault = new Vault({
     *  key: 'com.company.myvaultapp',
     *  type: 'CustomPasscode',
     *  deviceSecurityType: DeviceSecurityType.None,
     *  lockAfterBackgrounded: 2000,
     * });
     * ```
     * @param config
     */
    constructor(config: IdentityVaultConfig);
    /**
     * Resolves true if a vault with the same key already exists, and false if not.
     * The vault does not need to be unlocked to check.
     *
     * __Note:__
     *  - Using {@link Vault.removeValue | removeValue()} to remove all of your vault data will not cause this function to resolve false, however {@link Vault.clear | clear()} will.
     *  - A vault only exists once it has been interacted with at least once via any of the following instance methods.
     *    - {@link Vault.setValue | setValue()}
     *    - {@link Vault.removeValue | removeValue()}
     *    - {@link Vault.importVault | importVault()}
     *    - {@link Vault.exportVault | exportVault()}
     *    - {@link Vault.unlock | unlock()}
     *    - {@link Vault.updateConfig | updateConfig()}
     *
     * @usage
     * ```typescript
     * const vault = new Vault(existingVaultConfig);
     * const vaultExists = await vault.doesVaultExists()
     * if (!vaultExists) {
     *  // the vault does not exist...
     * }
     * ```
     *
     * @deprecated Deprecated in favor of using the {@link Vault.isEmpty | isEmpty()} method.
     */
    doesVaultExist(): Promise<boolean>;
    /**
     * Clears out the current vault and removes it from the system.
     * Note: The vault does not need to be unlocked in order to clear it. No credentials are checked
     * when clearing the vault.
     *
     * @usage
     * ```typescript
     * const vault = new Vault(existingVaultConfig);
     * await vault.clear();
     * ```
     */
    clear(): Promise<void>;
    /**
     * Exports the data of the current vault in its entirety.
     * The data is a map with keys that are strings and values that are JSON.
     * Calling `exportVault` will attempt to unlock the vault if it is currently locked.
     *
     * @usage
     * ```typescript
     * const vault = new Vault(existingVaultConfig);
     * const data = await vault.exportVault();
     * ```
     *
     * @return The resolved object is a map with string keys and string values.
     *
     */
    exportVault(): Promise<{
        [key: string]: string;
    }>;
    /**
     * Imports data into the vault, replacing the current contents of the vault.
     * The data is a map with keys that are strings and values that are JSON.
     * Calling `importVault` will attempt to unlock the vault if it is currently locked.
     *
     * @usage
     * ```typescript
     * const dataFromElsewhere = await getUserData();
     * const newVault = new Vault(vaultConfig);
     * await newVault.importVault(dataFromElsewhere);
     * ```
     *
     * @param data The entire data object to be imported. The shape of data must be {[key: string]: string}.
     *
     */
    importVault(data: {
        [key: string]: string;
    }): Promise<void>;
    /**
     * Checks if the vault is currently in a locked state, which signifies that the contents
     * of the secure vault are not currently accessible. `isLocked` can also return true if the
     * vault does not exist.
     *
     * @usage
     * ```typescript
     * const vault = new Vault(existingVaultConfig);
     * const locked = await vault.isLocked();
     * if (locked) {
     *  // vault is locked (or does not exist);
     * }
     * ```
     */
    isLocked(): Promise<boolean>;
    /**
     * Returns an array of keys that are currently in the vault.
     * Calling `getKeys` will attempt to unlock the vault if it is currently locked.
     *
     * @usage
     * ```typescript
     * const vault = new Vault(existingVaultConfig);
     * const allKeys = await vault.getKeys();
     * allKeys.forEach((key) => {
     *  // do something with the key
     * });
     * ```
     */
    getKeys(): Promise<string[]>;
    /**
     * Gets the value for a given key. Returns null if the key does not exist.
     * Calling `getValue` will attempt to unlock the vault if it is currently locked.
     *
     * @usage
     * ```typescript
     * const vault = new Vault(existingVaultConfig);
     * const userFirstName = await vault.getValue<string>("firstname");
     * ```
     *
     * @param key The key to look up the value for
     *
     */
    getValue<T = any>(key: string): Promise<T | null>;
    /**
     * Locks the vault if it is currently unlocked.
     * Locking the vault with remove all secure data from memory inside of Identity Vault, but not your application.
     *
     * @usage
     * ```typescript
     * const vault = new Vault(existingVaultConfig);
     * await vault.lock();
     * ```
     */
    lock(): Promise<void>;
    /**
     * Removes a value from the vault.
     * Calling `removeValue` will attempt to unlock the vault if it is currently locked.
     *
     * @usage
     * ```typescript
     * const vault = new Vault(existingVaultConfig);
     * await vault.removeValue("address");
     * ```
     *
     * @param key The key to remove
     *
     */
    removeValue(key: string): Promise<void>;
    /**
     * When the vault type is set to 'CustomPasscode', this method sets the passcode required to
     * secure the vault. If the vault is unlocked this method can be used to change the passcode.
     *
     * This method is typically called in the `onPasscodeRequested` callback.
     *
     * @usage
     * ```typescript
     * const vault = new Vault(existingVaultConfig);
     * const code = window.prompt("Enter your passcode.");
     * if (code) {
     *  await vault.setCustomPasscode(code);
     * }
     * ```
     *
     * @param passcode The user supplied passcode to secure the vault with.
     *
     */
    setCustomPasscode(passcode: string): Promise<void>;
    /**
     * Sets the value of an item in the vault.
     * Calling `setValue` will attempt to unlock the vault if it is currently locked.
     *
     * @usage
     * ```typescript
     * const vault = new Vault(existingVaultConfig);
     * await vault.setValue<string>("theme", theme);
     * ```
     *
     * @param key The key for the new value.
     * @param value The value to store in the vault. Value can be of any type, as it will be parsed to JSON in the vault.
     *
     */
    setValue<T = any>(key: string, value: T): Promise<void>;
    /**
     * Triggers when a config change occurs.
     *
     * @usage
     * ```typescript
     * vault.onConfigChanged((config) => {
     *  console.log("updated config: ", config);
     * });
     * ```
     * @param callback The callback function that will be called when the event triggers. Passes in the current vault config.
     *
     */
    onConfigChanged(callback: (config: IdentityVaultConfig) => void): void;
    /**
     * Triggers when an error occurs in the application.
     * Errors that come back as rejected promises also trigger this event.
     *
     * @usage
     * ```typescript
     * vault.onError((err) => {
     *  console.log('ERROR from callback', JSON.stringify(err));
     * });
     * ```
     *
     * @param callback The callback function that will be called when the event triggers. Passes in the error object.
     *
     */
    onError(callback: (err: VaultError) => void): void;
    /**
     * Triggers when the vault enters a locked state.
     *
     * @usage
     * ```typescript
     * vault.onLock((lockEvent) => { displayNotification(`Vault locked. Was from timeout: ${lockEvent.timeout}`); })
     * ```
     *
     * @param callback The callback function that will be called when the event triggers. Passes in an object with a boolean property of `timeout` indicating if the lock was due to a background timeout or not.
     *
     */
    onLock(callback: (lockEvent: VaultLockEvent) => void): void;
    /**
     * For CustomPasscode vaults, this event triggers when the vault is attempting to unlock and needs the user to provide a passcode.
     *
     * The callback parameter is a function that has two parameters available to it:
     * - `isPasscodeSetRequest` is a boolean value indicating whether the passcode needs to be setup for the first time or not.
     * - `onComplete` is a function that accepts a string parameter 'code', that when called will set the passcode on the vault and attempt to unlock the vault again calling the same method that originally tried to unlock the vault.
     *
     * @usage
     * ```typescript
     * vault.onPasscodeRequested((isPasscodeSetRequest, onComplete) => {
     *   const message = isPasscodeSetRequest
     *     ? 'Setup Passcode' // passcode is being set for first time
     *     : 'Enter passcode'; // passcode is being asked for unlock
     *   const passcode = window.prompt(message) || '';
     *   onComplete(passcode);
     * });
     * ```
     *
     * @param callback The callback function that will be called when the event triggers. Contains a boolean that indicates if the passcode is being setup for the first time for the vault or not, and an onComplete function to be called when a passcode is ready to be set on the vault.
     *
     */
    onPasscodeRequested(callback: (isPasscodeSetRequest: boolean, onComplete: (code: string) => void) => void): void;
    /**
     * For CustomPasscode vaults, this event triggers when the vault is attempting to unlock and needs the user to provide a passcode.
     *
     * The callback parameter is a async function that has one parameter available to it:
     * - `isPasscodeSetRequest` is a boolean value indicating whether the passcode needs to be setup for the first time or not.
     *
     * When the callback function is resolved, an attempt to unlock the vault again calling the same method that originally tried to unlock the vault will be made.
     * Before the function is resolved, you should prompt the user to supply a passcode, and then supply that value to `setCustomPasscode`.
     *
     * @usage
     * ```typescript
     * vault.onPasscodeRequested(async (isPasscodeSetRequest) => {
     *   const message = isPasscodeSetRequest
     *     ? 'Setup Passcode' // passcode is being set for first time
     *     : 'Enter passcode'; // passcode is being asked for unlock
     *   // async yourGetPasscodeFromUser() returns a string of the users entry or null if canceled.
     *   const passcode = await yourGetPasscodeFromUser(message);
     *   await vault.setCustomPasscode(passcode ?? '');
     * });
     * ```
     *
     * @param callback The callback function that will be called when the event triggers. This async function returns a promise with a boolean that indicates if the passcode is being setup for the first time for the vault or not.
     *
     */
    onPasscodeRequested(callback: (isPasscodeSetRequest: boolean) => Promise<void>): void;
    /**
     * Triggers when the vault enters an unlocked state.
     *
     * @usage
     * ```typescript
     * vault.onUnlock(() => {
     *  console.log("vault is now unlocked");
     * });
     * ```
     * @param callback The callback function that will be called when the event triggers.
     *
     */
    onUnlock(callback: () => void): void;
    /**
     * Manually unlock the vault. Will trigger any authentication mechanism needed to access the vault (passcode, biometrics, etc..).
     *
     * @usage
     * ```typescript
     * const vault = new Vault(existingVaultConfig);
     * await vault.unlock();
     * ```
     */
    unlock(): Promise<void>;
    /**
     * Updates the configuration of the current vault.
     *
     *  @usage
     * ```typescript
     * async function changeVaultType(type: VaultType) {
     *  const vault = new Vault(this.existingVaultConfig);
     *  const newConfig = { ...this.existingVaultConfig, type };
     *  await vault.updateConfig(newConfig);
     *  this.existingVaultConfig = newConfig;
     * }
     * ```
     *
     * @param config The new config
     *
     */
    updateConfig(config: IdentityVaultConfig): Promise<void>;
    /**
     * Resolves true if a vault contains no data, and false if any data exists in the vault.
     * The vault does not need to be unlocked to check.
     *
     * __Note:__ Vaults created prior to version 5.2.0 will return false until the vault is unlocked for the first time after updating, even if the vault contains no data.
     * After which this method will return the expected value.
     *
     * @usage
     * ```typescript
     * const vault = new Vault(existingVaultConfig);
     * const vaultIsEmpty = await vault.isEmpty()
     * if (vaultIsEmpty) {
     *  // the vault is empty and contains no data...
     * }
     * ```
     */
    isEmpty(): Promise<boolean>;
    /** @ignore */
    private handleError;
    /** @ignore */
    requestBiometricPrompt(): Promise<boolean>;
    /**
     * @ignore
     */
    private resume;
    /**
     * @ignore
     */
    private setup;
    /**
     * @ignore
     */
    private getPersistedVaultConfig;
}
