import { DefaultSession, IdentityVault, IdentityVaultUser, IonicNativeAuthPlugin, VaultDescriptor, VaultOptions, LockEvent, VaultError, VaultConfig, BiometricType, SupportedBiometricType } from './definitions';
import { AuthMode } from './definitions';
/**
 * @hidden
 *
 * @ignore
 */
export declare class IonicIdentityVaultUser<T extends {} = DefaultSession> implements IdentityVaultUser<T> {
    platform: {
        ready: () => Promise<any>;
    };
    private readonly options;
    private vault;
    private vIonicNativeAuth?;
    private _readyPromise;
    private _config;
    private _readyResolve;
    private _readyReject;
    private _readyCalled;
    private descriptor;
    private session?;
    constructor(platform: {
        ready: () => Promise<any>;
    }, options: VaultOptions, descriptor?: VaultDescriptor);
    readonly token: string | undefined;
    readonly username: string | undefined;
    readonly config: VaultConfig;
    onVaultLocked(_event: LockEvent): void;
    onSessionRestoreError(_err: VaultError): void;
    onUnlockOnReadyError(_err: VaultError): void;
    onVaultUnlocked(_config: VaultConfig): void;
    onVaultReady(_config: VaultConfig): void;
    onSetupError(_error: VaultError): void;
    onConfigChange(_config: VaultConfig): void;
    onSessionRestored(_session: T): void;
    onPasscodeRequest(_isPasscodeSetRequest: boolean): Promise<string | undefined>;
    private onReady;
    private onLock;
    private onUnlock;
    private onError;
    private onConfig;
    ready(): Promise<void>;
    private _unlock;
    unlock(authMode?: AuthMode): Promise<void>;
    private unlockWithPasscode;
    private _setPasscode;
    setPasscode(): Promise<void>;
    getSession(): Promise<T | undefined>;
    private _restoreSession;
    restoreSession(): Promise<T | undefined>;
    saveSession(session: T): Promise<void>;
    login(session: T, authMode?: AuthMode): Promise<void>;
    getVault(): Promise<IdentityVault>;
    private initializeVault;
    getPlugin(): IonicNativeAuthPlugin;
    getBiometricType(): Promise<BiometricType>;
    getAvailableHardware(): Promise<SupportedBiometricType[]>;
    lockOut(): Promise<void>;
    logout(): Promise<void>;
    hasStoredSession(): Promise<boolean>;
    setBiometricsEnabled(isBiometricsEnabled: boolean): Promise<void>;
    private _setBiometricsEnabled;
    setHideScreenOnBackground(enabled: boolean): Promise<void>;
    setPasscodeEnabled(isPasscodeEnabled: boolean): Promise<void>;
    private _setPasscodeEnabled;
    isBiometricsEnabled(): Promise<boolean>;
    isBiometricsAvailable(): Promise<boolean>;
    isBiometricsSupported(): Promise<boolean>;
    isSecureStorageModeEnabled(): Promise<boolean>;
    isPasscodeEnabled(): Promise<boolean>;
    private _setAuthMode;
    private _trySetAuthMode;
    setAuthMode(authMode?: AuthMode): Promise<void>;
    getAuthMode(): Promise<AuthMode>;
}
