import { PromptConfig } from './PromptConfig';
import { SupportedBiometricType } from './definitions';
import { BiometricPermissionState, BiometricSecurityStrength } from './definitions';
export declare class Device {
    /** @ignore */
    constructor();
    /**
     * Gets the types of biometrics the device supports.
     *
     * @usage
     * ```typescript
     * const hardware = await Device.getAvailableHardware();
     * hardware.forEach((biometricType) => console.log("Type: " + biometricType));
     * ```
     */
    static getAvailableHardware(): Promise<SupportedBiometricType[]>;
    /**
     * Check whether biometrics are locked out on the device.
     *
     * On Android, the locked out state will only known after an attempted biometric unlock.
     *
     * @usage
     * ```typescript
     * const isLockedOut = await Device.isLockedOutOfBiometrics();
     * if (isLockedOut) {
     *  // device is locked out ...
     * }
     * ```
     */
    static isLockedOutOfBiometrics(): Promise<boolean>;
    /**
     * Checks the device biometric strength level.
     *
     * On iOS this will always return 'strong'.
     *
     * @usage
     * ```typescript
     * const biometricStrength = await Device.getBiometricStrengthLevel();
     * ```
     */
    static getBiometricStrengthLevel(): Promise<BiometricSecurityStrength>;
    /**
     * Check whether or not the screen will be obscured in app switcher mode.
     *
     * @usage
     * ```typescript
     * const willHideScreen = await Device.isHideScreenOnBackgroundEnabled();
     * ```
     */
    static isHideScreenOnBackgroundEnabled(): Promise<boolean>;
    /**
     * Set whether or not the screen will be obscured in app switcher mode.
     * If enabled, by default the screen behind biometric prompts will be obscured via the splash screen.
     *
     * For Android, an optional boolean *dimBiometrics* can be set to obscure
     * the screen behind biometric prompts via dimming the background instead.
     *
     * @usage
     * ```typescript
     * await Device.setHideScreenOnBackground(true, true);
     * ```
     */
    static setHideScreenOnBackground(enabled?: boolean, dimBiometrics?: boolean): Promise<void>;
    /**
     * Check whether the device OS-level passcode has been set.
     *
     * @usage
     * ```typescript
     * const hasSystemPasscode = await Device.isSystemPasscodeSet();
     * if (hasSystemPasscode) {
     *  // device has a system passcode
     * }
     * ```
     */
    static isSystemPasscodeSet(): Promise<boolean>;
    /**
     * Check whether or not biometrics is supported by the device and has been configured by the current user of the device.
     *
     * @usage
     * ```typescript
     * const biometricsEnabled = await Device.isBiometricsEnabled();
     * if (!biometricsEnabled) {
     *  // biometrics not enabled on this device...
     * }
     * ```
     */
    static isBiometricsEnabled(): Promise<boolean>;
    /**
     * Returns the current state of biometric permissions.
     *
     * On Android and iOS devices with TouchID, this always returns `granted`.
     *
     * @usage
     * ```typescript
     * const permissions = await Device.isBiometricsAllowed();
     * if (permissions === BiometricPermissionState.Denied) {
     *  // user must enable FaceID for the application...
     * }
     * ```
     */
    static isBiometricsAllowed(): Promise<BiometricPermissionState>;
    /**
     * Check whether or not biometrics is supported by the device.
     *
     * @usage
     * ```typescript
     * const biometricsSupported = await Device.isBiometricsSupported();
     * if (biometricsSupported) {
     *   // biometrics is supported on this device...
     * }
     * ```
     */
    static isBiometricsSupported(): Promise<boolean>;
    /**
     * Check if the device has a secure hardware enclave.
     *
     * @usage
     * ```typescript
     * const hasSecureHardware = await Device.hasSecureHardware();
     * if (!hasSecureHardware) {
     *    // this device doesn't have secure hardware
     * }
     * ```
     */
    static hasSecureHardware(): Promise<boolean>;
    /**
     * Show a biometric prompt.
     *
     * @usage
     * ```typescript
     * try {
     *  const promptConfig = {...};
     *  await Device.showBiometricPrompt(promptConfig);
     *  // biometric prompt succeeded successfully
     * } catch (err) {
     *  // handle error
     * }
     * ```
     */
    static showBiometricPrompt(config: PromptConfig): Promise<void>;
    /**
     * @ignore
     */
    private static handleError;
}
