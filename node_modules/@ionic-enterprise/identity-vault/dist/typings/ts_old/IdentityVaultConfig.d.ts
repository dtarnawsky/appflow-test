import { AndroidBiometricCryptoPreference, DeviceSecurityType, VaultType } from './definitions';
export interface IdentityVaultConfig {
    /**
     * - Type: {@link AndroidBiometricCryptoPreference}
     *
     * For Android, when {@link VaultType} is {@link VaultType.DeviceSecurity} and {@link DeviceSecurityType} is {@link DeviceSecurityType.Both}, this options specifies if you want to
     * prefer a Strong Cryptographic Vault or the System Passcode fallback when they both aren't available.
     * @default {@link AndroidBiometricCryptoPreference.StrongVault}
     */
    androidBiometricsPreferStrongVaultOrSystemPasscode?: AndroidBiometricCryptoPreference;
    /**
     * - Type: `string`
     *
     * For Android, the text of the button to dismiss the biometric prompt.
     * @default `"Cancel"`
     */
    androidBiometricsNegativeButtonText?: string;
    /**
     * - Type: `string`
     *
     * For Android, the title text for the authentication prompt.
     * @default `"Please Authenticate"`
     */
    androidBiometricsPromptTitle?: string;
    /**
     * - Type: `string`
     *
     * For Android, the subtitle text for the authentication prompt.
     * @default `null`
     */
    androidBiometricsPromptSubtitle?: string;
    /**
     * - Type: `string`
     *
     * For Android, the description text for the Android authentication prompt.
     * @default `null`
     */
    androidBiometricsPromptDescription?: string;
    /**
     * - Type: `number`
     *
     * When type is set to `CustomPasscode`, this controls how many failed unlock attempts are allowed if
     * {@link shouldClearVaultAfterTooManyFailedAttempts} is enabled. Having this many failed attempts will clear the vault.
     * @default `5`
     */
    customPasscodeInvalidUnlockAttempts?: number;
    /**
     * - Type: {@link DeviceSecurityType}
     *
     * When type is set to `DeviceSecurity`, determines which aspects of the device to use to secure the vault.
     * Note: Android only supports `SystemPasscode` on Android 11 and greater.
     *
     * @default {@link DeviceSecurityType.None}
     */
    deviceSecurityType?: DeviceSecurityType;
    /**
     * - Type: `string`
     *
     * For iOS, the localized title for the cancel button in the dialog presented to the user during authentication.  If null, iOS will use an appropriate default value, like "Cancel".
     * @default 'null`
     */
    iosBiometricsLocalizedCancelTitle?: string;
    /**
     * - Type: `string`
     *
     * For iOS, the localized title for the fallback button presented to the user during authentication.  If null, iOS will use an appropriate default value, like "Use Passcode‚Äù.
     * @default `null`
     */
    iosBiometricsLocalizedFallbackTitle?: string;
    /**
     * - Type: `string`
     *
     * For iOS, the localized explanation for authentication shown in the dialog presented to the user.
     * @default `null`
     */
    iosBiometricsLocalizedReason?: string;
    /**
     * - Type: `string`
     *
     * The key that will be used to uniquely identify the vault in the app. If only one vault will be used, you can set it to something like the app identifier (com.mycompany.myapp).   *
     */
    key: string;
    /**
     * - Type: `number`
     *
     * The number of milliseconds the app can be in the background until the vault locks
     * @default `null`
     */
    lockAfterBackgrounded?: number;
    /**
     * - Type: `boolean`
     *
     * If the app should clear the vault if too many invalid unlock attempts where made.
     *
     * Only supported on CustomPasscode vaults.
     *
     * @default `false`
     */
    shouldClearVaultAfterTooManyFailedAttempts?: boolean;
    /**
     * - Type: {@link VaultType}
     *
     * The type of vault.
     */
    type: VaultType;
    /**
     * - Type: `boolean`
     *
     * When true, the vault will attempt to unlock when the app launches and resumes from being in the background.
     * @default `false`
     */
    unlockVaultOnLoad?: boolean;
}
