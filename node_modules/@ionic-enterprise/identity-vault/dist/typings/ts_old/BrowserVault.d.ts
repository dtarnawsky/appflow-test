import { IdentityVaultConfig } from './IdentityVaultConfig';
import { VaultInterface, VaultLockEvent } from './VaultInterface';
import { VaultError } from './definitions';
declare type Callback<T = any> = (value: T) => void;
declare type EmptyCallback = () => void;
/**
 * THIS VAULT DOES NOT IMPLEMENT SECURE STORAGE IN THE BROWSER. It only exists
 * as a way to run browser-compatible code in place of Identity Vault. Browsers
 * do not have a secure storage element same as native devices. This class
 * is intended to be used to enable running your application in the browser while
 * simulating the functions of Identity Vault using sessionStorage.
 *
 * Represents a vault implementation for browser compatibility.
 */
export declare class BrowserVault implements VaultInterface {
    /** @ignore */
    private isVaultLocked;
    /** @ignore */
    private isVaultEmpty;
    /** @ignore */
    private configCallback;
    /** @ignore */
    private errorCallback;
    /** @ignore */
    private lockCallback;
    /** @ignore */
    private unlockCallback;
    /** @ignore */
    config: IdentityVaultConfig;
    /**
     * @usage
     * ```typescript
     * const vault = new Vault({
     *  key: 'com.company.myvaultapp',
     *  type: 'CustomPasscode',
     *  deviceSecurityType: 'Both',
     *  lockAfterBackgrounded: 2000,
     * });
     * ```
     * @param config
     */
    constructor(config: IdentityVaultConfig);
    /** @deprecated Deprecated in favor of using the isEmpty method. */
    /** See {@link Vault.doesVaultExist} */
    doesVaultExist(): Promise<boolean>;
    /** See {@link Vault.clear} */
    clear(): Promise<void>;
    /** See {@link Vault.exportVault} */
    exportVault(): Promise<Record<string, string>>;
    /** See {@link Vault.importVault} */
    importVault(data: Record<string, string>): Promise<void>;
    /** See {@link Vault.isLocked} */
    isLocked(): Promise<boolean>;
    /** See {@link Vault.isEmpty} */
    isEmpty(): Promise<boolean>;
    /** See {@link Vault.getKeys} */
    getKeys(): Promise<string[]>;
    /** See {@link Vault.getValue} */
    getValue<T = any>(key: string): Promise<T | null>;
    /** See {@link Vault.lock} */
    lock(): Promise<void>;
    /** See {@link Vault.removeValue} */
    removeValue(key: string): Promise<void>;
    /** See {@link Vault.setCustomPasscode} */
    setCustomPasscode(passcode: string): Promise<void>;
    /** See {@link Vault.setValue} */
    setValue<T = any>(key: string, value: T): Promise<void>;
    /** See {@link Vault.onConfigChanged} */
    onConfigChanged(callback: Callback<IdentityVaultConfig>): void;
    /** See {@link Vault.onError} */
    onError(callback: Callback<VaultError>): void;
    /** See {@link Vault.onLock} */
    onLock(callback: Callback<VaultLockEvent>): void;
    /** See {@link Vault.onPasscodeRequested} */
    onPasscodeRequested(callback: (isPasscodeSetRequest: boolean, onComplete: (code: string) => void) => void): void;
    onPasscodeRequested(callback: (isPasscodeSetRequest: boolean) => Promise<void>): void;
    /** See {@link Vault.onUnlock} */
    onUnlock(callback: EmptyCallback): void;
    /** See {@link Vault.unlock} */
    unlock(): Promise<void>;
    /** See {@link Vault.updateConfig} */
    updateConfig(config: IdentityVaultConfig): Promise<void>;
    /** @ignore */
    requestBiometricPrompt(): Promise<boolean>;
    /** @ignore */
    private unlockIfLocked;
    /** @ignore */
    private getDataObj;
    /** @ignore */
    private setDataObj;
    /** @ignore */
    private getKey;
}
export {};
